<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>团队建设 on 谷粒的博客</title>
    <link>https://kuhungio.me/tags/%E5%9B%A2%E9%98%9F%E5%BB%BA%E8%AE%BE/</link>
    <description>Recent content in 团队建设 on 谷粒的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 09 Jul 2021 09:07:13 +0800</lastBuildDate><atom:link href="https://kuhungio.me/tags/%E5%9B%A2%E9%98%9F%E5%BB%BA%E8%AE%BE/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>扁平化团队背后的困境与改善方法</title>
      <link>https://kuhungio.me/2021/the-tyranny-of-structurelessness/</link>
      <pubDate>Fri, 09 Jul 2021 09:07:13 +0800</pubDate>
      
      <guid>https://kuhungio.me/2021/the-tyranny-of-structurelessness/</guid>
      <description>我所见扁平化团队背后的危机 越来越多的扁平化 越来越多的公司开始宣称他们是扁平化团队。扁平化就是字面意思：整个组织的架构很宽，而纵深很窄。基层员工到组织领袖，可能只有3层。扁平化的概念，是相对于层级分明的大型组织而言的，同时它也是较小组织吸引人才的一个关键。背后隐藏着基本假设：富有创意和才华的年轻人，很难忍受传统大型架构组织的官僚。组织需要更扁的层级，以加快信息的流通和促进决策的有效性。
扁平化背后的独裁 现实生活中，管理的扁平化大多出现在小公司，当公司逐渐成长后，扁平化也将暴露一些问题。在这篇文章中，我们将其称为扁平化背后的独裁。本篇的思想框架主要来源于文章《The Tyranny of Structurelessness》。该文章阐述了上世纪70年代，伴随着女性权力运动，无架构组织中出现的一些问题。我们今天将其带入公司管理视角，逐条分析扁平化背后的问题，以探寻可能的解决方案，以及尝试着去思考：作为扁平化团队的一员，如何规避其负面效果，最大化扁平组织架构的效能。
无架构组织的出现 在当时，无架构、扁平化起源于女性对男性主导的社会权力结构的反抗。传统的组织中，多级架构存在于组织内。而当时的运动想摆脱这一点，于是提出了无架构（后文又叫做扁平化）的主张。当然扁平化不是完全无架构，但可以将无架构看成扁平化的特例，即只有1-2层组织。在这样的组织架构中，人们通过非正式会议达成共识。
不过这样的理想，却充斥着精英主义和排他性，即需要高度精英化的人才才能完成组织的基本运转，同时由于没有明显的架构，各自为战的小团体十分普遍，团队多样性缺失。
架构的天然性是无架构的阻碍 无架构的理想很丰满，可现实却很骨感。架构存在于人类社会的方方面面。一旦存在着资源的分配，不同的人受限于个人经历与价值观，势必有不同的主张取向，这些分歧将导致小团体的产生，进一步产生组织架构。与此同时，无架构也是极具欺骗性的。因为首先，发起这个主张的人一定是最有权力的，这样他才能发起和推动无架构。
无架构下的决策模糊 同时，由于没有明确的组织架构，也就意味着决策规则的模糊。决策规则集中在少数人手里，而圈子外或者不知道规则的人，则将处于困顿状态。这种信息不透明，会在无架构组织内产生割裂。而从其他渠道获取的小道信息极可能存在偏差，这进一步加深了误解。
组织的成败取决于精英的水平 在上面的决策过程中，我们可以发现拥有规则的少数人，能对其余人施加权力。这些人也被叫做精英（elite）。也就是说，整个组织能否做出有效的决策，极大程度依靠这群精英的综合实力水平。
精英圈子的对立特性 这样被寄予厚望的精英圈子，却会表现出两个彼此对立的特性。对于内部，他们彼此倾听、相互让步。但到了外部，他们会忽视甚至是会同外部意见相对抗。当团体内产生两个及以上的社群朋友关系，即产生了派系。对于其他未明确加入派系的人，这些派系的人将相互竞争吸纳剩余人；但也有可能由于排他性的存在，拒绝新人加入。
无架构组织的管理无能 无架构团体起作用是需要前提的，如果没能充分评估好前提，则容易导致管理无能。无能的具体表现在于以下方面。团体内结党营私，形成各类小团体小圈层。由于精英主义的排他性，会导致孤立的广泛存在。在没有明确任务的情况下，产生内耗：一部分群体，会尝试着去控制另一部分群体。
提升管理无能的四个前提举措 如果想减轻无架构的负面作用，原文提出了如下四点举措。
 任务导向，保证每个人都有各自的任务，不至于任务模糊开始内耗。 团队尽可能的小，同质化高。这样的情况下，组织内成员才更可能理解彼此。 高度沟通，让组织内每一个成员，都能充分理解规则和决策的逻辑。 所需的技能非高度专一，每个人都有替代的可能性。以避免出现资源与话语权垄断的情形。  扁平化团队的责任人迷思 扁平化组织中，很多人常遇到的疑惑是：这件事谁在负责？
由于组织未明确设立发言人和统筹者，很难定义一个明确的负责人。这对于从控制型、强结构型组织过来的人来说，会产生组织混乱低效的感觉。
在事情推进的过程中，某些成员将主动或被动地成为发言人。不过这样的发言人，很可能受到组织内其他成员的排挤。因为没有正式任命，其他人可能会产生嫉妒心理。更糟糕的是发言人的地位，组织无法取消。这就导致扁平化团队虽然在自发形成负责人，却无法控制或保证这些发言人的利益诉求和组织一致。
扁平化的潜台词与积极意义 回到我们当下的组织中来，越来越多的公司对外宣称扁平化。在沟通层面，这降低了官僚主义的可能。不过在个人发展层面，也模糊了成员成长的空间。即意味着晋升的模糊性。
可反过来也不一定是对的。如果你想要一个初创企业死得更快，那就在其中设立多级领导。换灯泡的故事不知道大家听过没。某间房间需要更换灯泡，在数十位领导审批通后，又被几位领导围观，公司仅有的业务人员老李终于有机会换下了灯泡。而这，离小李发现灯泡坏了已经过去了好几个月。
从无架构中反思 从无架构的组织反思，我们会发现其核心问题有三点：小圈层、精英主义、以及明星体制。由于没有明确的组织架构，人们根据喜好或行为被划分进入更小的圈层。如果刚好这个圈层掌握了决策信息，则形成了精英主义。组织决策的质量依赖于精英的综合实力。当这个圈层的决策信息模糊时，则迫切需要英雄主义式的明星员工站出来，承担决策和推进的角色。
人力资源视角 我们可以通过一些人力资源的策略，来最小化其负面作用。就小圈层而言，其实就算是正式的架构组织，也会存在。真正致命的是，组织的使命与业务所仰仗的精英或明星员工，他们的能力决定了组织的决策走向。为了达到更好的决策效果，这就要求人员水平要足够高。不仅仅是要契合当下的业务，也需要面向未来，吸引并补充更高水准的员工。
从企业文化角度，也要鼓励信息的高频同步，鼓励坦诚清晰、有话直说，以此来保证反馈的有效性。通过这种方式，加快组织内信息的流动，使高水平员工做出的决策能基于更大的面貌。再一个，引入hrbp和pmo，做一个信息沟通桥梁与项目推进的作用，来实现发言与统筹的角色。
个体成员角度 这其实一度是我的疑惑，也是我写下本文的动机。目前通过涉猎更多的资料，以及和团队内的成员沟通，找到了一些可能的答案，与你分享。
首先第一个，解放自主性。在扁平化团队中，不会有过去阶级化组织中常见的命令式需求。也就是说，你的需求很可能需要自己去寻找。这点更类似于学习型组织，没有固定的流程与制度来控制每个人，而是希望每个人能自适应组织的需求。不仅是需求需要自己去沟通，在某些没有发言人的场合下，也应勇敢站出来，承担发言人角色。在扁平化组织内，职级头衔已经没有意义。推动某事的力量，在于基于事实的推演，而非职级。
其次第二个，充分沟通，寻求及时的反馈。在扁平化组织里，没有绝对的上下级，也没有官高一级压死人的情况。就像上面所说，扁平化的初衷就是加快决策速度，放权基层决策。在这种情况下，则更应该积极去沟通，努力打破小圈层现象，去寻求业务方或是客户的及时反馈。这点，也是践行公司文化的过程。有话直说，以理服人。
第三个，让自己成为明天的更高水平员工。正如前面所说，组织的决策有效性，取决于每一个员工的综合水平。作为今天的我，可能适合今天的决策环境，但高速发展之下，还一定胜任吗？这就要求我们，以开放的心态，去努力成为明天的高水平员工。不仅专业技能和业务理解能力需持续磨练加强，综合能力中的沟通能力、共情能力以及影响并激励他人的能力，这些都需要为明天做好准备。
 总结 在本文中，我们探讨了扁平化组织中的常见问题：小圈层、精英化以及明星体制。这些问题若处理不好，则很大程度影响扁平化的决策效果。为此我们需要面向未来招聘高水准的员工，强化组织内的沟通和信息流动机制。作为个人，为了更好适应组织，则需要解放自身能动性、对于遇见的困惑，做到有话直说，坦诚清晰。面向未来，培养自身技能。
对此，你怎么看？你所在的组织结构是什么样的，如果让你选择，你会愿意加入扁平化组织吗？</description>
    </item>
    
    <item>
      <title>不可不知的项目推进与团队建设之道</title>
      <link>https://kuhungio.me/2020/pmp/</link>
      <pubDate>Mon, 26 Oct 2020 23:21:09 +0800</pubDate>
      
      <guid>https://kuhungio.me/2020/pmp/</guid>
      <description>项目管理好坏，决定了项目的成败。无论做什么工作，项目地企划、执行、效果评估、复盘，总是必不可少的。
我们可能遇到过如下场景：
 业务方提出需求，扑哧扑哧做个几周后，却发现并不是他们想要的。这样的后果就是：   项目结果被搁置
  几周的开发时间浪费
   业务和开发其乐融融，第一版也顺利交付，而后由于老板或者更高一级负责人的要求，要做的功能点越来越多，以至于现有功能延误。  需求的企划，项目的推进、以及团队的建设，对于结果的影响，是强相关的。做好以上三点，有两个好处。一来，可以减缓项目的失败风险，二来，也有助于团队更高效地产出。
 以下内容，框架节选自书籍《程序员修炼之道》，根据理解有部分删改。《程序员修炼之道》，是软件开发的经典之作。对于软件行业的原则性问题，进行了详细而又到位的探讨，出版二十余年。第二版添加了最新的潮流趋势，由云风翻译，质量上乘，值得推荐给大家。
一般做阅读，都是带着问题来的，为了解决对应问题。项目管理方面，也有经典之作 PMBOK，不过那本书蛮厚的，还没消化完全。以下内容，解答了我对于需求、项目以及团队建设的部分迷思。大部分摘录自《程序员修炼之道》，穿插工作中的心得体会。希望给读者朋友带来帮助。也希望自己，能常读常新，在工作中实践、反馈、进步。
项目启动前 需求——没有人知道自己想要什么 在每个项目启动前，往往是需求的对接。
业务部门想要的是什么？是大老板拍脑袋的需求，还是确切有利于业务问题的解决？
之前的职业经历中，遇到的很多需求，都是大老板拍脑袋，然后层层传递下来。到了执行层，基本无法判断其真实的目的。最后只能和末端的需求人员对接，成了单一的传声筒。
这种情况，十分危险。
根据乔老爷定律：没有人能确切描述自己的需求，直到你把产品摆在他面前。
这样的后果就是，为了缓解高层的焦虑，做了很多脱离实际的功能。而一线，最熟悉用户的人，许多业务中的改进点，却只能搁置。
灯塔——开发人员的职责 作为开发人员，尤其是作为数据开发、数据挖掘人员，我们的职责之一，便是帮助他人了解想要什么。因为，产品数据、模型效果等最直观的感受者，还是我们。只有我们才知道：什么能做、能做到的程度。这也是区分初级和高级工程师的因素之一。
在帮助他人澄清需求时，常见的错误，便是照单全收。这往往会为后续开发，埋下隐患。人们的日常沟通，尚存在许多误解，更别说涉及开发建模的活。
正确的做法，是复述一遍，将自己理解的程度反馈出去，并明确问题的边界。如果，刚好对业务领域了解不深，则更应该通过沉浸体验业务、复述需求等方式，寻求反馈。
什么需求是好需求 与此同时，在需求澄清过程中，应当区分需求与策略。需求，是指功能上的开发，以期望实现某种功能。策略，则是一连串的活动，保证达到某种效果。一般而言，策略抽象自需求。关注更高层面的抽象，为底层需求做好准备，DRY（Do Not Repeat Yourself）。
抽象的，且能简单直接反应业务需求的，才是好需求。
另外，做好需求的文档化。需求文档化，不是说要去交付它；而是说，将其作为开发过程的记录。这种方式，能较为清晰的记录，软件开发过程中的 Eureka 高光。这些点子，兴许是下个需求来源，或是创新的突破口。
为什么项目会失败 查理·芒格说过：如果知道，我会死在哪里，那我就永远不会去那里。
一般而言，项目失败有两个因素导致。一个是：功能的不断膨胀。也许一开始，只是添加了一个小功能，最后却成了臃肿的庞然大物。
另一方面，则是需求的变化。昨天需要的事物，在今天可能就没那么适用。
如何破解该难题：其核心便还是，持续的反馈。
项目进行时 项目难点的处理 项目中的直接阻碍，来源于项目本身需解决的问题。除了自然界的熵增，可自发的进行。逆熵行为，无一例外都会遇到困难。所以，问题并不可怕，特别是当你知道，如何处理时。
那么，如何处理项目中的难点呢？
第一，先检查约束条件。约束条件是指，项目的边界。诸如：时间、资源配给，期望的效果等。审视，项目一开始的条件，和当下条件的差异。时刻检查，条件是否发生了改变。
第二，反问自己。为什么需要解决这个问题，为什么你需要解决这个问题。问题的收益和付出，在不同层面，是都成正比的吗？如果是边界的问题，你能消除边界吗？最后，再问问自己，类似的问题，其解决方案是什么。
处理难题过程中，值得推荐的是：新建一个文档，记录思考和开发的过程。现实生活中，不同于考试做题，没有明确的对与错。记录开发过程，有助于养成主动思考的习惯。
用户共建，敏捷开发 在项目进行时，很重要的一点是：不能脱离用户，而是和用户共建。与直接的用户，形成良好的互动关系。不断提问，不断澄清。决策、实施、演示、反馈。
传统的工作模式，是瀑布流式的工作方式。一切都规划好，然后按部就班实施。瀑布流的好处是，能看到一个大的愿景。但其坏处，也很明显：不够灵活，容易需求延期、特性膨胀。
敏捷方式，则克服了瀑布流的缺点。整个是一个三步走流程。首先，评估当前的处境。然后，朝着预期的方向，做一次最小化的改进。最后，明确事情的边界，让事情先运转起来。敏捷也有其缺点：变更频繁；难以全局最优，常常陷入局部最优。
最后，在项目进行时，不要一个人埋头进去代码。参加代码评审等活动，了解和学习别人的代码优点，也能让自己的代码更鲁棒。同时，也别忘了，遇到问题，求助他人，也是一个解决问题的中上之道。
项目交付 项目的最终目标 项目交付，不是一锤子买卖。这项活动，是类服务业：其最终目的，是解决用户的需求，让用户愉悦。
要记住，用户需求的并不是代码，而是代码逻辑后的解决方案。
所以，过程可能并非那么重要。如何挖掘用户的期望，让用户满意，才更为重要。
以终为始，挖掘期望 如何挖掘期望，不如看看《高效能人士的七个习惯》之二——以终为始。让我们从项目结束的角度，思考和评判如何叫做成功。
一旦我们记住了从期望出发，项目交付就会容易很多。以期望出发，需要确保项目中的每个人都清楚该期望。在做决策时，也尽量选择靠近该期望的路径。根据现有期望，去分析用户的需求。如果有更好的方案，能满足用户期望，则大胆的提出需求变更。最后，随着项目的进行，不断地审视期望。
在项目交付时，签上你的名字。程序创造是一门艺术，留下签名，不仅是责任，同样也是自豪感的体现。
团队建设 以上活动，离不开团队。一个好的的团队，会让事情做起来事半功倍。如何打造优秀团队，使其成为项目的牢固支撑，也是项目推进的重要一环。
优秀团队的定义 首先看，优秀团队的画像。对内，成员及时沟通。DRY 不做重复的工作。对外交流，团队成员是个性独特、心情愉悦的。外界听到的声音，是一致的。这要求团队氛围活跃，同时也要求项目文档清晰、准确、一致。且在会晤前进行了充分的准备。</description>
    </item>
    
  </channel>
</rss>
