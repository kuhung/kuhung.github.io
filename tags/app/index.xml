<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>app on 谷粒的博客</title>
    <link>https://kuhungio.me/tags/app/</link>
    <description>Recent content in app on 谷粒的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 13 Feb 2021 17:13:44 +0800</lastBuildDate><atom:link href="https://kuhungio.me/tags/app/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>从一款小游戏收获的三点思考</title>
      <link>https://kuhungio.me/2021/what-i-learned-from-little-game-xiao/</link>
      <pubDate>Sat, 13 Feb 2021 17:13:44 +0800</pubDate>
      
      <guid>https://kuhungio.me/2021/what-i-learned-from-little-game-xiao/</guid>
      <description>2月初，我上线了一款小游戏，整活小游戏——合成魈大人（移动端访问）。
这一过程，收到了很多反馈。
同时，也有如下三点思考：
善用营销 早交付 学会写标题 至于为什么是这三点，下面将按时间顺序，一一阐述。
前景提要 品牌与商业化观察 很久以前，小力就有一个想法：将自己的技术能力变现，至少是能变成流量。
在这个过程中，交付客户喜欢的东西，形成自己的名片📇。
这样做的目的：一方面是督促自己不断学习；另一方面也是在构建自己的品牌，争取更高的议价权。
为了实现这一目标，小力学习了很多经管类的资料。同时也在工作中，做一个善于观察的人。观察不同组织，做得好和不好的地方，以及背后的原因。在这个过程中，有一点让小力印象深刻，那就是：微创新的组合。
很多商业上的成功，不是来自于翻天覆地的改变，而是来自于已有项目之间的交叉组合。在利基市场，进一步细分客户群，获得利润；或是发掘完全崭新的市场，占得先机。——Nicolas Gu
几次尝试反响平平 在写代码上，最容易的微创新，那一定是前端跑不了了。其次，则是算法模型。但是后者有一个较大缺点：离普罗大众太远，且消耗计算资源。
基于此，小力一个非专业前端，也写了不少前端小项目。虽然这些都是魔改的，但确实能够交付用户面前。
这其中就包括：
毒鸡汤 点击🔗访问
原神放置小游戏 点击🔗访问
图像搜索（算法类项目，较为吃计算资源，上线一段时间后撤下）
但以上的结果，都反响平平，单个项目的 PV 不超过500。
吃瓜吃到手边 在某个天朗气清的一天，互联网上还在吃郑爽的大瓜，而后又冒出另一个生孩子的事情。吃瓜的事情，以小力的习惯，向来是不会过多关注的（当然，该谴责还是要谴责）。
没过几天，微博热搜由吃瓜变成了合成大西瓜。小力也理所当然，不为所动。直到整活小游戏——合成华中大，出现在朋友圈。
这游戏点进去一看，没啥难度啊，活脱脱一个2048翻版。几天不到，就出现如此多版本，互联网上一定有源码。
一个念头出现在小力脑海中：合成，合成点儿别的东西？顺着组合创新的思维，在垂直细分领域，为何不能合成《原神》游戏中的角色——魈？答案是肯定的。
开发构建 资源整合 说干就干，先去GitHub搜索源码，很容易的，排名靠前的好几个。定睛一看，整体就是一个前端静态页面，服务器资源消耗也不大。
唯一的难点，就在于素材的全面替换。这个不太容易，需要解决两个问题：
有哪些素材，素材的引用路径是怎么样的。 小力不会美术，不会画图，替换的素材从哪里来。 第一个问题，通过前端调试，很快解决。有图片、交互UI、音频以及引流的变现链接。
第二个问题，素材可以直接互联网抠图。最直接的，米游社原神板块和淘宝旗舰店。
大概周六一下午的时间，以上内容基本缕清。又花了一晚上的时间，最重要的素材通过截屏、powerpoint 工具、画图工具，剪裁完毕。
第二天一早，项目借鉴之前个人网站的方式，通过 GitHub 静态部署完毕。部署过程，加入了百度和谷歌的数据埋点，用来监控PV、UV以及访问来源等信息。
潜在风险迭代 周日的中午，项目已经和最终版基本无差，在交付种子用户体验后，收集到了正向的反馈。但是，小力觉得还应该做得更好。于是替换掉了项目中的引流链接，删除了循环玩法流程。
在调试过程中，小力发现，资源加载缓慢，平均首次加载耗时超过2分钟，部分时间甚至出现卡顿。根据亚马逊的实验报告，网站每多加载100ms，将损失巨量的成交。小游戏也是，根据微信的报告，小游戏的加载过程，将会影响至少一半的潜在玩家。总而言之，加载的延迟问题很大。
要解决这个问题，有多种方法。其一，压缩素材。其二，换自建服务器。这些，都是技术人员正常的想法。不过，这里忽略了一个最重要的事情，就是客户：客户关心这个问题吗？后续的结果证明，延迟的负面影响没有预想的大。
又是一个下午的时间，小力尝试压缩图片质量，通过 tinypng 缩小了图片资源到原来的1/4。而加载问题，始终有概率在98%处卡住。这个现象，有两个原因：一个是资源所处位置 GitHub 本身的不稳定性；第二个是，前端代码里对进度条进行了调整，98%时，实际加载的资源只有50%🐶。
交付与反馈收集 当天晚上，小力在米游社发帖，开始曝光自己的游戏。当晚的浏览量在200上下，第一次收到玩家的反馈。其中，正向的居多。而反应加载不出来的，十条大概只有一条。给这个比例加上“沉默螺旋”加成，也就是那些受阻的玩家会直接关闭而不是反馈，估计约有2成玩家受阻。这一数量，在可接受范围。
第二天，周一的中午，小力在NGA发帖，曝光自己的游戏。
随即，浏览量“暴增”，顶峰半小时 UV 在800以上。
后面几天，流量趋于平稳。累计的PV在13000以上，UV在7000+。这个数据单独看没什么概念，但要知道，小力个人网站2020年的 UV 是2890，PV 是3690。而小游戏，不到一天就超过了这个数。
随后，小利在外网 Reddit 社区，也发出了帖子，进行游戏曝光，同样收到正面反馈。
两天后，小力计划采用视频曝光方式。计划延期未交付。
再两天，小力观察到米游社有一个首页推荐贴，合成史莱姆。获得了合成魈的十倍曝光。观察下来有如下特点：
标题符合社区文化，吸引人去点击 素材更改并不多，甚至有些粗糙，交互逻辑沿用的第一版 但是，它获得了更好的流量。</description>
    </item>
    
    <item>
      <title>自制以图搜图引擎，居家学习必备</title>
      <link>https://kuhungio.me/2020/simple-image-search/</link>
      <pubDate>Mon, 13 Apr 2020 21:17:08 +0800</pubDate>
      
      <guid>https://kuhungio.me/2020/simple-image-search/</guid>
      <description>最近宅在家，消遣时间之际，总会遇到一个让我困扰的事情。比如随手刷到的一个GIF，总想找到它的原片。
各位绅士可别想歪，我说的是动漫。
这个问题本质是一个相似度的检索问题。
说到视频找视频，其实可以分解为以图搜图。以图搜图这项技术，已经十分成熟，且已产品化。尤其在主流搜索引擎，很难找到一个不能搜图的引擎。连淘宝都有自己的时尚搜图功能。
但是当你满怀期待上传一张图时，你会发现，他返回的结果要么是同风格作品，要么是图片的描述。摔，我不是让你做抽象阅读理解哇。
这样的现象，实际是个性化需求与规模化需求的矛盾。对于公司，能规模化的，成本越低；定制带来存储成本，远高于能带来的回报。
这样的问题难不倒我们广大的人民群众，如果没有现成的，那我们就造一个。
以图搜图，可以理解为图像的检索，图像和其它信息一样，是可以被索引，被检索的。
于是乎，可以将整个工程抽象为3个部分。
图像预处理 图像特征表征 图像检索 图像预处理，一般是尺寸、色调的调整、以及去除明显的噪声。
索引建立有很多种方法，其核心是构造图像的特征表征。
这里先用简单的，构建一个 MVP（最小可行性产品），就采用谷歌的 MobileNet 啦。
该模型尺寸仅数十M，放在服务器或是部署到手机移动端，完全绰绰有余。（实不相瞒，其实一开始上的VGG16，但是模型太大了，服务器放不下。）
最后，图像检索，当一张新图来到时，对其进行特征提取，然后去索引库中查询，返回特征表征最近的 TopN，一个简单的以图搜图就完成了。
迫不及待想尝试了，但是发现一个大问题，咱们的索引图从哪儿来？总不能凭空捏造噻。
嗯，这也不是什么大问题，之前浏览某P开头，哦不对是G开头的学习网站，发现了知乎问题的爬虫。
这可是个好东西，恰好知乎时间线上，总有一个问题干扰学习——#什么样的腿才叫好看的腿#
就拿这个问题为例，将图片在离线创建索引，随后通过服务端部署。（服务端部署也可以讲一集，但不在这里，别挡住我看腿。）
当当当，随着周末两天的操作，舍弃了俺在的 pubg mobile 战友，谷粒粒的第一个搜图app上线咯。喜大普奔。
让我们赶紧试试，
嗯，还不错
再来一张，
原图秒匹配好吗，还给配上了类似风格的照片。
到这里，咱们的以图搜图小应用，就算开发上线完毕啦。
学习效率上升N个档次有没有⬆
链接地址：以图搜图之#什么样的腿才叫好看的腿# http://img-search.kuhungio.cn/
相关文章：
谷粒：机器学习模型部署&amp;ndash;打通前后端任督二脉
谷粒：机器学习落地需攻破的9个难题
声明：该应用仅供学习，禁止用于其它用途。</description>
    </item>
    
    <item>
      <title>机器学习系统设计 Machine learning system design</title>
      <link>https://kuhungio.me/2019/machine_learning_system_design/</link>
      <pubDate>Sun, 01 Dec 2019 18:26:43 +0800</pubDate>
      
      <guid>https://kuhungio.me/2019/machine_learning_system_design/</guid>
      <description>导读 Web app：https://kuhungio.me/machine-learning-systems-design/
机器学习系统设计 系统设计题，顾名思义，就是考察一个人设计系统的能力。它是一种国外很喜欢的题型，特别是中高级职位，在算法手撕结束后，一般就是系统设计题。
国外的算法工程师，被称之为 Machine Learning Engineer。国内的名头比较多，算法工程师、数据挖掘工程师、机器学习工程师、深度学习工程师都指的这个。
这一岗位同开发岗位，SDE 一样，也需要足够的系统设计经验。
国外的大佬 github.com/chiphuyen 总结了一份机器学习设计的资料，我在这里做本地化整理，同时增加一些自己的从业体会。
内容分为3个部分，分别是：
机器学习的系统设计部分，这里做了核心概念的摘录；
系统设计的案例，由于众所周知的原因，很多文章看不了，我这里将其整理放入了 github，同时笔记标注版的放在了公众号：谷粒说数。
练习部分，作者列了27道系统设计题。我这里将其布置在了网页上，方便自查，后续会上评论进行答案收集。
系统设计应关注的点 系统设计题，如果没有完整的方案也没关系，主要看表现的思想，着重从以下三个方面考察：
项目有哪些约束条件，哪些能做，哪些不能做。
方案的利弊，选择方案时，思考方案利弊的过程。
主要的功能，最后达成什么样的效果。
系统设计往往很难，这是因为两方面的原因。1. 缺乏有效的评估手段。2. 问题往往模棱两可。面试中的理想候选人应该是这样子的：1. 能够有效的拆解问题，将复杂问题简单化。2. 能够区分该场景是否需要机器学习方案。第二点很重要，因为在当下，受媒体大环境影响，很多人会选择无脑上机器学习，殊不知某些场景简单的方法更有效。
Machine learning methods change every year, solving problems stays the same.
生产环境不同于学术环境 学术研究的一般有以下两个特点：
想法设法比上一代模型效果更好，而不用思考怎么落地使用它。 由于效果是第一要务，所以算力没有限制，加钱堆机器即可。 而生产环境不同，它的特点如下：
效果并非越好才好 算力资源常常有限 作为开发者，要始终牢记生产环境是我们的目标。
需着重关注的4类问题 如何采集数据、如何处理数据。
怎么选择的模型、为什么。
如何评估你的模型。
如果再来一次，哪些地方会做得不一样。
设计机器学习系统 系统设计方面，作者将其分为了4个层次，我这里也按她的逻辑进行。 项目准备 项目准备阶段，一般从三个角度思考。如同写程序一样，首先思考需要达成什么样的目标；其次是有哪些限制条件；最后是特殊例子的考虑。
展开来讲，需要达成什么样的目标：即最后用户怎么使用你的系统，你的系统吞吐多块、响应多快。
项目的限制条件包括：项目周期多长，有多少算力，需要何种能力，有哪些可用资源。
特殊例子即：是否需要结合用户做特殊化处理，例如千人千面。
最后，如同老师设计考试一样，需要考虑如何评估你的系统性能。
数据流 Machine learning is driven more by data than by algorithms</description>
    </item>
    
    <item>
      <title>机器学习建模与部署--以垃圾消息识别为例</title>
      <link>https://kuhungio.me/2019/flask_vue_ml/</link>
      <pubDate>Sat, 20 Apr 2019 14:31:26 +0800</pubDate>
      
      <guid>https://kuhungio.me/2019/flask_vue_ml/</guid>
      <description>前言 学历与定位 近日在某论坛，有网友提问道：搞机器学习是不是要博士或是硕士学历，是不是要求很高，顶会论文？本科生或者更低学历的，是不是就没有机会了？从最近公司的招聘来看，算法工程师的 bar 确实有在提高。但在某些事业部，仍需要很大的人力来做落地场景。每个人都要找准自己的定位，公司也有它的部门定位。
如果是发论文、要在学术界站稳脚跟，给投资人“我们很重视最新技术”的信心，那博士确实很重要。另一个角度，从实用角度来说，研究生和本科生可能性价比更高。当然，作为一个本科就业的人，如果没有较为丰富的实战经验；有机会的话，还是拿到硕士及更高学历比较好。这里的实战经验就比如：搭建一个完整的、涉及算法模型、后端及前端的系统。
模型算法的实用主义 机器学习的实用主义，不是在论文多少，而是用正确的方法去解决正确的问题。而作为背后的工程师，除了调参、除了写 sql，做调包侠、做 sql boy、报表 boy 以外，在之前的文章也提到过，要学会做正确的展示，做全套的工程化实施。毕竟，等排期很难受；有些情况前后端资源不够，或者优先级很低，那就需要自己动手了。以下以上面的垃圾邮件分类为例子，说明该如何搭建一个前后端完整的机器学习系统。
这里将本次的任务拆解，分为三个部分来讲。后端 flask、前端 Vue、ML 模型采用 flair，项目地址 kuhung/flask_vue_ML
后端 flask 相关依赖的安装 pip install -r requirements.txt
核心函数 导入函数包 from flask import Flask, jsonify, request from flask_cors import CORS # 做跨域的准备 from flask import session # 追踪客户端会话 from flair.models import TextClassifier # 模型导入，采用前不久开源的 flair 做文本分类 from flair.data import Sentence 准备工作 app = Flask(__name__) # 声明准备 app.secret_key = &amp;#34;super_secret_key&amp;#34; CORS(app) classifier = TextClassifier.</description>
    </item>
    
    <item>
      <title>GPT2 模型生成假正经文稿 Slack gpt2 Bot </title>
      <link>https://kuhungio.me/2019/slack-gpt2-bot/</link>
      <pubDate>Mon, 25 Mar 2019 22:36:06 +0800</pubDate>
      
      <guid>https://kuhungio.me/2019/slack-gpt2-bot/</guid>
      <description>slack app：slack workspace
记得在校的时候，冰岩作坊做过一个app，讲接龙故事的。类似于我写一段，另一个人写接下来的一段，最后凑成一个完整的故事。当时，可产生了不少有意思的段子。最近，GPT2 模型的发布，让人不禁想到，有没有可能让机器来完成这个任务呢？机器写十四行诗、机器写莎士比亚风格的文章，机器写对联，这些都已经成为了现实。人工智能虽然没有带来突飞猛进的质变，但着实催生了很多有意思的小玩意儿。对于GPT2，一个字概括来说就是：壕——数据量大，算力能够 cover 住。这套算法模型网罗了几乎现有的所有文本数据，成功“过拟合“地屠榜，刷新多个 NLP 任务榜单排行。作者为了预防滥用模型、同时让别的研究者能够有个初步地认识，开源了一个小一些地模型。该模型的能力之一，就是我们今天的主题：接着别人地话写故事。今天我们要通过算法来实现。
虽然作者有在尽力简化复现难度，但对于很多不是这行的人，让他去敲命令行来走完整个流程，还是困难重重。能够将深奥的原理讲给普通人听，并且简单易懂，是一项科学传播的必备能力。做为技术向的工程师，在产品处于雏形阶段时，能够通过一个 MVP 最小价值产品，实现核心功能，也是一项大大的加分项。对于今天的任务，我们选取容易上手，接口丰富的 slack 作为我们的前端交互窗口。
如何构建一个 MVP 产品；或者具体的来讲，在我们的这个任务中，如何将数据挖掘工程师的模型成果，转化为可落地、可感知的产品或服务呢。操起斧子直接开干，依葫芦画瓢撸个前后端出来吗？这，其实是很多技术人员的一个误区——认为什么都可以从技术层面解决，”少废话别bb，bb is cheap，show me the code“。但从一个商业产品或服务商的角度来看，客户与渠道是前台，我们的客户是谁、如何触达客户以及选用何种渠道维系客户，是一个一开始就要考虑的事情。
以这个 GPT2 bot 为例，我希望的客户是对 GPT感兴趣，但又没基础去折腾的学生或是其他领域的人士，抑或是没时间去跑 demo 的专业同行。如何触达客户：你看的这篇文章的平台，就是我的触达媒介。我最后选择用 slack 交付我的服务，而不是 qq 或 微信，是因为他成本更低，虽然阻挡了部分潜在客户，但权衡后是可以接受的。最后的工作才是依葫芦画瓢，照撸一个出来。本文参照了EdwardHuCS,并在其基础上做了部分改动。
虽然这波 AI 热潮，让很多像我这样的非科班得以上车。但在实际生产环境中，我们还是暴露了诸多问题。其中之一，便是工程能力薄弱。会写 SQL 、会手推算法、会调包，但是就是不会写能跑的整个小系统。在业务变化快的公司中，这可能不是一个好事情。你的模型也许还在细调参数，但突然整个业务就没了。如果你能拿出一个能跑的马儿，兴许能影响这个业务。这就是前面提到的加分项。
言归正传，我们回到在slack上面。我们的核心就以下代码：
核心代码解读 导入一些基础配置
import os import time import re from slackclient import SlackClient import sys from gpt2.src import generate_unconditional_samples # instantiate Slackk client slack_client = SlackClient(&amp;#39;&amp;#39;) # 认证口令 # starterbot&amp;#39;s user ID in Slack: value is ssigned after the bot starts up starterbot_id = None 延迟配置以及样例和匹配模式</description>
    </item>
    
    <item>
      <title>产品实践之应用沉淀</title>
      <link>https://kuhungio.me/1970/web_deploy/</link>
      <pubDate>Thu, 01 Jan 1970 23:44:32 +0800</pubDate>
      
      <guid>https://kuhungio.me/1970/web_deploy/</guid>
      <description> 项目地址 简介 相关资料 参考 以图搜图 上传图片，检索图库内容，返回最相似图片 自制以图搜图引擎 matsui528/sis Flask补充系列–将应用部署在Heroku上 spam 文本检测 输入英文文本，检测是否为垃圾营销内容 机器学习建模与部署&amp;ndash;以垃圾消息识别为例 kuhung/flask_vue_MLsingle-page-apps-with-vue-js-and-flask-deployment 机器学习系统设计测试题 高级软件工程师需要掌握系统设计，高级机器学习从业者同样如此 机器学习系统设计原则 10个机器学习系统设计案例chiphuyen/machine-learning-systems-design </description>
    </item>
    
  </channel>
</rss>
