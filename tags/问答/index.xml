<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>问答 on 谷粒的博客</title>
    <link>https://kuhung.me/tags/%E9%97%AE%E7%AD%94/</link>
    <description>Recent content in 问答 on 谷粒的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 01 Dec 2019 18:26:43 +0800</lastBuildDate><atom:link href="https://kuhung.me/tags/%E9%97%AE%E7%AD%94/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>机器学习系统设计 Machine learning system design</title>
      <link>https://kuhung.me/2019/machine_learning_system_design/</link>
      <pubDate>Sun, 01 Dec 2019 18:26:43 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/machine_learning_system_design/</guid>
      <description>导读 Web app：https://kuhungio.me/machine-learning-systems-design/
机器学习系统设计 系统设计题，顾名思义，就是考察一个人设计系统的能力。它是一种国外很喜欢的题型，特别是中高级职位，在算法手撕结束后，一般就是系统设计题。
国外的算法工程师，被称之为 Machine Learning Engineer。国内的名头比较多，算法工程师、数据挖掘工程师、机器学习工程师、深度学习工程师都指的这个。
这一岗位同开发岗位，SDE 一样，也需要足够的系统设计经验。
国外的大佬 github.com/chiphuyen 总结了一份机器学习设计的资料，我在这里做本地化整理，同时增加一些自己的从业体会。
内容分为3个部分，分别是：
机器学习的系统设计部分，这里做了核心概念的摘录；
系统设计的案例，由于众所周知的原因，很多文章看不了，我这里将其整理放入了 github，同时笔记标注版的放在了公众号：谷粒说数。
练习部分，作者列了27道系统设计题。我这里将其布置在了网页上，方便自查，后续会上评论进行答案收集。
系统设计应关注的点 系统设计题，如果没有完整的方案也没关系，主要看表现的思想，着重从以下三个方面考察：
项目有哪些约束条件，哪些能做，哪些不能做。
方案的利弊，选择方案时，思考方案利弊的过程。
主要的功能，最后达成什么样的效果。
系统设计往往很难，这是因为两方面的原因。1. 缺乏有效的评估手段。2. 问题往往模棱两可。面试中的理想候选人应该是这样子的：1. 能够有效的拆解问题，将复杂问题简单化。2. 能够区分该场景是否需要机器学习方案。第二点很重要，因为在当下，受媒体大环境影响，很多人会选择无脑上机器学习，殊不知某些场景简单的方法更有效。
Machine learning methods change every year, solving problems stays the same.
生产环境不同于学术环境 学术研究的一般有以下两个特点：
想法设法比上一代模型效果更好，而不用思考怎么落地使用它。 由于效果是第一要务，所以算力没有限制，加钱堆机器即可。 而生产环境不同，它的特点如下：
效果并非越好才好 算力资源常常有限 作为开发者，要始终牢记生产环境是我们的目标。
需着重关注的4类问题 如何采集数据、如何处理数据。
怎么选择的模型、为什么。
如何评估你的模型。
如果再来一次，哪些地方会做得不一样。
设计机器学习系统 系统设计方面，作者将其分为了4个层次，我这里也按她的逻辑进行。 项目准备 项目准备阶段，一般从三个角度思考。如同写程序一样，首先思考需要达成什么样的目标；其次是有哪些限制条件；最后是特殊例子的考虑。
展开来讲，需要达成什么样的目标：即最后用户怎么使用你的系统，你的系统吞吐多块、响应多快。
项目的限制条件包括：项目周期多长，有多少算力，需要何种能力，有哪些可用资源。
特殊例子即：是否需要结合用户做特殊化处理，例如千人千面。
最后，如同老师设计考试一样，需要考虑如何评估你的系统性能。
数据流 Machine learning is driven more by data than by algorithms</description>
    </item>
    
  </channel>
</rss>
