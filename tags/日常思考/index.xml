<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>日常思考 on 谷粒的博客</title>
    <link>https://kuhungio.me/tags/%E6%97%A5%E5%B8%B8%E6%80%9D%E8%80%83/</link>
    <description>Recent content in 日常思考 on 谷粒的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 10 Oct 2021 23:11:13 +0800</lastBuildDate><atom:link href="https://kuhungio.me/tags/%E6%97%A5%E5%B8%B8%E6%80%9D%E8%80%83/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>增长黑客概要</title>
      <link>https://kuhungio.me/2021/growth-hacking-01/</link>
      <pubDate>Sun, 10 Oct 2021 23:11:13 +0800</pubDate>
      
      <guid>https://kuhungio.me/2021/growth-hacking-01/</guid>
      <description>诸多科技公司都热衷的增长黑客是什么 增长，自古以来是一个永恒的话题。宇宙在膨胀、国家经济在增长、数不胜数的公司也在这片土地上扩张。可以说，没有一个带自主意识的东西，是不在扩张边界的。即使是在零和博弈中，一方的衰减也伴随着另一方的增长。
增长黑客这个词，也是最近网络上的一个热词。同人工智能、数据算法一样，很多新兴高科技公司，都想通过这种模式，实现快速的跨越式的增长。实际情况到底是怎么样的，如何做好增长，今天我们就来缕一缕思路。
由于我本身工作就和数据相关，且和数据中的用户相关，因此会添加更多数据、算法的模型角度观点。从一个数据挖掘工程师的角度，来看待增长这么回事。
 增长没有银弹 首先要明白，增长黑客这个做法不是银弹。没有说我搞了这一套东西，组建团队，引进了增长黑客相关的人员，就能够实现跨越式的增长。增长和数据驱动本身并不冲突，甚至是一件东西的不同角度侧写。只有当你明白这个东西的期望上限时，你才会明白瓶颈在哪里，以及这个瓶颈是否是目前制约你的因素。
那什么是增长的基础前提呢？我认为有两个方面，一个是有一个至少能用的产品，有忠实的拥簇。不至于说咱们的产品还没搞出来，就指望着搭建增长团队了。第二个，是企业能有数据驱动的文化，有谦虚和平和的工作氛围，允许犯错。这是为了保证增长业务在跨部门时，能不受限于各个部门间的藩篱。
从我个人的经验来说，市面上不缺能用、好用的产品，缺的是具备增长条件的公司文化氛围。在类似361系的文化中，KPI制胜，已经严重制约了用事实数据驱动增长的工作模式发挥作用。因为粉饰数据就能够获得好的回报，你去较真，往往吃力不讨好。没有人愿意去试错，你失败了就得接受最低绩效走人。没有人愿意说真话，也没有人愿意接受其他人的合作。所以，如果你在类似的独裁式的公司，应当先考虑的不是增长，而是如何保证业务不衰败。
 开启增长循环 很幸运的是，我也看到很多公司具备上述两个条件。好的产品+谦逊合作的公司文化。那么，我们就该步入正题，谈谈如何做好增长这个过程。增长的预期效果，如果要用一句话概括，那么就该是：通过数据，找到高效的获客方式，更快激活用户、让用户体验到产品的aha时刻且形成习惯，灵活适应客户的需求变更，让用户成为产品的口碑传播者。这么一套下来，增长是自然而然的事情了。
通过对于用户生命周期的分析，我们可以将其分为以下四个阶段。获客、激活、留存以及变现。在不同的阶段，我们有不同的关注重心。总体而言，我们关心的是：什么渠道的客户，是如何体验到产品的aha时刻的。即渠道和产品的匹配以及用户和产品的匹配。
获客阶段，我们的目标是优化成本，扩大规模。因此我们希望能够找到最高ROI的渠道，在现有渠道不断迭代素材，优化转化率。从产品设计角度而言，适当引入病毒传播元素，让用户分享产品的体验必不可少。对于社交类产品，网络效益的挖掘也十分重要。更多的用户带来更好的产品体验，即网络效益。
激活阶段，我们的目标是让用户真正使用你的产品，体验到“让人眼前一亮”的功能。关注每个环节的转化漏斗，明确产品的aha时刻，让新用户尽可能快地体验到aha时刻。这个阶段，我们关注特定用户群面临的障碍，通过用户研究等方式，获得玩家真实想法。总体而言，这个阶段的杠杆最大，也是最值得花精力的。
留存阶段，我们的目标是唤醒并留住用户，确保用户的真正活跃。我们希望产品已经成为用户生活的一部分，且用户真正从产品（服务）中获得满足感。应当明白的是，留住用户的是产品质量，是因为我们提供的产品或服务，能够持续满足用户需求，或让他们感受到愉悦。在这一阶段，我们常常关注触发物的设计，通过合理设计触发物，使用户形成习惯。
变现阶段，我们的目标是提高每位用户的收益。当然，也有一种说法是，只要你做好产品，收入自然会尾随其后。变现值得关注，但它绝非关注的重点。优化变现，常常通过漏斗图的方式，去关注每个环节的摩擦。除此之外，合理的定价，也能给产品带来可观的收入。
总结 当谈起增长的停滞，我们总是会发现各种各样的原因。有的公司是取得主导地位后心态膨胀，不再关注自己的核心产品或服务，转而扩张到其他业务。有的是过度依赖某些渠道，直到渠道变化，被掐断流量。也有的是公司文化建设不善，人才流失严重。其实，最最常见的是，公司疏于检测用户的满意度，忽视了用户的早期不满情况。
除开外部市场变化，竞争对手的创新我们无法控制，以上的种种，我们都有措施规避。时刻保持警惕，要明白增长永无止境。深入理解用户体验aha时刻的路径，不断去理解和优化这一过程。发掘新渠道，引入新视角，都可以避免上述问题。
当然，从我个人的视角而言，最最重要的还是：保持谦逊，对用户心怀敬意，对增长的目标永远坚定。
 参考资料
 《增长黑客》   关于作者</description>
    </item>
    
    <item>
      <title>日常冲突的解决之道</title>
      <link>https://kuhungio.me/2021/confrontation-01/</link>
      <pubDate>Mon, 13 Sep 2021 09:03:51 +0800</pubDate>
      
      <guid>https://kuhungio.me/2021/confrontation-01/</guid>
      <description>冲突管理三步骤 “不在沉默中爆发，就在沉默中灭亡。”这句话原本是周树人用来描绘旧中国反动派统治下的场景，但今天的很多场景也很适用。在人类社会中，由于各种理念的差异、资源的不均，冲突从来没有停止过。面对冲突，我们最常见的要么是沉默、要么就是爆发。
改善冲突管理技巧，对于我们的生活将大有裨益。首先，冲突很多时候是因为他人不符合自己的预期，提高冲突处理技巧能鼓舞他人对事情负责。其次，有效的冲突处理，能够给他人带来信任感，让他人更加信任你。最后，在职业生涯中，管理得当的冲突，能够给组织结构带来可预见性。
今天，我们就冲突这个话题，展开讲讲如何处理它。分为冲突之前、冲突进行中以及冲突的后管理。以下的思路框架来源于《关键冲突》，看完全文且感兴趣的同学，可以去阅读原著。
冲突之前 看到一个不合预期的情况，很多人的第一反应，大概就是直接冲上去了吧。这个反应很正常，但今天起，你应该稍微停下来，思考下：这真的是个问题吗？这个观念和《你的灯亮着吗》如出一辙。强调的是：不是所有问题都真的需要解决，也不是所有问题都需要你解决。
目标和意义 具体怎么做，首先要明白事情的目标和意义。冲突是第一次出现，那么请关注冲突的内容，不要轻易上升程度。冲突再次出现，则应关注模式。是不是什么流程出了问题？冲突多次出现，则应该关注下你和冲突方的关系了。同时审视自己，是在不该沉默的时候，选择了沉默吗？
梳理头绪 冲突面前，最应该克制的便是情绪化。情绪是一头猛兽，会干扰你的判断。如果还有第三方介入，则这个第三方可以通过操控情绪，影响你的判断。所以，请先克制住上头的感觉，克制先入为主的观念。从人、社会 以及组织的角度，综合分析影响的源头。逐步还原真相。
冲突进行时 面对冲突，首先要做到不去妄下定义。而是通过描述现状的模式，向对方询问问题的来龙去脉。
明确冲突的来源，是动机不够、还是能力不够。不同的原因有不同的应对措施。
制造动机 当对方缺少动机时，要做的是给予对方做这件事的动机。可以通过正反两种未来场景的描述，到达目的。说明目前的错误行为，对于各方的负面影响。预测正确行为将给到其他人的积极结果。最后，明确目标、责任人以及时间节点。定期检查结果。
简化问题 除了动机，能力也会影响一个人做某事的态度。你让我一个拧螺丝的去造火箭，那我即使想完成，也很难胜任不是。所以，在缺乏能力时，应尽量帮助对方简化问题。通过提问的方式，和对方一同探寻问题的根本原因。适当的，引导去关注潜在的影响因素。当能力得到匹配之后，再检查动机是否具备。
随机应变 进展不可能一帆风顺，多少你会遇到意料之外的事情。当对方感觉不安全时，先跳出话题，营造一种安全的感觉。语焉不详时，抓住这个点澄清事实。当插入突发话题时，标记好之前的话题进度，稍后回到原议题。当对方情绪化时，引导对方关注事实的经过，减少情绪化对判断的影响。
冲突之后 最后别忘了，冲突解决了不等于问题解决了。明确执行计划并跟踪进展，是善始善终的重要一环。明确何人、何时、何地做何事。明确每个人的责任和工作内容。和对方一同确定检查的时间节奏。
总结 面对冲突，核心还是在于沟通。当然，沟通也是需要技巧。以一个平等、尊重的视角，梳理冲突的经过。对差异的来源进行诊断，从能力和动机两个维度，激励他人。最后，定期检查，时刻回顾。这就是冲突处理的核心技巧。</description>
    </item>
    
    <item>
      <title>软件开发的高杠杆活动</title>
      <link>https://kuhungio.me/2021/the-effective-engineer-01/</link>
      <pubDate>Mon, 09 Aug 2021 09:12:06 +0800</pubDate>
      
      <guid>https://kuhungio.me/2021/the-effective-engineer-01/</guid>
      <description>软件开发的正确思维，聚焦高杠杆活动 作为技术序列的工程师，我时常在想，什么样的角色将会是我五年、十年后所扮演的。目前来说，工作三年有余，在某些公司内，已经可以算是高级甚至是资深工程师。不过，对于我来说，赋予title起的作用，并没有做成一件事兴奋。我时常在好奇，别的工程师的工作方法和我一样吗？我目前的工作方法是最优的了吗？
带着这样的疑问，也关注了硅谷大厂程序员的一些博客，同时也阅读了一些软件开发的经典之作，例如《人月神话》、《大教堂与旧集市》、《程序员修炼之道》等。这些内容都是很好的基础，为我软件开发的职业道路，树立了基本的职业价值观。不过今天，要推荐另外一本书《The Effective Engineer》。本书目前还没有中文版本，作者经历过硅谷的大小厂，Google、Quip、Quora等，从他的角度，总结了一些很有道理的内容。
该书的核心，聚焦在一个杠杆二字。所有活动的目的，都是最大化杠杆的效果。这点和的之前讲的财富38条法则不谋而合。在上次的法则中，同样强调了杠杆的效用。而软件开发领域，本身就是一个高杠杆活动。你开发的软件，可以只供团队内数十人使用，也可以供数以亿计的用户使用。
该系列整体分为三条，咱们逐一拆解。
软件开发的正确思维 聚焦高杠杆活动 作者认为，软件开发的核心：不是用了多么炫酷时髦的技术，不是你懂的技术别人不懂（技术垄断），而是解决业务问题。只是恰巧，工程师的角色定位，让我们能够借助软件程序解决问题。
在这个过程中，去聚焦高杠杆活动，充分发挥软件程序的优势。用杠杆率去衡量自身的产出，有计划地增加杠杆的效率。
例如：有没有方法更快完成项目？有没有方法让项目的作用更大？如果不做这个项目，有没有其他杠杆率更高的项目？
优化学习 这里的核心观点在于，学习是存在复利效应的。无论外界如何变化，一定要掌握自己的学习节奏。寻找能够提供成长的环境，结合工作中的其他人的能力，提升自己的能力。除了工作内容，工作外的技能也应有所精进。
更迭优先级 我们都知道，事情可以根据四象限法则，分为重要紧急、重要不紧急、不重要紧急、不重要不紧急。最后一个能不做就不做，倒数第二个能晚做就晚做。前面两个优先做，重点做。
在这一环节，聚焦能够直接产生价值的地方。如果担心被打扰，则可以设置一个番茄闹钟，以减少场景切换的可能。为了减缓拖延，可通过自我目标设定，自我陈述的方式：”如果，就“来有序安排工作。
在执行上下功夫 投资迭代 在软件开发领域，有一个著名的MVP理论，即最小可行性原型。该方法除了快速验证假设外，也起到快速迭代的作用。迭代越快，我们能学到的就越多。熟练掌握工作，多在迭代上下功夫。
测量指标 没有测量，就没有改进。这是著名管理学理论。在软件开发领域也是如此。当然，衡量程序员的产出，不是靠代码行数或者bug数，而是其实际的产出价值。这也要求我们谨慎地选择衡量指标。理解数字，诚实看待数字。
尽早验证想法 一如前面的MVP原则，我们尽早验证想法，通过迭代减少浪费。如果有必要，我们还可以通过A/B测试，来检验实际效果。
项目评估技巧 大部分时间，我们也会面临项目周期评估的问题。作者建议，在排期中设立回旋余地。拆分项目，设置合理的里程碑。优先处理高风险的事项，能一定程度保证项目如期交付。如果延期不可避免，则也应该对延期时间有个合理的评估。
构建长期价值 实用与质量的平衡 多快好省赶紧上，这种思想也会出现在软件开发领域。这本身与快速迭代并不矛盾，但要注意平衡好开发周期与质量的矛盾。CodeReview、自动化测试，能够一定程度减少出错概率。项目发展过程中的技术债，要得到有效管理。不可一味堆叠需求而忽视技术基建。
减少维护成本 在项目上线的维护过程中，也需要留意维护的成本。开发代码过程中，将错误有效暴露。同时进行链路上的故障演习，合理安排兜底策略，将有效减少维护成本。
投资团队成长 从长远来看，每个人都不可能单兵作战取得巨大的成功，我们需要团队。投资团队成长方面，首先是帮助其他人成功。这可以通过分享自己的经验，写下高质量的文档实现。也可通过CodeReview实现。另一方面，招聘是团队内每个人的责任。招聘高质量的同事，在入职培训和指导方面下功夫，也将获得极大的回报。
小结 以上，是该书的基本框架。总体读下来，对于我还是收益颇多。后续一周，我们将展开讲讲每个环节，结合我自身的工作经历，给读者朋友提供更核心、易懂的理念。
关于作者</description>
    </item>
    
  </channel>
</rss>
