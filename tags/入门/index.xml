<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>入门 on 谷粒的博客</title>
    <link>https://kuhung.me/tags/%E5%85%A5%E9%97%A8/</link>
    <description>Recent content in 入门 on 谷粒的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 11 Mar 2025 15:38:38 +0800</lastBuildDate><atom:link href="https://kuhung.me/tags/%E5%85%A5%E9%97%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Numerai量化101</title>
      <link>https://kuhung.me/2025/numerai-guide/</link>
      <pubDate>Tue, 11 Mar 2025 15:38:38 +0800</pubDate>
      
      <guid>https://kuhung.me/2025/numerai-guide/</guid>
      <description>一、Numerai 平台介绍 Numerai 是一家坐标美国的对冲基金。据团队2025年2月向美国证券交易委员会（SEC) 披露的信息显示：截至20241231：
持仓规模为3.6亿美元（现金部分未披露）
基金持仓头寸数为389支
为什么要关注它，是因为它的噱头集成实在是太多了：机器学习+加密货币+对冲基金。它有自己的量化比赛平台，并且有自己发币：NMR。在比赛平台上，参赛者需要构建模型预测金融市场走势，并提交自己的预测结果/模型。平台再根据参赛者的质押金额，对模型预测结果做集成，以此来指导投资。
在该平台上，截至20250312：平台上的活跃参与者（有提交并且质押本金）用户有490位，模型数为3851个。质押55万枚NMR，约合440万美元。平均每位用户质押约9千美元，质押中位数为8百美元。年回报率约为46%。
由于增加了质押和回报计算部分，相较于一般量化比赛会稍显复杂。本文将在评价指标和回报计算方面，做着重介绍。此外还将给出一个初步的执行流程，以及作者的实盘线上反馈。
评价指标：如何评判和分配收益 数据情况：数据分布&amp;amp;数据生成机制 模型构建：如何构建基本模型 线上反馈：提交后的数据情况和可能的改进方向 如果读者对于量化的基本知识还不甚了解，可参考作者的思维导图：谷粒的博客 思维导图｜《量化交易》
二、评估指标参考 核心指标与回报计算 一句话概括：既关注模型的预测效果，也关注模型的额外信息增益。预测效果：关注的是模型对于特定标的未来20天的预测相关性，使用相关系数计算。额外信息增益：关注单个模型对于最后的加权模型预测的贡献度，越独特越准确越好。
另外，平台增加了本金的概念：你需要对自己的模型下注，下注的标的物便是NMR，平台发行的加密货币。
最后的收益计算如下：payout = stake * clip(payout_factor * (corr * 0.5 + mmc * 2), -0.05, 0.05)
其中：payout指平台支付给你的回报，stake是下注的本金。clip的作用是限制最大最小范围到0.05上下。其中corr和mmc是需要重点关注的指标。平台希望提交的模型关注相关性，更关心模型的额外贡献情况。
相关系数 (CORR) 相关系数衡量预测值与实际目标值之间的相关性。
import numpy as np from scipy import stats def numerai_corr(preds, target): &amp;#34;&amp;#34;&amp;#34; 计算转换后的预测值和目标值之间的皮尔逊相关系数 Args: preds: 预测值 target: 目标值 Returns: float: 相关系数 &amp;#34;&amp;#34;&amp;#34; # 对预测值进行排名和高斯化 ranked_preds = (preds.rank(method=&amp;#34;average&amp;#34;).values - 0.5) / preds.count() gauss_ranked_preds = stats.</description>
    </item>
    
  </channel>
</rss>
