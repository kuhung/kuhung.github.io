<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>radar on 谷粒的博客</title>
    <link>https://kuhung.me/tags/radar/</link>
    <description>Recent content in radar on 谷粒的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 01 Jan 2024 13:13:53 +0800</lastBuildDate><atom:link href="https://kuhung.me/tags/radar/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2023年度总结</title>
      <link>https://kuhung.me/2024/radar-in-2024/</link>
      <pubDate>Mon, 01 Jan 2024 13:13:53 +0800</pubDate>
      
      <guid>https://kuhung.me/2024/radar-in-2024/</guid>
      <description>灵感来源是 thoughtwork 总结的半年度雷达报告，展现不同语⾔、技术、⼯具等⽅⾯的进展。radar 本身反映了⼀种理念，那就是察觉。察觉当下的流行要素，预判未来的发展变化。这⾥进行借鉴，呈现我关于技术、阅读、理财的一些观察，同时也有一些根据个人经历的想法。这些用于交流，也用于记录。
一、技术 采纳 机器学习开发流程
构建并维护⼀套稳定、可复⽤的流程，⽤于快速构建机器学习模型。现在市⾯上也有很多稳定的服务，但是⼤多专攻某些特定⽅向。⽐如wandb实验记录或者dvc数据版本控制之类。就个人⽽⾔，更多是整合不同⼯具，形成⾃⼰的建模⻛格。
雷达技术
是本系列的灵感来源。起初是thoughtwork总结的半年度雷达报告，展现不同语⾔、技术、⼯具等⽅⾯的进展，这⾥借鉴到此板块。radar本身反应了⼀种理念，那就是察觉。察觉当下的流程，察觉未来的发展变化。背后的技术并不复杂，但是总结、归纳、呈现的这种形式很令人着迷。
实验 mljar-supervised
属于automl⾃动机器学习，能很好应⽤于tabular数据。之前在某竞赛中测试，能够取得较好(top10%)效果。对于参加⽐赛，或者是构建⾼标准baseline很有帮助。集成特征选择、shap解释等⼯具。未具备数据探索、模型服务等功能。数据探索和模型卡之类功能，还需要搭配deepcheck一类⼯具实现。这类⼯具的⽬的是形成统⼀流程，减少在不同环节切换带来的时间/经历损耗，同时也能对技术栈查漏补缺。
数据可视化
探索性数据分析的一部分，数据可视化可以加快数据的理解，发现数字中难以发现的信息。这部分算是对于机器学习流程的扩展，⽬前流⾏的⼯具包括ydata、dataprep、dtale等。就可视化来说，没有最好，只有最适合。想清楚关注的指标，然后尽量减少重复性动作。
强化学习
是对抗机器⼈（⽐如下围棋的AlphaZero）以及⼤语⾔模型（LLM）的基础，但还未出现银弹式的统⼀框架。一些典型代表有Stable-Baselines3、SpinningUp等。就我个⼈⽽⾔，还没有充⾜的理由和完善的环境给到我来实验，因此暂时处理评估了解阶段。但可以预见的是该领域的进步，将会带来显著性的效益。
streamlit
streamlit是⼀个简单易⽤的web框架，使得机器学习⼯程师很⽅便地交付模型demo。⽬前已经被snowflake收购。其开源版本已经满⾜⽇常需要。其背后反映的是⼀种趋势，即机器学习⼯程师如何快捷交付印象深刻的产品/demo。
评估 transformers.js
属于on-device机器学习范畴，特点是在⽤户端进⾏模型推理。移动化、⼩型化是⼀种趋势，这种趋势对于数据中⼼或者英伟达这类⼚商的影响是负⾯的。但是对于⽤户来所，未必是坏事。如果能够在⽤户侧实现模型的推理，那么数据⼜何必传回服务器。该技术短期⾯临性能、模型传输的问题，⻓期会有模型知识产权保护的问题。
Stable-diffusion
当下最⽕图像⽣成技术，⼤致原理就是从噪声中重建原始图。按道理图像能重建，其他的容错性比较高的东西，比如音频也能。这个领域的两个新兴⽅向是合成识别以及合成对抗。⽬前处理尝试阶段，尝试整合或者产⽣新的稳定交付流。
AI agents
LLM已经够流⾏了，这⾥关注更多的是它的应⽤。通过⼤语⾔模型，如何与外部交互，实现各种操作。典型代表是Openai的GPTs。
暂缓 因果推断
因果推断是前⼏年⾮常⽕的⽅向，但是实际应⽤⾮常有限。⼀⽅⾯是这类技术的解释成本较⾼，另⼀⽅⾯则是这类技术⽬前来看并没有⾮它不可。学习和扩展思维⻆度是⾮常值得的，但就应⽤来说，还是更适合放在暂缓观察板块。
二、阅读 采纳 《合作的进化》
关于合作的经典之作，解答了在⼈际关系中，何时该选择合作、何时该选择不合作。书中提出四个原则：不嫉妒（保证善意），不率先背叛，⼀报还⼀报（不做烂好⼈、也不做坏⼈），适当遗忘（保证不限于局部恶化）。同时指出合作的发⽣，不是靠短期的利益让步或是信任，⽽是对未来重复互动的预期。推荐⼩游戏：https://dccxi.com/trust/
《精英的傲慢》
精英总是认为目前的成功是他应得的，这在作者的公开课上，也能从部分哈佛学子身上感受出来。这种理所应当，正在加重人们之间的割裂，让一部分人自傲、一部分人懊恼。保持谦逊，跳出绩优体系去思考，对不那么成功的人心有亏欠，是一种美德。
《The Squiggly Career》
职业起伏职场并⾮⼀帆⻛顺。这⼀观点看起来简单明了，但想明⽩却着实不易。在职场中，你会遇到起起伏伏，这些都是很正常的。不必为了起，就得意忘形。落，⽽妄⾃菲薄。重视⻓远事项、可迁移技能以及⼈的联结，控制能控制的，接纳不能左右的。
实验 《凤凰项⽬》
尽早交付，减少半成品。构建并维护⼀个有良性互动的团队氛围，是团队提⾼胜率的关键。类似的还有《独⻆兽项⽬》等书籍，此类书的共同点在于指明技术团队在公司发展中该有的位置，以及技术领导该做的事情。这类知识很少出现在课本、公司内部⽂档中，是不错的补充学习机会。
《The Mom Test》
作为工程师，良好的沟通技巧对成功至关重要。《The Mom Test》提供了关键技能和原则，帮助我们提出深刻的问题、避免误导性数据，推动承诺和进展。
《同理倾听》
评判一件事总是比倾听并理解一件事容易。同理倾听，是我在近几年的协作互动中，最大的收获之一。同理倾听，帮助加深与周围人的联系，帮助促成改变。
《技术为径》
在技术领域，管理也是一个技术概念。它的学习曲线特别陡峭。尤其是没有足够的工具、手册或是框架来帮助你。在这本书中，作者 Camille Fournier（从技术管理干到CTO），带你走过从工程师到技术管理的每一步。从指导实习生到和资深同事工作，你将获得各种可执行的建议。关注这个系列，学着如何成为一个更好的管理者和领导者。
《算法的⼒量》
算法是我们的⼯具，但是它将如何影响我们的⽣活，影响我们的观点，影响我们的情绪以及意识倾向，这本书给出了回答。作为技术⼈员，未来的⽣活将在很⼤程度上取决于当代技术⼈员如何对待和处理他们的⼯作。
评估 《独裁者⼿册》
该书讲述了如何成为一个成功的独裁者，以及从另一个角度解释了：为什么有些欠发达地区的转型未能成功。小集团、候选集集团以及掌权者，他们之前的互动，决定了如何成为好的统治者。就如同书中所言：坏行为几乎总是好政治。 政治本身，并非为了所谓的共同福祉，尽管它常宣称如此。
《组织社会学⼗讲》
认识组织，⼀本写在2003年，但在今⽇仍然适⽤的书籍。组织会越来越像，这是基于社会期望的结果。以及很多组织所谓的成功经验，尺度拉长基本没啥用。所以我们还应该对组织抱有期望吗，这次会不一样吗？
暂缓 无
三、理财 采纳 意外之财的态度
对于奖金或者是意外之财，不少人会倾向于一次性消费、或者是等比例放大消费。这是常见的xx阶级陷阱，在如今的消费主义社会，更加难以坚守。从某种角度讲，我更信奉储蓄，不放大现有的消费节奏。或者可以偶尔消费，更多是投入到那些生产力工具上（自我麻痹）。
复利优先</description>
    </item>
    
  </channel>
</rss>
