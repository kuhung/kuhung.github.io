<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 谷粒的博客</title>
    <link>https://kuhung.me/posts/</link>
    <description>Recent content in Posts on 谷粒的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 20 Jul 2025 10:20:04 +0800</lastBuildDate><atom:link href="https://kuhung.me/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>谷粒粒的提示词工程行动指南</title>
      <link>https://kuhung.me/2025/prompt-guide/</link>
      <pubDate>Sun, 20 Jul 2025 10:20:04 +0800</pubDate>
      
      <guid>https://kuhung.me/2025/prompt-guide/</guid>
      <description>提示词工程的演变与重要性 自从22年以来，提示词已经经过多轮的迭代，发展出了更系统的方法论。在初期，各路网上的提示词，还更多是角色扮演，偏向C端用户。大家也相信，凭借 LLM 基座大模型的进步，提示词会逐渐退出舞台。然而一坤年（两年半）过去了，期待的基座模型大进步并未出现——提示词仍然决定了 LLM 应用的质量；也决定了用户交互时，能多大程度得到自己想要的答案。因此，再探提示词是有必要。无论是个人使用，还是构建 LLM 应用，都需要掌握其基本原理和目前的最佳实践。
提示词技巧与人类沟通的共通性 产品设计本身也是人类社会规则设计的一个抽象。从宏观来说，提示词技巧和人类社会的一些常见共识重合度很高。例如：清晰阐明你的诉求、明确角色职责、分阶段分解任务、重复诉求以防止遗忘、约定清晰的输出结构、提供样例进行模仿、引导输出内容、要有事实数据支撑、设计指标反复迭代。这些技巧，在与人沟通、协作、领导、教练的时候，是非常重要的。靠意识同步的三体人，其 AI 的形态必与我们的不同。只要人类社会还是当前的结构形态，当下这些工作就还有意义。
提示词的分类 提示词，我们从配置方来说，分为三类。分别是系统提示词，由 LLM 提供商预设在模型 API 接口下，定义模型的行为准则。例如：反黄暴之类的。这一般是第一条注入的提示词。角色提示词，这个提示词是开放给用户配置的，比如配置为“你是一个大模型专家”。最后就是常见的用户交互提示词，用户输入的内容也算提示词。在此基础上，又根据用户和场景，派生出例如：指令提示词，指定输出xx字这种；上下文提示词，交代上下文说过啥；样本提示词，按照给的样式来；CoT 提示词，好好想想，逐步思考，等若干提示词种类。
主流大模型提供商的提示词建议 话归正题，笔者参考了 Anthropic、Google 以及 OpenAI 的提示词构建文档，力求从第一手信息源出来，结合自身的使用经验，给到当下最好的解决方案。这其中也离不开各类 LLM 支持构建的 deep reasearch 工具，这个过程才会变得更丝滑、效率更高。但由于人脑的带宽毕竟有限，错误和纰漏在所难免，读者朋友如有发现，欢迎指出。
Antropic 的提示词建议 以 Anthropic 为例，他们在训练过程中使用了大量的 XML 的结构化语料，因此类似的结构化提示词在他家的模型上会表现得很好。另外也强调清晰和直接的重要性。即清晰表达你的需求，可量化的提出你的诉求。而不是丢一个模棱两可的问题，然后反复沟通。但其实这部份也是需要的，这里更多是指大规模应用的时候，系统预设提示词，减少用户和下文的困惑度，这在软件系统中很重要。而且模型本身就是概率模型，它的结果是不确定的，那么反复沟通其实就有必要。
因为 LLM 的本质是预测下一个 token 是啥，所以可以通过预设这个开头来保证它会做出预期内的事情。比如想要输出 JSON，那么就以{开头。这一技术也被用在 deepseek 的 think 推理里面，通过预先提示来让模型进行 reason 推理。另一方面，由于模型的被奖励尽可能多的输出下一个 token，所以当遇到负面提示时：比如不要干啥，模型可能会产生意料之外的变化。因此，Anthropic 家的文档建议出更多的正面提示词：应该做什么，而不是不应该做什么，借此来减少不可控性。
Google 的提示词建议 而 Google 来说，对于他们的 Gemini 模型，则建议提供一个清晰可供参考的样本。这点在笔者做仓满量化相关的产出时，深有体会。只需要在开始和模型磨合，得到想要的代码模版或者是 doc 模版，后续只需要提供这个模版，即使是 Gemini-flash 模型，也能高效完成代码的编写工作。除此之外，谷歌文档中也给出了更高级的方式。例如 Step back 思考。先抽象，再解决问题。CoT 思维链也是一种方式，通过提示词注入“一步步思考”的方式，让模型的输出更具可解释性。
当然，还有像多次运行取平均值这种机器学习上的常用技巧（自洽性）。不过话说回来，这种方法对于成本控制和延迟响应要求蛮高。而在 agent 大行其道的当下，ReAct 也是一个重点。即推理和工具反馈相结合，用反馈来修正模型的表现。不过这些技术会显著增加 token 的消耗，需要在实践中取舍平衡。</description>
    </item>
    
    <item>
      <title>所谓上下文工程，实质为Agent系统设计</title>
      <link>https://kuhung.me/2025/context-engineering/</link>
      <pubDate>Mon, 07 Jul 2025 11:52:01 +0800</pubDate>
      
      <guid>https://kuhung.me/2025/context-engineering/</guid>
      <description>原文作者 DAIR.AI Academy 中文翻译 gemini &amp;amp; kuhung 备注评论 kuhung 什么是上下文工程？ 几年前，许多人，甚至是顶尖的AI研究人员，都声称提示工程（prompt engineering）将不复存在。（注：当时的语境是说：当大模型足够强，人类就不需要写那些提示词。）
显然，他们错了。事实上，提示工程现在比以往任何时候都更加重要。它的重要性如此之高，以至于现在被重新命名为上下文工程 (context engineering)。
是的，又是一个花哨的术语（注：不就是从单点的提示词描述，扩大范围到上下游的整个流程嘛）。被用来描述调整指令和相关上下文这一重要过程，以便让大语言模型（LLM）有效执行其任务。
关于上下文工程已经有很多文章（Ankur Goyal、Walden Yan、Tobi Lutke 和 Andrej Karpathy），但我想写下对这个主题的看法，并向读者展示一个在开发 ai agent workflow 时将上下文工程付诸实践的步骤指南。
我不太确定是谁创造了&amp;quot;上下文工程&amp;quot;这个词，但我们将基于 Dex Horthy 的这张图来展开，它简要地解释了上下文工程是什么。（注：当然是热衷写 guide 的推特流量弄潮儿）
我喜欢&amp;quot;上下文工程&amp;quot;这个术语（注：那为啥不叫 ai agent system design），因为它感觉更广泛（注：因为它流量更好），能更好地解释提示工程中包含的大部分工作以及其他相关任务。
许多人认为提示词工程不算工程，是因为很多人将其与&amp;quot;和chatgpt对话时的简短任务描述&amp;quot;相混淆。在该过程中，你只是在向系统提问。而在提示工程中，你必须更仔细地考虑提示的上下文和结构。也许它一开始就应该被称为上下文工程。（注：嗯，之前的故事讲不下去了，大家都知道是啥，我得重新定义一个方便我卖课）
上下文工程是下一个阶段，你需要构建完整的上下文，这在许多情况下需要的不仅仅是越简单的提示，而是更严谨的方法来获取、增强和优化系统的知识。
从开发人员的角度来看，上下文工程涉及一个迭代的过程，通过优化你提供给大语言模型的指令和上下文，从而达到预期的结果（注：意思就是，想获得好的效果的一切方式，都可以统称为上下文工程）。这包括采用正式的流程（例如，评估流水线）来衡量你的策略是否有效。
鉴于AI领域的快速发展，我建议对上下文工程下一个更广泛的定义：设计和优化指令及相关上下文，以便大语言模型和高级AI模型有效执行其任务的过程。 这不仅包括基于文本的大语言模型，还包括为日益普及的多模态模型优化上下文。这可以涵盖所有的提示工程工作以及相关流程，例如：
设计和管理提示链（如果适用） 调整指令/系统提示 管理提示的动态元素（例如，用户输入、日期/时间等） 搜索和准备相关知识（即 RAG） 查询增强 工具定义和指令（在 agent 系统中） 准备和优化少样本示范（few-shot demonstrations） 结构化输入和输出（例如，分隔符、JSON 模式） 短期记忆（即管理状态/历史上下文）和长期记忆（例如，从向量存储中检索相关知识） 以及许多其他用于优化大语言模型系统提示以实现所需任务的技巧。 （注：中间部分其实就是提示词工程需要考虑的事情，前后实际上是系统设计需要考虑的事情）
换句话说，你在上下文工程中在做的就是：优化你在大语言模型上下文窗口中提供的信息。其意味着过滤掉嘈杂的信息（注：这里又没有分类器，实质上是通过规则限定信息的分布），这本身就是一门科学（注：实际上是个体力活，科学显得更牛逼。潜台词就是科学的才是更好的）。因为它需要系统地衡量大语言模型的性能（注：嗯，衡量=科学）。
每个人都在写关于上下文工程的文章，但在这里，我们将通过一个具体的例子，带你了解在构建AI agent 时上下文工程是什么样的。
上下文工程实践 来看一个我最近为个人使用而构建的 multi-agent deep research 应用。</description>
    </item>
    
    <item>
      <title>差生文具多｜工具篇：JLPT考前冲刺，日本语文法碎片化学习</title>
      <link>https://kuhung.me/2025/jlpt-push/</link>
      <pubDate>Thu, 12 Jun 2025 11:43:34 +0800</pubDate>
      
      <guid>https://kuhung.me/2025/jlpt-push/</guid>
      <description>7月的JLPT考试临近，语法复习得怎么样了，还真难说。hero3046看了几遍，金龟子哥哥看了多少，心理还是没底呀。与其沉迷于碎片化信息，不如让碎片化知识打断自己。
本期差生文具多｜工具篇系列，博主手搓一份 JLPT 推送项目，用碎片化（知识）挑战碎片化（信息）。
特点：随机抓取一条JLPT考试语法点，推送到手机端。帮助用户利用碎片化时间学习和复习 JLPT 语法。
项目仓库：https://github.com/kuhung/jlpt-push
关于作者</description>
    </item>
    
    <item>
      <title>“硅基奇谈”播客、视频生成工作流，借助notebooklm、whisper与three.js</title>
      <link>https://kuhung.me/2025/content-sop/</link>
      <pubDate>Thu, 05 Jun 2025 19:15:55 +0800</pubDate>
      
      <guid>https://kuhung.me/2025/content-sop/</guid>
      <description>有没有想过，将偶然看到的一段材料、抑或是采集到的一段音频生成对谈形式的播客，通过对谈的形式，来了解这个话题要不要深入。这听起来就很兴奋不是。这个场景，刚好命中了现代人的FOMO（Fear of missing out）害怕错过的心理情绪。
当下的很多AI产品思路都是如此，但做得好的不多。谷歌出品的NotebookLM是产品中的代表。最近新火起来的AI自媒体主播也是如此。通过信息过滤压缩，再配以“有趣”的对谈或是快节奏的音乐和视频剪辑，就实现了一次对用户大脑的安抚。
作者在整个五月，利用NotebookLM以及相关工具，创作出了23段播客节目，并为这个系列节目命名为“硅基奇谈”。这些节目发布到小宇宙、抖音、B站、视频号、油管等平台，为作者带来了近百粉丝。本期内容，作者就跟大家分享：这些内容是如何生产出来的，将会为我们带来什么样的机遇，以及如何避免常见错误。
NotebookLM 介绍 NotebookLM并不是一个新产品，它最早推出在2023年。不过最近的几次迭代，让它有了很多可玩性。最最重要的，是增加了中文语音。在早期，主要还是英文对谈。这个产品可以将用户上传的pdf文件、各种资料、链接，生成摘要汇总。再通过思维导图、播客等形式，实现内容的二级汇总输出。
目前该产品的体验独一档，虽然有非常多的同类追赶者，但谷歌Gemini的模型加持下，外加播客本身的提示词做的很好，出来的播客内容很自然。感兴趣的朋友，可以直接来我的播客链接体验看看：https://namecard.xiaoyuzhoufm.com/xd4lk 。 没有小宇宙的朋友，也可以在常用音乐软件上搜索：硅基奇谈。
当然，它也有自身的缺点。第一个大缺点就是对CN地区不开放。第二个缺点是播客的中文读音，部分读音有问题，估计是训练语料的问题。第二个问题，可以静待PlayDiffusion这类修音技术的完善，实现DIY 修音。
第三个大问题，就是它只做到了音频这一步，并未涉及到视频这一更大的消费市场。不过也能想到，播客在欧美的普及程度远高于国内，先拿下这个市场。视频的生成，无论是技术还是资源消耗，目前都存在瓶颈。就这点上，作者做了个曲线救国方法：通过音频的可视化，生成视频“代餐”。这样就多了N个视频平台传播机会。
资料前期准备 整个流程中，资料的准备是重中之重。在初期，作者选择用自己熟悉的内容。选取了在更早时期，阅读积攒下的关于技术职场的内容、以及在4月所做的AI陪伴硬件访谈，作为素材。
整体来说，资料的多样化越高越好、越贴近生活越好。反之的代表则是一些PR稿件，看起来说了很多东西，实际上过完AI，信息锐减。即使现在有了大模型的协助，在茫茫资料中找到真正信息密度高的内容，也并非一件容易事。
更多情况下，是信息爆炸。每天的信息流中，每个小窗口都是一个可能的信息资料。这里作者采用的方法是分层、保护当前的工作流。很多东西都想做，不代表每件事都值得做。有趣但是时间资源不足的内容，将会把它放在下一期的内容池中。以此来保护工作流，减少半成品，提高交付效率。
资料准备就讲究一个从自身出发：自身要感兴趣，受众才会也感兴趣。如果自身都没兴致，那么批量生产出来的，只会是垃圾内容。除开这点，做好内容的短中期储备也很关键，能够保证内容持续生产。将浮夸、无实物表演的内容去掉，并放置在内容池中，既能保证素材不断，又能保证当下工作流不被打断。
资料的处理 一般而言，PDF的资料相对友好，可以直接上传平台。但是部分场合下，也会遇到其他格式的内容。比如音频、或者Epub格式的电子资料。音频可以直接上传让谷歌解析，也可以采用本地whisper。实践表明，本地的whisper效果会更胜一筹。当然，两者目前都无法做到区分说话人。（whisper可以，但需要额外的一些处理）。
whisper-ctranslate2 voice.mp3 --model medium --language zh 至于Epub，作者采用的如下工具：
pandoc mybook.epub -o mybook.pdf --pdf-engine=xelatex -V CJKmainfont=&amp;#34;PingFang SC&amp;#34; 补充个题外话，如果是PDF需要转成文字，强烈推荐markItdown。非常方便就能将一份PDF转换成可编辑的markdown，而后者是大模型较为通用的输入输出格式。
markitdown document.pdf &amp;gt; document.md 以上均为命令行脚本，实测好用。
音频生成 在使用播客生成功能的时候，也有技巧可循。NotebookLM很多时候生成的内容比较生硬直白，尽管谷歌已经有过优化，但是钩子的设计力度还是偏低。为此，作者也测试了几组。形成了下面的提示词：
整体设计目标：要让用户有获得感，包括但不限于生产力提升、掌握最新内容、快速上手、想要动手尝试等，面向的受众是偏向技术的人群，但是又要保证能够在普罗大众中获得传播。 开篇要有自我介绍，外加引子，激发听众兴趣。 开篇要有：欢迎来到谷粒粒的节目《硅基奇谈》！在这里，我们以对谈的形式，探索和解读世界。 接着要有一个对话大纲，简单扼要说明有哪几个部分。 结束需要钩子，促成受众行动。 结束要有：感谢和我们一起讨论上述话题，也请留下你的观点。如果内容有帮助，欢迎点赞收藏。更多精彩内容，还请关注我们的账号。下期我们接着聊。 内容中，不要提及“你”、“报告”等词。让整个对话，更像是一个专家对话，而不是照本宣科。其他的敏感内容或者类似PR的内容，也应该模糊处理。 内容中，应该关注更多的技术细节和关键词，忽略掉那些出于公关目的、浮夸的、不切实际的外行人幻想的内容。整体要求务实，必要时提出批判性问题，而不是全盘接受资料中的内容。 完成以上设计后，将内容中的最精彩内容，放在最开头重复一遍，用于吸引用户在信息流中停留，导入我们的内容。要求尽可能简短，能够吊起受众的兴趣。 这样的好处是第一能够在开篇生成钩子，吸引用户的注意力，正如我在文章开头做的一样。其次是在前半部分形成重复，用户会对这个品牌形成印象。最后是总结提问。当然，其中也有一些关于结构化思考和安全隐私的约束。
通过上述方法的调教处理，音频基本上可以拿来直接使用，用作播客的音源。
播客工作流 在发布播客的过程中，好的播客内容一般都会附带时点，也就几份几秒讲了什么内容。这部份内容非常适合whisper工具叠加大模型来做。whisper能够生成音频的带时间戳内容，时间戳内容再丢给大模型，基本上就OK了。
当然，因为下一步有视频字幕呈现给用户，所以前面加了一个字幕修正的任务，确保ASR模型出来的字是基本正确的。
利用下面的提示词减少幻听、空耳和前后不一致：
这是一份whisper语音转文字的内容，因为是ASR模型转的，所以存在一些问题。请帮助修正的同时，不改变原来的意思，使其能够作为字幕，让观众看到的和听到的一致。 * &amp;#34;请检查是否有明显的错别字，有标点则用空格替换。” * &amp;#34;检查字幕内容是否通顺，是否存在逻辑不连贯或难以理解的句子。&amp;#34; * &amp;#34;注意检查字幕中提到的专有名词、人名、地名、品牌名、技术术语是否准确无误且统一。&amp;#34; * &amp;#34;请留意是否有听起来像A但实际应该是B的词语’。&amp;#34; 做出上述修改 然后是播客的时点</description>
    </item>
    
    <item>
      <title>FastVLM iPhone 安装与实机测评</title>
      <link>https://kuhung.me/2025/fastvlm-iphone-install/</link>
      <pubDate>Sat, 24 May 2025 12:15:10 +0800</pubDate>
      
      <guid>https://kuhung.me/2025/fastvlm-iphone-install/</guid>
      <description>项目简介 FastVLM 是苹果发布的视觉语言模型，可以在iPhone和Mac上离线运行，能够理解图像内容并回答问题。所有预测都在设备本地处理，确保隐私和安全。项目地址：https://github.com/apple/ml-fastvlm
接下来说说实测最关心的性能表现和大小情况：
作者的测试设备为：
MBP M1Pro 16G运行内存 iPhone16Pro A18Pro 8G运行内存 模型版本 下载大小 TTFT（MBP） 内存占用 FastVLM 0.5B (fp16) 1.15G 400ms 2G FastVLM 1.5B (int8) 1.91G 600ms 2.8G FastVLM 7B (int4) 3.85G 1800ms 5G 注意：以上大小均为适配转换后，适用于Apple Silicon的模型。原始模型大小会有出入，实际按指令下载的大小即为表格所述。
作者测试下来，认为该技术是一个初步的技术原型。能够满足基本的视频理解，在终端跑起来仍然会有发热的问题。但瑕不掩瑜，未来在端侧，AI将会有更多的可能性。打包后，最小的安装包大小在2G左右。基本上每个模型都会把MBP的CPU温度干到85度以上，风扇直接到6000转以上。真没见过这么吵的MBP。iPhone16pro的情况也大差不多，能感受到明显的温度升高。不过手头没有测温装置，所以无法给到确切的数字。而在速度方面，基本如上图所示，能够在秒级别以内产出首个Token。iPhone再乘以2-3倍。当然，这个时间也取决于提示词、图片复杂度等其他因素。
对于未来展望部分：调用逻辑和交互上，适当的优化能够降低发热，提升用户体验。无论如何，AI新技术都需要整合到需求中，才会有更大的价值。
准备工作 系统要求 Mac电脑：macOS 15.2+ 并安装Xcode最新版本 iPhone设备：支持iOS 18.2+的设备（建议运行内存在3G以上，iPhone X 及以上） 开发者账号：普通Apple ID即可 项目特性 ✅ 支持iOS (18.2+) 和macOS (15.2+) ✅ 显示每次推理的首Token时间(TTFT) ✅ 完全离线运行，保护隐私安全 ✅ 灵活的提示系统，支持自定义prompt ✅ 三种不同规格的预训练模型 安装步骤 1. 下载源代码 git clone https://github.com/apple/ml-fastvlm.git cd ml-fastvlm 2.</description>
    </item>
    
    <item>
      <title>P人友好的高德（谷歌）地图 MCP</title>
      <link>https://kuhung.me/2025/amap-mcp/</link>
      <pubDate>Wed, 23 Apr 2025 14:37:35 +0800</pubDate>
      
      <guid>https://kuhung.me/2025/amap-mcp/</guid>
      <description>作为一个51%的J人，出门之前攻略是要做的，但是往往又是DDL驱动模式：不到最后不会做。在大语言模型的帮助下，攻略的生成比以往简单了很多。但是无法联网、充满幻觉的内容，又让人感到不安。不过最近一项工具的出现，使得攻略的心理成本下降非常多。本期主要介绍的是：接入地图信息的攻略生成工具：高德（谷歌）地图MCP。
生成的结果信息很丰富，信息的组织和呈现好了很多。如下：
MCP原理 简单来说，MCP是function call的统一定义。他不是什么新技术，而是对现有技术的统一规范。在此之前，我们要实现对LLM大语言模型的调用，主要靠通过直接传入API说明来实现。但这种方式最大的问题就是各家不统一，输出受制于编写人的提示词功底。过于碎片化和重复。
以往程序之间主要通过API交互。而MCP的出现，大大降低了组装不同程序之间的难度，使得通过文本描述执行特定功能成为可能。
以上内容对于非技术的朋友来说较为难理解，通俗来说就是：使用MCP可以方便的调用其他能力，类似于U盘：即插即用。目前，MCP在中文互联网的传播热度大过英文社群。已经有不少厂商开始适配MCP，以期增强自身在这波AI浪潮中的竞争力。其中的典型就是地图厂商。
目前三大地图厂商，高德、百度和腾讯都已经适配，但大部分公开教程还是以高德地图为主。以下也以高德地图出发，看看地图MCP能带来什么新体验。
高德MCP配置 本文的侧重点并非配置，所以会简单描述配置要点。着重强调配置后的体验和反馈，这部份内容在AI自媒体中较为少见。见多了太多“炸裂”、“全新体验”、“革命”，我们来点儿实际的。用起来到底怎么样，还有哪些不足，可以尝试从哪些方面改善。
主要的配置要求如下：
可以运行MCP的客户端，作者使用的是cursor。 申请获得高德地图或其他地图的开发者权限，获得密钥。 配置成功后，即可在cursor设置处见到我们的MCP sercers详情。接下来只需要通过聊天，即可调用地图MCP进行相关的信息获取。
使用反馈说明 在反复尝试过多次后，作者生产出了开头的旅行PDF。在这个过程中，也暴露出很多问题。
依赖提示词水平和上下文组织 境外出游需使用谷歌地图 需要模版减少不一致性 出行攻略，可以说是比软件开发复杂度低很多的一个场景。但他也面临和使用AI做软件开发类似的问题：幻觉、冗余生成、前后不一致。这需要使用者提供更多的上下文信息、更准确的提示词。比如：当作者未提及使用地图MCP时，有一定概率会不触发地图MCP调用。当未提及准确的出发和到达时间时，模型倾向于按自己的想法先把内容吐出来，而不是事先求证。
高德地图的接口，在处理境外事物时，基本无法使用。境外场景需要切换到类似谷歌地图的境外产品。所以，如果是境外旅行，需要额外配置谷歌地图。境内作者也做了测试，产出的信息比谷歌地图的丰富。这离不开官方亲自下场写MCP，暴露的功能很丰富。而现在作者使用的谷歌地图MCP，则是个人开发者开发，功能相对受限。
在不使用模版时，不同时候生成的文档差异性较大。使用模版后，关键信息例如：交通基本都会被捕捉并描述。
如果是作者来做这个产品，一般到生成Markdown文件基本都结束了。但是这对于团队出游来说，分享属性稍弱。在社交媒体上的传播属性也偏弱。地图MCP能被作者看到并有深入了解的想法，离不开更进一步的可视化和便携化。在生成一般意义的文档之后，再通过提示词模版转换成html，更进一步pdf，甚至更进一步的可交互应用。从场景出发，方便终端用户，并能从视觉上影响用户，是该产品能够破圈的一个关键。
作者带着这份攻略，真真切切去走了一番。得出的结论是：如果你是一个计划控，大语言模型加持的MCP可能不适合你。因为它给到的信息要么较模糊，要么受限于训练语料已经过时。但旅行中的意外，也是旅行的意义。综上：是一个P人友好的工具。
参考资料 五一出行神器来了！高德mcp server查天气+路线一步到位！ AI + 高德MCP旅行规划神器：10分钟搞定完美行程！ mcp-google-map google-maps 关于作者</description>
    </item>
    
    <item>
      <title>Numerai量化101</title>
      <link>https://kuhung.me/2025/numerai-guide/</link>
      <pubDate>Tue, 11 Mar 2025 15:38:38 +0800</pubDate>
      
      <guid>https://kuhung.me/2025/numerai-guide/</guid>
      <description>一、Numerai 平台介绍 Numerai 是一家坐标美国的对冲基金。据团队2025年2月向美国证券交易委员会（SEC) 披露的信息显示：截至20241231：
持仓规模为3.6亿美元（现金部分未披露）
基金持仓头寸数为389支
为什么要关注它，是因为它的噱头集成实在是太多了：机器学习+加密货币+对冲基金。它有自己的量化比赛平台，并且有自己发币：NMR。在比赛平台上，参赛者需要构建模型预测金融市场走势，并提交自己的预测结果/模型。平台再根据参赛者的质押金额，对模型预测结果做集成，以此来指导投资。
在该平台上，截至20250312：平台上的活跃参与者（有提交并且质押本金）用户有490位，模型数为3851个。质押55万枚NMR，约合440万美元。平均每位用户质押约9千美元，质押中位数为8百美元。年回报率约为46%。
由于增加了质押和回报计算部分，相较于一般量化比赛会稍显复杂。本文将在评价指标和回报计算方面，做着重介绍。此外还将给出一个初步的执行流程，以及作者的实盘线上反馈。
评价指标：如何评判和分配收益 数据情况：数据分布&amp;amp;数据生成机制 模型构建：如何构建基本模型 线上反馈：提交后的数据情况和可能的改进方向 如果读者对于量化的基本知识还不甚了解，可参考作者的思维导图：谷粒的博客 思维导图｜《量化交易》
二、评估指标参考 核心指标与回报计算 一句话概括：既关注模型的预测效果，也关注模型的额外信息增益。预测效果：关注的是模型对于特定标的未来20天的预测相关性，使用相关系数计算。额外信息增益：关注单个模型对于最后的加权模型预测的贡献度，越独特越准确越好。
另外，平台增加了本金的概念：你需要对自己的模型下注，下注的标的物便是NMR，平台发行的加密货币。
最后的收益计算如下：payout = stake * clip(payout_factor * (corr * 0.5 + mmc * 2), -0.05, 0.05)
其中：payout指平台支付给你的回报，stake是下注的本金。clip的作用是限制最大最小范围到0.05上下。其中corr和mmc是需要重点关注的指标。平台希望提交的模型关注相关性，更关心模型的额外贡献情况。
相关系数 (CORR) 相关系数衡量预测值与实际目标值之间的相关性。
import numpy as np from scipy import stats def numerai_corr(preds, target): &amp;#34;&amp;#34;&amp;#34; 计算转换后的预测值和目标值之间的皮尔逊相关系数 Args: preds: 预测值 target: 目标值 Returns: float: 相关系数 &amp;#34;&amp;#34;&amp;#34; # 对预测值进行排名和高斯化 ranked_preds = (preds.rank(method=&amp;#34;average&amp;#34;).values - 0.5) / preds.count() gauss_ranked_preds = stats.</description>
    </item>
    
    <item>
      <title>自己动手将米家接入Homekit，构建低成本智能家居系统</title>
      <link>https://kuhung.me/2025/iot-home/</link>
      <pubDate>Thu, 06 Feb 2025 13:06:59 +0800</pubDate>
      
      <guid>https://kuhung.me/2025/iot-home/</guid>
      <description>大概在三年前，作者通过树莓派+小米智能家居+苹果设备，实现了通过iPhone控制家庭智能设备的功能。通过苹果生态，即可实现若干智能化：根据所在位置，开关电器；通过Siri控制灯光亮度和开关等功能。外出时，再也不用担心家里哪个电器没关；回家前，还能提前打开空调；睡觉前也不用起来给每个房间单独按开关，直接Siri指令。这大大方便了用户。
因为使用的是小米的智能家居，相较于单纯的苹果生态，降低了智能家居的接入成本。以插座为例，HomeKit生态相关的产品需要几百元，而米家相关的产品仅需要数十元，即可实现类似效果。
当然，米家相关的配置并不是没有缺点。因为引入了更多的中转设施，其出故障的可能性会比单纯的HomeKit接入会更高。这不，近期HomeKit突然完全失联（后来确认是修改路由配置导致的连锁反应），于是借机重新走了一遍流程。刚好小米在一个月前，也发布了官方的插件，以支持跨平台的控制接入。我们来看看米家官方的插件到底如何。
以下，从树莓派开始讲起，着手构建通过家庭App即能控制的低成本智能家居系统。
涉及资源 硬件 树莓派4B（服务器，包含SD卡） 米家智能家居（各类实际硬件，包含多模网关） Apple homepod mini / Apple TV / iPad（Apple控制中枢） 软件 Raspbian 系统 Docker HACS（docker版本） xiaomi插件 配置过程 连接树莓派 对于一个全新的树莓派，我们需要初始化它，以便进行后续操作。参考以下信息：
# &amp;lt;https://ost.51cto.com/posts/4179&amp;gt; ## 创建账号，解决没有权限的问题 &amp;lt;https://www.cnblogs.com/melodicule/p/16212711.html&amp;gt; ## 连接ssh ssh pi@192.168.x.x password: xx ## 配置 sudo raspi-config #设置登录方式、屏幕 ## VNC 可视化界面 &amp;lt;https://www.jianshu.com/p/5e4d64c2ceaf&amp;gt; ## 查看温度 vcgencmd measure_temp ## 引脚信息 &amp;lt;http://www.raspigeek.com/index.php?c=read&amp;amp;id=126&amp;amp;page=1&amp;gt; 安装docker docker安装，需要留意源信息的变更。
curl -fsSL &amp;lt;https://get.docker.com&amp;gt; -o get-docker.sh sudo sh get-docker.sh --mirror Aliyun sudo docker version # 修改docker源与dns解析，留意是否失效ustc的源已失效 sudo tee /etc/docker/daemon.</description>
    </item>
    
    <item>
      <title>思维导图｜《创造：用非传统方式做有价值的事》</title>
      <link>https://kuhung.me/2024/build/</link>
      <pubDate>Sun, 21 Jul 2024 21:55:54 +0800</pubDate>
      
      <guid>https://kuhung.me/2024/build/</guid>
      <description>形成共识还是蛮好的，就是很多人不知道、不理解或者按自己的方式来搞，那才是组织的灾难。这本书老哥还是多了份alpha男的味道，不过总体还是有帮助。让我知道其实哪儿都会有斗争，都会有高光和滑铁卢。
关于作者</description>
    </item>
    
    <item>
      <title>技术领导｜05 managing a team 管理一个团队</title>
      <link>https://kuhung.me/2024/managing-a-team/</link>
      <pubDate>Wed, 10 Apr 2024 21:55:54 +0800</pubDate>
      
      <guid>https://kuhung.me/2024/managing-a-team/</guid>
      <description>本书已经由孙宇聪老师翻译，电子工业出版社出版。感兴趣的朋友可以直接去阅读中文版《技术为径》。在此不再重复造轮子。
下文是第五章，管理一个团队的思维导图，与诸位读者共勉。
🌟 合集地址：《The Manager&amp;rsquo;s Path》中文翻译
关于作者</description>
    </item>
    
    <item>
      <title>2023年度总结</title>
      <link>https://kuhung.me/2024/radar-in-2024/</link>
      <pubDate>Mon, 01 Jan 2024 13:13:53 +0800</pubDate>
      
      <guid>https://kuhung.me/2024/radar-in-2024/</guid>
      <description>灵感来源是 thoughtwork 总结的半年度雷达报告，展现不同语⾔、技术、⼯具等⽅⾯的进展。radar 本身反映了⼀种理念，那就是察觉。察觉当下的流行要素，预判未来的发展变化。这⾥进行借鉴，呈现我关于技术、阅读、理财的一些观察，同时也有一些根据个人经历的想法。这些用于交流，也用于记录。
一、技术 采纳 机器学习开发流程
构建并维护⼀套稳定、可复⽤的流程，⽤于快速构建机器学习模型。现在市⾯上也有很多稳定的服务，但是⼤多专攻某些特定⽅向。⽐如wandb实验记录或者dvc数据版本控制之类。就个人⽽⾔，更多是整合不同⼯具，形成⾃⼰的建模⻛格。
雷达技术
是本系列的灵感来源。起初是thoughtwork总结的半年度雷达报告，展现不同语⾔、技术、⼯具等⽅⾯的进展，这⾥借鉴到此板块。radar本身反应了⼀种理念，那就是察觉。察觉当下的流程，察觉未来的发展变化。背后的技术并不复杂，但是总结、归纳、呈现的这种形式很令人着迷。
实验 mljar-supervised
属于automl⾃动机器学习，能很好应⽤于tabular数据。之前在某竞赛中测试，能够取得较好(top10%)效果。对于参加⽐赛，或者是构建⾼标准baseline很有帮助。集成特征选择、shap解释等⼯具。未具备数据探索、模型服务等功能。数据探索和模型卡之类功能，还需要搭配deepcheck一类⼯具实现。这类⼯具的⽬的是形成统⼀流程，减少在不同环节切换带来的时间/经历损耗，同时也能对技术栈查漏补缺。
数据可视化
探索性数据分析的一部分，数据可视化可以加快数据的理解，发现数字中难以发现的信息。这部分算是对于机器学习流程的扩展，⽬前流⾏的⼯具包括ydata、dataprep、dtale等。就可视化来说，没有最好，只有最适合。想清楚关注的指标，然后尽量减少重复性动作。
强化学习
是对抗机器⼈（⽐如下围棋的AlphaZero）以及⼤语⾔模型（LLM）的基础，但还未出现银弹式的统⼀框架。一些典型代表有Stable-Baselines3、SpinningUp等。就我个⼈⽽⾔，还没有充⾜的理由和完善的环境给到我来实验，因此暂时处理评估了解阶段。但可以预见的是该领域的进步，将会带来显著性的效益。
streamlit
streamlit是⼀个简单易⽤的web框架，使得机器学习⼯程师很⽅便地交付模型demo。⽬前已经被snowflake收购。其开源版本已经满⾜⽇常需要。其背后反映的是⼀种趋势，即机器学习⼯程师如何快捷交付印象深刻的产品/demo。
评估 transformers.js
属于on-device机器学习范畴，特点是在⽤户端进⾏模型推理。移动化、⼩型化是⼀种趋势，这种趋势对于数据中⼼或者英伟达这类⼚商的影响是负⾯的。但是对于⽤户来所，未必是坏事。如果能够在⽤户侧实现模型的推理，那么数据⼜何必传回服务器。该技术短期⾯临性能、模型传输的问题，⻓期会有模型知识产权保护的问题。
Stable-diffusion
当下最⽕图像⽣成技术，⼤致原理就是从噪声中重建原始图。按道理图像能重建，其他的容错性比较高的东西，比如音频也能。这个领域的两个新兴⽅向是合成识别以及合成对抗。⽬前处理尝试阶段，尝试整合或者产⽣新的稳定交付流。
AI agents
LLM已经够流⾏了，这⾥关注更多的是它的应⽤。通过⼤语⾔模型，如何与外部交互，实现各种操作。典型代表是Openai的GPTs。
暂缓 因果推断
因果推断是前⼏年⾮常⽕的⽅向，但是实际应⽤⾮常有限。⼀⽅⾯是这类技术的解释成本较⾼，另⼀⽅⾯则是这类技术⽬前来看并没有⾮它不可。学习和扩展思维⻆度是⾮常值得的，但就应⽤来说，还是更适合放在暂缓观察板块。
二、阅读 采纳 《合作的进化》
关于合作的经典之作，解答了在⼈际关系中，何时该选择合作、何时该选择不合作。书中提出四个原则：不嫉妒（保证善意），不率先背叛，⼀报还⼀报（不做烂好⼈、也不做坏⼈），适当遗忘（保证不限于局部恶化）。同时指出合作的发⽣，不是靠短期的利益让步或是信任，⽽是对未来重复互动的预期。推荐⼩游戏：https://dccxi.com/trust/
《精英的傲慢》
精英总是认为目前的成功是他应得的，这在作者的公开课上，也能从部分哈佛学子身上感受出来。这种理所应当，正在加重人们之间的割裂，让一部分人自傲、一部分人懊恼。保持谦逊，跳出绩优体系去思考，对不那么成功的人心有亏欠，是一种美德。
《The Squiggly Career》
职业起伏职场并⾮⼀帆⻛顺。这⼀观点看起来简单明了，但想明⽩却着实不易。在职场中，你会遇到起起伏伏，这些都是很正常的。不必为了起，就得意忘形。落，⽽妄⾃菲薄。重视⻓远事项、可迁移技能以及⼈的联结，控制能控制的，接纳不能左右的。
实验 《凤凰项⽬》
尽早交付，减少半成品。构建并维护⼀个有良性互动的团队氛围，是团队提⾼胜率的关键。类似的还有《独⻆兽项⽬》等书籍，此类书的共同点在于指明技术团队在公司发展中该有的位置，以及技术领导该做的事情。这类知识很少出现在课本、公司内部⽂档中，是不错的补充学习机会。
《The Mom Test》
作为工程师，良好的沟通技巧对成功至关重要。《The Mom Test》提供了关键技能和原则，帮助我们提出深刻的问题、避免误导性数据，推动承诺和进展。
《同理倾听》
评判一件事总是比倾听并理解一件事容易。同理倾听，是我在近几年的协作互动中，最大的收获之一。同理倾听，帮助加深与周围人的联系，帮助促成改变。
《技术为径》
在技术领域，管理也是一个技术概念。它的学习曲线特别陡峭。尤其是没有足够的工具、手册或是框架来帮助你。在这本书中，作者 Camille Fournier（从技术管理干到CTO），带你走过从工程师到技术管理的每一步。从指导实习生到和资深同事工作，你将获得各种可执行的建议。关注这个系列，学着如何成为一个更好的管理者和领导者。
《算法的⼒量》
算法是我们的⼯具，但是它将如何影响我们的⽣活，影响我们的观点，影响我们的情绪以及意识倾向，这本书给出了回答。作为技术⼈员，未来的⽣活将在很⼤程度上取决于当代技术⼈员如何对待和处理他们的⼯作。
评估 《独裁者⼿册》
该书讲述了如何成为一个成功的独裁者，以及从另一个角度解释了：为什么有些欠发达地区的转型未能成功。小集团、候选集集团以及掌权者，他们之前的互动，决定了如何成为好的统治者。就如同书中所言：坏行为几乎总是好政治。 政治本身，并非为了所谓的共同福祉，尽管它常宣称如此。
《组织社会学⼗讲》
认识组织，⼀本写在2003年，但在今⽇仍然适⽤的书籍。组织会越来越像，这是基于社会期望的结果。以及很多组织所谓的成功经验，尺度拉长基本没啥用。所以我们还应该对组织抱有期望吗，这次会不一样吗？
暂缓 无
三、理财 采纳 意外之财的态度
对于奖金或者是意外之财，不少人会倾向于一次性消费、或者是等比例放大消费。这是常见的xx阶级陷阱，在如今的消费主义社会，更加难以坚守。从某种角度讲，我更信奉储蓄，不放大现有的消费节奏。或者可以偶尔消费，更多是投入到那些生产力工具上（自我麻痹）。
复利优先</description>
    </item>
    
    <item>
      <title>技术领导｜04 managing people 成员管理</title>
      <link>https://kuhung.me/2023/managing-people/</link>
      <pubDate>Sun, 17 Dec 2023 21:55:54 +0800</pubDate>
      
      <guid>https://kuhung.me/2023/managing-people/</guid>
      <description>本书已经由孙宇聪老师翻译，电子工业出版社出版。感兴趣的朋友可以直接去阅读中文版《技术为径》。在此不再重复造轮子。
下文是第四章，成员管理的思维导图，与诸位读者共勉。
🌟 合集地址：《The Manager&amp;rsquo;s Path》中文翻译
关于作者</description>
    </item>
    
    <item>
      <title>思维导图｜《同理倾听》</title>
      <link>https://kuhung.me/2023/listening-well/</link>
      <pubDate>Tue, 21 Nov 2023 21:55:54 +0800</pubDate>
      
      <guid>https://kuhung.me/2023/listening-well/</guid>
      <description>评判一件事总是比倾听并理解一件事容易。同理倾听，是我在近几年的协作互动中，最大的收获之一。
同理倾听，帮助加深与周围人的联系，帮助促成改变。
关于作者</description>
    </item>
    
    <item>
      <title>思维导图｜《The Mom Test》点子验证的最佳方式</title>
      <link>https://kuhung.me/2023/the-mom-test/</link>
      <pubDate>Thu, 24 Aug 2023 21:55:54 +0800</pubDate>
      
      <guid>https://kuhung.me/2023/the-mom-test/</guid>
      <description>作为工程师，良好的沟通技巧对成功至关重要。《The Mom Test》提供了关键技能和原则，帮助我们提出深刻的问题、避免误导性数据，推动承诺和进展。
关键技能 提出良好的问题（第1章和第3章）：学会在对话中提出有深度和相关性的问题。 避免错误的数据（第2章）：了解如何辨别和避免不可靠或带有偏见的信息。 保持轻松自如（第4章）：在讨论中保持放松和非正式的口气，鼓励开放的沟通。 推动承诺和进展（第5章）：鼓励参与者做出承诺，并在决策过程中向前推进。 设定会议框架（第6章）：清楚地定义会议的目的和目标，以确立正确的背景。 客户细分（第7章）：确定特定的客户细分，并相应地调整互动方式。 会前准备和回顾（第8章）：充分准备会议，并在会后回顾笔记和关键引用。 记笔记（第8章）：培养有效的笔记技巧，以捕捉重要信息。 &amp;ldquo;The Mom Test&amp;rdquo;（妈妈测试） 谈论他们的生活而不是你的想法：关注了解客户的经历和需求，而不是推销自己的想法。 询问过去的具体情况而不是未来的概念或意见：收集具体的例子和真实的情境，以获取准确的见解。 少说多听：积极倾听，以理解客户的观点并发掘有价值的信息。 回归正轨（避免错误数据） 转移赞美：引导对话远离赞美，以获得更有意义的反馈。 忽略废话：识别并忽略肤浅或无关的信息。 深入挖掘观点、想法、请求和情感：深入探究底层动机和关切。 反面教材 追求赞美
&amp;ldquo;我在考虑创业&amp;hellip;你觉得会成功吗？&amp;rdquo; &amp;ldquo;我有一个很棒的应用想法，你喜欢吗？&amp;rdquo; 避免暴露自我（The Pathos Problem）
&amp;ldquo;这是我为之辞去工作的绝密项目&amp;hellip;你觉得怎么样？&amp;rdquo; &amp;ldquo;我可以接受的，诚实告诉我你真正的想法！&amp;rdquo; 过于推销
&amp;ldquo;不不，你没有理解&amp;hellip;&amp;rdquo; &amp;ldquo;是的，而且它还能做这个！&amp;rdquo; 过于正式
&amp;ldquo;首先，感谢您同意接受这次采访。我只有几个问题，然后就让您继续您的一天&amp;hellip;&amp;rdquo; &amp;ldquo;请您在1到5的评分中，给出您的评价&amp;hellip;&amp;rdquo; &amp;ldquo;我们安排一个会议吧！&amp;rdquo; 成为学习瓶颈
&amp;ldquo;你只需要关心产品，我会了解我们需要知道的一切。&amp;rdquo; &amp;ldquo;因为顾客告诉我这样做！&amp;rdquo; &amp;ldquo;我没有时间和人们交谈，我需要写代码！&amp;rdquo; 收集赞美而不是事实和承诺
&amp;ldquo;我们收到了很多积极的反馈。&amp;rdquo; &amp;ldquo;我和每个我谈过的人都喜欢这个想法。&amp;rdquo; 会议前、中、后的流程 会议前 选择一个明确的、可找到的细分市场 与团队一起确定三个重要的学习目标 如果适用，确定理想的下一步和承诺 如果对话是正确的方式，确定要与谁交谈 为对方关心的问题创建一系列最佳猜测 如果问题可以通过书面研究回答，先进行研究 会议中 通过设定话题、氛围、目的和规则等方面，主导和引导整个交流进行的方向和进程 保持轻松随意的氛围，创建自在开放的交流环境 提出通过&amp;quot;妈妈测试&amp;quot;的好问题 谦虚地婉拒别人的称赞，避免停留在场面话层面，追根问底挖掘言外之意 做好笔记 如果合适，推动承诺和下一步 会议后 与团队一起回顾笔记以及客户的关键反馈 如果有价值的内容，把它们转为永久存储 评估之前的假设和计划是否需要调整 决定项目下阶段需要研究和解决的三个重要问题 成功会议的表现 事实 - 他们做什么和为什么这样做的具体、特定事实 承诺 - 他们表现出认真态度，比如投入宝贵的时间、名声风险或金钱这样他们重视的东西 进展 - 向实现目标和推进销售更近一步 走过场的迹象 你说得比他们多：主导对话而不是积极倾听 他们在称赞你或你的想法：收到赞美而不是有意义的反馈 你告诉他们你的想法，但不知道接下来会发生什么 你没有笔记：未能记录会议中的重要信息 你没有和团队一起回顾笔记：忽视了对收集的见解进行回顾和分析 你得到了意外的答案，但它没有改变你的想法：忽视或拒绝有价值的反馈 对于所提的所有问题都不感到害怕/难为情：不挑战假设或寻求不舒服的真相。 不清楚通过这次对话想解答的重大问题：对会议的目的和目标缺乏明确性 你不确定为什么要开这个会议：对讨论的预期结果和价值不清楚 书写记录——信号符号 :) 兴奋 :( 生气 :| 尴尬 ☇ 痛苦或问题（符号为闪电） ⨅ 目标或待完成的工作（符号为足球门） ☐ 障碍 ⤴ 解决方法 ^ 背景或上下文（符号为远处的山） ☑ 功能需求或采购标准 ＄ 金钱、预算或购买过程 ♀ 提到具体的人或公司 ☆ 后续任务 没有推动承诺和进展的迹象 无效线索（A pipeline of zombie leads）：在销售过程中没有推动潜在客户向前发展的进展 结束产品会议时收到对方的赞美 未能有明确的下一步计划和承诺 “进行得很顺利”的会议：表面上积极的会议，没有具体的结果 他们没有放弃任何有价值的东西：参与者没有投入资源或展现承诺 寻求会议并设定会议框架 愿景：简明扼要地阐述你的工作如何有助于让世界变得更好。 框架：清楚地传达会议的当前阶段和目的。 弱点：强调你需要帮助或指导的领域。 底座（Pedestal）：强调你正在交谈的人可以提供有价值的帮助的原因。 请求：请求具体的帮助或意见。 准备的重要问题 &amp;ldquo;我们想从这些人那里学到什么？&amp;rdquo; 谷粒制作 https://kuhung.</description>
    </item>
    
    <item>
      <title>2023年的职业发展，还要爬梯子吗</title>
      <link>https://kuhung.me/2023/career/</link>
      <pubDate>Sun, 06 Aug 2023 14:05:27 +0800</pubDate>
      
      <guid>https://kuhung.me/2023/career/</guid>
      <description>在2023年的年中档口，阿里计划将其P职级进行拆分，分为更细的类似华为的序列。据晚点LatePost等媒体报道，此举是在拉开级别差，在“战功”不那么多的情况下，让更多员工感受到爬梯子带来的激励。
爬梯子这个事情，在很多“成熟”公司，都会存在。这也是他们所宣称的“完善体系”中的一环——晋升体系。这一体系，带给人们最多的就是P7、P8的神话。在红利还未耗尽的18年，P7=100w，P8=200w。3年P6、5年P7这一说法在当时的背景下广泛传播。你到了这个阶段，没啥意外的话，就该是这个水平。现如今，这个说法不复存在。一是这种机遇没了，股票下挫总包锐减；二是称呼给你变了。
为什么要改，以及有哪些可选项，不是本文讨论的关键。这些信息作者没有、也无法像关注科技公司的记者那样跑在最前面（报道出了偏差，可是要负责任的）。
这篇文章主要是就梯子这个事情，延伸讨论两个点，一个是有梯子的话，该怎么爬。无论这个梯子是“成熟”大公司内部确定的职级，还是“扁平化”公司不愿意谈起，但实际上又有外部参考系的职级。另一点是想讨论，这个梯子一定要爬吗，一定是向上的吗？遇到向下的梯子该怎么稳住心态，没梯子可爬该咋搞。前者对于初入职场的新人较为适用，后者则适合长期食用。
当然，由于从业面受限，作者的视角以其朋友工作机器学习工程师为例。这一工种在某些团队也被称为：数据挖掘工程师，深度学习工程师，data scientist等。这篇文章，也算是对其朋友数年职场生涯的一个阶段性总结，其中包含他的自我察觉与反思。全文由作者与其朋友交谈、记录、整理得到。
一、职业阶梯 1.1 职场初期 在机器学习工作的早期，像许多工种一样，主要是执行团队或合作对象的明确指令。这个时候，干活的效率以及交付的可靠性，是主要关注的。做好手上的事，并在这个过程中熟悉团队的运作方式，了解公司的整体目标和价值取向，对于早期来说十分重要。
就保持高效而言，主要分为两方面。一方面是工具上和信息上的，另一方面是心态方法层面的。在工具上，去熟悉团队的开发工具与流程，并理解你所在的业务数据。而在心态方法层面，则更多是创建与人的联系。在需要帮助的时候，学会提问，有效提问。
如果能有效的做到上述两点，这份初级的工作，基本能够胜任。而随着工作的深入，会有更多的挑战来临。
1.2 职场进阶 1.2.1 干系人管理 职场总是围绕着人在转，这点在机器学习这类工作中同样存在。在打比赛的时候，你可以不用关心人，但你同样会关心人制定的比赛规则。而在现实工作中，某些规则不会摆在明面上的。其中就有职场进阶中需要面临的：干系人管理。
对机器学习开发来说，会有三类干系人。他们分别处在业务、项目owner、以及直系领导三个位置。
对于不同的角色，需要理解不同人的目标。业务干系人可能是为了业务提效，是发起方；也可能是尝试配合，是配合方。项目owner可能是产品，可能是工程师自己或者是别的开发。角色的目标是保证项目顺利推进，并拿到结果。直系领导更多关心的则是，这个事项是否在团队目标里，能否给团队能力突破带来新东西。针对不同的目标，采用不同的沟通和协调方式。
干系人管理有时候会很艰难。对方可能是没时间给你掰扯，也可能觉得和你不熟，甚至觉得你“不配”和他说话。这个时候个体往往会产生负面情绪，这很正常。有时候可能需要一些技巧，比如提前准备好内容并先同步主旨，比如通过中间人获得联系等等。有时候需要一点儿坚持不懈，有时候需要的是及时调转方向。
无论怎么样，与干系人的沟通都需要持续不断。通过各种方式让大家意识到你的价值，持续地同步你的时间线、面临的挑战与解决方案。
1.2.2 风险管理 公司雇佣你，是因为你的产出对公司有帮助。买断的是你工作时间内的交付物，无论这个交付物是代码，是模型权重还是对初级员工的培训指导。只要是交付，就会有交付相关的风险问题。风险管理是这个阶段需要重点关注的，这个时候已经没有人来给你把关需求了。
就机器学习这行来说，国内外同行的共识是：大量的项目都存在失败的风险。
机器学习的每一个环节出问题，都有可能导致交付失败。错误的数据，漂移的数据，以及有偏的数据，都会导致结果不理想，甚至是背离。不当的清洗方式，也有可能导致数据穿越。繁杂的数据、脆弱的包体依赖关系，也可能导致线上出问题。就机器学习本身而言，一定的流程规范能够减少这类风险。这部分目前被归为MLops，感兴趣的读者可以查阅作者的早期文章：机器学习系统设计，或是根据关键词在互联网自行检索。
即使这些都对了，就业务问题本身而言，也可能不存在信号，或者是信号微弱，收益低的情况。
更要命的是，很多时候我们的下游不想要；或者是预期物和交付有偏差，随后进入无止境的迭代中去。这类情况，并非机器学习行业独有，在领域同行软件开发早已经存在。其本质还是需求、项目管理的问题。在开始建模之前，充分了解需求场景，引导业务的真实想法，是非常重要的。太多的人会拿着锤子去找钉子，一开始建模并非明智的选择。
大部分机器学习团队都鼓励探索，但很少有团队会设立明确的止损点。这种模糊性会导致团队/个人被沉默成本吞没。识别并设置止损信号点十分重要。不同业务有不同的情况，这些举例一些可识别的信号：数据质量不佳、业务人员变动、项目优先级变动、交付标准多轮之后仍然不清晰等。
风险可以识别，也可以规避，但有的时候也不得不承当。一种承担风险的方式便是：风险分散。如果手上的项目全是预研或是难以落地，那么风险集中度就太高了。更好的方式是组合交叉。就像打造产品的波斯顿矩阵一样：尽可能涵盖不同类型的产品（项目），形成产品（项目）矩阵。（波斯顿产品矩阵：保证现金流产品、预研（未来的明星）产品、降低瘦狗产品的投入度、识别并及时停止问题产品的投入。）
尽管做了很多前面的准备，有时候项目还是会走向失败。对于那些失败的项目，回顾是必要的。回顾不是为了追责或者分锅，而是从中学习。定位问题：为什么不行，哪些情况是制约因素；识别方案：如果做到了哪些条件，该项目即可取得成效。从数据和问题中学到的东西，可以用在下一个项目中，减少下一个项目失败的风险。回顾的同时别忘了和前面的干系人交流，了解他们的想法和意见。这些归档的经验，也会使得团队其他成员受用。
1.2.3 关系审视 职场中常见的关系转变，在于离开一家公司。如今，互联网员工在一家公司的平均工作时长一般不超过3年，某跳动在特定年份甚至有平均在职7个月的传言。和我们老一辈择一家企业而就终身的观念不同，一家公司不再是人们长期稳固的追求。原因包括但不限于：有的公司自身寿命都没个几年，无法给个体提供稳定预期。有些则是个人发展上的诉求，对于更多可能性的追寻。还有的可能则是文化和认同上的问题。
只要个人还有发展的意愿，组织迟早难以满足其需求。这种关系，反过来也成立。关系的审视是必要的。
判断是该留还是该走，不应该是简单的钱给够了没，或是有没有受到委屈。因为这种说法，要么是夸大了经济利益的作用，要么是过分强调了负面情绪的比重。钱给够，还是文化氛围很奇怪，有些人也会选择离开。没受到委屈，但是做的东西不认同，在外部有更好机会时，也会有人选择离开。
经济因素和个人感受很重要，一票否决问题不大。但在这两者因素没有被触及底线时，关于成长、环境、成就以及意义的追寻也十分重要。不妨从下面四个角度评估关系：第一是你是否在持续进步。第二是你期望的环境状态这里有没有，无论是文化、氛围，还是某种程度的安心做事。第三是有发挥你的长处吗。第四是多问问你做的事情的意义是什么，和公司、团队的目标是否一致。
必要时候，向上级谈谈责任方向的转变。当然，职场并非以满足个人诉求为第一要务。有些时候这些诉求无法得到满足，做出调整也是应该的。这不代表你的失败，也不代表组织的失败，只是不匹配而已。
二、辩证看待阶梯 2.1 并非总是一帆风顺 大部分互联网科技公司都有内部职级标准，无论是阿里系的p7、p8，还是meta E6、谷歌L7之类的级别划分。这种划分渗透在科技公司的每个角色，无论你是技术向，还是非技术向。总有各种考核、评审，职业通道委员会来决定你是否能够上一级梯子。
有的公司对于初级员工是默认满年限晋升，有的公司会在晋升更高级别时设立答辩制度，但也有公司并无清晰制度。每年的绩效回顾前后，就是梯子调整之时。在某典型组织，部分人将获得提名，然后提报上上级。随后是答辩流程，准备迎接“价值、抓手、组合拳”的灵魂拷问，最后由委员会投票决定哪些人可以晋升。从大众到提名，从提名到通过，这里的比例有时候会人为控制，有时候也会因经济形势而调整。
也就是说，怎么都有人陪跑，怎么都有人原地不动。关于此情形，有不同的说法。有人会说我想爬，但是没有明确的标准。有人说是我的功劳，但被算到了嫡系身上。有些时候，是任务划分时，就决定了哪些人会晋升，哪些人不会。有些时候，单纯就是公司发展态势不行，没钱没精力搞这些了。
如果能够外推原因，对于个体的精神状态，倒也影响不会特别大。但近些年越来越明显的是，不少人会从中看到某种虚无感，会觉得难以接受，认为这是一种人生的失败。爬梯子某种程度上带来了清晰、有迹可循的职场发展路径；但同时也加重了人的异化。让人觉得必须怎么样，不然就是不合格的，不配的。
但要知道，软件这种形式上为技术架构，实际上仍然为社会工程的多人合作项目，人的因素占比并不小，甚至是决定性的。职场并非总是一帆风顺。
2.1.1 面对挫折怎么办 挫折很常见，不仅你会遇到，其他人也会遇到。这种经历并非独有，同时也并非丢人的事情。可能你会恼怒，但一段时候后，还是会回到正常生活中来。
一般来说，人们往往会短时间高估挫折带来的负面影响，低估其意义价值。就像《反脆弱》中所讲，早期的挫折就像早年的疾病，不仅不会让我们受重创，反而会培养起强壮的身体免疫力。维持一段时间在低谷心情，但是别高估了这种经历带来的负面影响。挫折不可怕。就像产品开发一样，尽早遇挫，尽早迭代反而是好事。
挫折会伴随一生，不仅今天会遇到，以后还会遇到。有些事情无法左右，过度思考只会加重无力感。不如多去看看其中积极的部分，无论是它带来了新的视角，还是带来了新的转变的动力。
2.1.2 条件不具备怎么办 与挫折相比，另一类相对不那么显性。更多的是我想达到某个目的，但是条件不具备。这个条件不具备，并不会直接导致我们的失败。顶多算是缺少资源，相关项目无法启动。比如需要指导，但是公司内没有现成的资料。想要接受培训，但是组织好像并不重视这方面，宁愿从外部直接招聘相应技能的人。或者是缺少机会，能够让你证明自己的能力。
这些情况非常常见。职场不是游戏，并不会有人为你精心设计关卡，关注你的成长曲线。相反，职场希望你能干好你自己手上的活，最好少提要求多做事情。很多条件并非自然出现。偶尔天时地利，那也实属撞大运。
怎么办？你才是个人发展的唯一负责人。你需要清楚你的诉求，并尽可能寻求帮助。没有现成的培训与指导，那就去向掌握这个技能的人请教学习。内部没有相应的明确培训计划，可以在外部找到对应的参考。没有机会，那也不妨多修炼内功，巩固自身的技能，顺便梳理自身的能力项。静待合适的机会，向干系人表达自身的诉求。将视野放宽，那些约束项也许就将不复存在。
2.2 在有限的时间和空间内被规训 要明白一个事情，梯子本身也是一种社会约束，是某种形式的规训。这个社会结构，希望你按特定路径掌握相关能力，满足相关标准。以此来达到最大化生产效率、稳定生产要素的目的。梯子本身的设计出发点与关注的第一要素，并非个人。
在明白的基础之上，掌握便不再是难事。读到此处的读者朋友，相信都有很强的学习能力与耐心。能够在理解的基础上，胜任绝大部分工作。通过主动了解组织内部的资料，去掌握不同级别所需的软、硬技能。通过项目去锻炼，在职场中取得相应结果。当然，如果所在组织没有清晰的路线，那也可以通过外部互联网或者对标公司，找到所需的资料。通过学习、思考、实践、领悟，把自己向着特定方向靠近。
在上面的过程中，有些人要么是没找到对应的门路，郁郁不得志；要么是以为自己掌握了银弹，左脚踩右脚飘上天。但其实，这套规则也不过是在规训人、异化人，把人当成了工具。这里就引出下一个话题：在掌握的基础上，对公司和组织去魅。这套规则运行顺利的情况下，有些人（有些时候）会像《精英的傲慢》中所言，觉得自己并非风口的猪，而是“努力”得来。而对那些靠后的人，表现出鄙夷；认为手下/合作的人，皆生产资料，而非有真情实感的人。
去魅有两个好处，一个是更加清晰的认识自己，无论顺境还是逆境，知道都是暂时的，从而保持谦逊和韧性；另一个则是，能够让自己在有限的时间和空间内被规训，而不至于产生职场倦怠。除此之外，也会开始理解组织。组织的光环开始褪去，个体更加清晰地认识到组织的决策依据与目的。知道组织也有自身的短板和不足，知道该如何发挥组织的长处，实现个人与组织的双赢。
三、职业中的其他可能 3.1 外部社群 前面讲了很多的职场的事，但实际上职场并非职业生涯的全部。就如同《把自己作为方法》中所言：整日手机上网冲浪，会忽视掉附近的存在、忽视掉其他可能性。过分关注职场，特别是自己无法左右的职场事情时，也会让人忽视掉自身能力的提升，以及可能的外部联结。
就像《高绩效教练》中所言，高绩效的三要素在于：自主、胜任、联结。与他人的联结，将带来更多的可能性。这里的联结，可以是与新来的同组同事，也可以是有相似兴趣爱好的邻里。当然，如果谈工作的话，那就是有类似技能和职业规划的一群人。无论你是在技术论坛中作为一个新人，咨询新手问题；还是作为在部分领域中有一定经验的人，帮助他人。这类活动，都可以加强自身的意义感，同时也能带来新的机遇。
举例来说，参加公开的学术会议，或者是在机器学习比赛中结交新朋友，是不错的方式。除此之外，贡献开源项目或者是博客/播客内容输出，也是一种顺应潮流的思路。加入你感兴趣的职业社群，能够在倦怠之时，敦促自己前进。
3.2 其他要素 看到本文的读者，从业经验大多不会超过10年。年轻的我们总是容易被眼前的琐碎但具体的事项所牵引，忘记了我们的职业生涯至少会有30年。职业中的其他要素，说的便是以一个更大尺度看待自己的职业生涯。在职场的早期，像《远见》中所言，可迁移技能、有意义经验以及持久的关系，比其他东西更重要。这个阶段，这三个要素要大于职位、金钱等其他要素。类比投资，就是在年轻经得起折腾时，尽可能多折腾，去积累更多经验。</description>
    </item>
    
    <item>
      <title>全面了解 PrivateGPT：中文技巧和功能实测</title>
      <link>https://kuhung.me/2023/privategpt/</link>
      <pubDate>Wed, 17 May 2023 21:38:16 +0800</pubDate>
      
      <guid>https://kuhung.me/2023/privategpt/</guid>
      <description>近日，GitHub上开源了privateGPT，声称能够断网的情况下，借助GPT和文档进行交互。这一场景对于大语言模型来说，意义重大。因为很多公司或者个人的资料，无论是出于数据安全还是隐私的考量，是不方便联网的。为此，我也进行了些许体验，跑完了整个流程，希望给读者朋友一些有用信息。
原作仓库地址：https://github.com/imartinez/privateGPT
先说结论：可用，但还有进步空间。特别是对于简单询问语句，该模型不像ChatGPT回答有来有回，而是提供若干可能性进行回答。而数据预处理环节的容错性、embedding向量的生成方法以及大语言模型的基底模型，每一个环节的质量都会影响最终的使用体验。可期待的是，每一个环节都有可能逐步改善，并最终带来质的飞跃。
原理解析 这套方法使用了 LangChain, GPT4All, LlamaCpp, Chroma and SentenceTransformers.
LangChain 用来生成文本向量，Chroma 存储向量。GPT4All、LlamaCpp用来理解问题，匹配答案。基本原理是：问题到来，向量化。检索语料中的向量，给到最相似的原始语料。语料塞给大语言模型，模型回答问题。基本原理和chatpdf没大差别。
环境配置复现 首先是环境，后文采用的是ubuntu环境。mac环境也能支持，不过在安装过程中需要调整部分参数。家里有ubuntu系统，图省事就用它了。
conda create -n gpt python=3.10 # 其他python版本不行，后续有个3.10的语法糖 conda activate gpt pip install -r requirements.txt 配置环境
cp example.env .env vi .env 具体配置如下
PERSIST_DIRECTORY=db MODEL_TYPE=GPT4All MODEL_PATH=models/ggml-gpt4all-j-v1.3-groovy.bin EMBEDDINGS_MODEL_NAME=all-MiniLM-L6-v2 MODEL_N_CTX=1000 下载资料与模型权重
我们以《Generative Agents: Interactive Simulacra of Human Behavior》AI小镇这篇论文为例：
cd source_documents curl -o x.pdf https://arxiv.org/pdf/2304.03442.pdf cd .. mkdir models cd models curl -o ggml-gpt4all-j-v1.3-groovy.bin https://gpt4all.io/models/ggml-gpt4all-j-v1.3-groovy.bin 向量化数据
python ingest.py 如果502失败，可以尝试shell中直接调起python，输入下面的代码。下载完成后退出。</description>
    </item>
    
    <item>
      <title>ChatGPT 现状回顾与机会分析</title>
      <link>https://kuhung.me/2023/chatgpt/</link>
      <pubDate>Tue, 14 Mar 2023 00:41:03 +0800</pubDate>
      
      <guid>https://kuhung.me/2023/chatgpt/</guid>
      <description>前言 最近中文互联网上最火热的莫过于ChatGPT。人们都在谈论这个东西是多么“划时代”的产物。过去对AI不成气候的论调也看不见了，主流媒体似乎都在说：牛。不少大厂说自己也要“下海”参与布局与竞争，即使他们才不久刚ALL in 元宇宙。AIGC似乎是PGC、UGC的下一个大蛋糕。
该技术在22年11月底就推出了，但并未在当时引起太多关注（当然也和大家都急着囤药有关）。去年十二月份左右，即有技术论坛谈论到此事。不过大家讨论的并非它有多牛，而是关注的它带来了多少“垃圾内容”。新的“内容农场”的论调随处可见：假话空话以及语义不明的文本内容占据高的SEO，污染各种可见的搜索结果。Stack Overflow发表声明称：将会拒绝这类生成的答案在论坛中出现。随后，更多论坛也发表了类似的声明。
谁可想，三个月不到，该产品便火爆中文互联网出圈。
回顾 就像是各类引爆点事件一样，你永远无法准确预测哪些事情会被广泛传播，只能事后诸葛亮分析一波。从最快达到1亿用户数的产品；到谷歌下场表演失利，市值蒸发。这类资讯，前者挑动大众市场，后者让各类科技公司如坐针毡。在“营销”传播方面，赚足了眼球。
产品设计上也不输。如果从游戏的视角来说，ChatGPT其实是提供了足够多的可玩性。无论是用户的可玩性，还是开发者的可玩性。用户可以问各种想到的问题，还可以和它做角色扮演游戏。开发者能够很轻易地就API接口进行二次开发，满足特定领域的需求。足够好玩+确实有用，是其核心竞争力。
解读 在19年我还写过一篇关于它的文章，通过GPT-2生成文章。但当时，它的能力还有限，只能生成语义看起来连续，但却一眼假的“胡编”文体。后来大家发现用固定规则也能生成类似的话。一度衍生出了狗屁不通文章生成器等产品。规则、或者说正则在垂直领域确实效果显著。维护简单，还能满足模型可解释性要求，满足确定性。其实现在，ChatGPT的接口中仍然可能存在不少规则，特别是涉及有争议的话题或者是时间感知等话题。
在没有细致体验之前，我对它的理解，也不过是GPT-2的加强版。或者是Siri和小冰。但体验之后，我发现它的体验真可以称得上是：令用户惊奇+满意。无论是对话流畅度和语义衔接程度，还是说内容的有效性。可以不夸张的说：仿佛回到了几岁的时候，站在一台拨号上网的计算机面前，无限可能等着我去开启。
GPT 全称 Generative Pre-Training，生成式预训练模型。生成式通过对数据的联合分布建模，与之对应的是判别式，采用条件概率建模。预训练通俗来讲是大模型训练，然后在垂直数据上进行微调。方式一般是冻结神经网络的前n-2层，只对n-1进行权重调整。以计算机视觉举个例子，我们在大模型的权重基础上，仍能够通过微调让模型认识猫狗，即使猫狗不在数据集中，猫狗的数据集量级远小于大模型。
据公开资料显示，ChatGPT用到的技术其实不复杂，甚至是前面大厂开源的东西。怼大规模数据+大模型，然后加上PPO强化学习。但是就这样它却有出色的表现，特别是在多轮对话方面。常见的NLP任务，这个模型通过对话都能实现。无论是情感分类、语言检测或是翻译任务、改写任务、摘要任务、总结任务、续写任务，甚至生成任务它都表现良好。
机会 谈机会总是离不开股市“投机”，因为股市是经济的晴雨伞，也是市场的热点所在。在春节期间，我的某大厂同事便提到了他们内部在all in这个方面。当时我还没当回事，认为不过是互卷的新噱头。但没想到的是，确实有不少人在这其中获得了较大的alpha超额收益。
有人通过卖账号小赚一笔，也有人通过二次开发得到流量。大部分都淹没在人流中，小部分被广泛传播。借助其多语言特性，开发者能方便地开发一款产品，然后在全球传播。开发出来翻译工具、pdf解读工具。翻译本身其实和调用谷歌的翻译流程上无二，但也获得不少曝光。
但很快，人们也发现ChatGPT会编故事。ChatGPT不会说不知道，而是尽量从概率空间生成有含义的对话，即使这含义本身，并无对应实体。当你问一本书或者一首歌的相关信息时，它总是会“移花接木”，让人摸不着头脑。当然，你要拿去问文献，也只会生成一批其他宇宙才可能存在的文章。
但这也是人类的特点，不是吗？只要语气足够肯定，三人即可成虎。所以，在它扮演解梦角色、扮演星盘角色时，大家也不会苛责它效果不稳定。因为它本身也符合了人类的自我归因认知和自我暗示。
展望 对于大部分企业来说，“自主研发”一套ChatGPT并不划算，更多还是利用API的接口能力。但当前有个问题亟待解决，如何将企业独有的小规模语料的并入大模型中。在写稿子的同时，据悉GPT-4即将发布。其具备多模态能力，跨越语言、图片和视频。如果支持自定义语料的话，可以预见三大运营商以及银行的客服系统将有巨大体验上的升级。
虽然它有如此多的功能，但还是有上手成本。特别是在一些复杂任务场景，需要提示词去引导它。为此还专门衍生出了一个专有名词：prompt engineering。
提示词的本质，和搜索词类似，即“提问的艺术“。不同的是搜索引擎用更长的框暗示你填更多的词，以此来获得更多的信息。提示词却更为复杂，一长串的指令只为对方扮演正确的角色或者绕过特定的限制。为此，我也写了一个网页版的提示词查找器，方便初次接触的朋友体验到进阶玩法。地址：https://kuhung.me/awesome-prompt-engineering/ 。其具备基本的提示功能，随机出现一组，复制方便。
真人在你面前，你都可能不会如此耐心。面对一个机器人，人们却有充足的耐心和多样的方法去提示它。
回到一开始人们的担心。在人工智能领域，人们常说的一句话是：garbage in, garbage out。用来形象说明数据质量的重要性。随着这个工具的普及，公开互联网上的数据分布，将不可避免受到影响，反过来又作用到模型本身。可以预见的是：能从繁杂的信息中获得关键信息，以批判视角看待问题，能更好组织和表达语言的人，将在未来越发稀少和可贵。
关于作者</description>
    </item>
    
    <item>
      <title>思维导图｜《过去预测未来》胜任力模型</title>
      <link>https://kuhung.me/2023/behavioural-based-interview/</link>
      <pubDate>Mon, 20 Feb 2023 23:50:53 +0800</pubDate>
      
      <guid>https://kuhung.me/2023/behavioural-based-interview/</guid>
      <description>我读这本书的动机是想了解如何选择优秀的团队伙伴，以及一般公司招聘体系的运作方式。
这本书的核心内容是关于STAR法则的，即挖掘候选人过去的经历，来发现他们的未来潜力。
值得注意的是：人常常带有偏见。为了识别不同能力特长的人，必须摒弃或减少主观偏好。至于如何更好地进行面试，这本书没有提供完美的解决方案。唯一的方法就是不断练习并增强自我觉察能力。
此外，书中还详细介绍了如何进行调研，以获得适用于公司和部门的胜任力模型。接下来是原作者总结的通用胜任力模型。它提供了一个相对全面的能力画像。
关于作者</description>
    </item>
    
    <item>
      <title>思维导图｜《凤凰项目》</title>
      <link>https://kuhung.me/2023/the-phoenix-project/</link>
      <pubDate>Wed, 08 Feb 2023 00:19:40 +0800</pubDate>
      
      <guid>https://kuhung.me/2023/the-phoenix-project/</guid>
      <description>这本书的妙处在于，你能在它身上看到工作的影子。虽然说有爽文的嫌疑，devops也不是银弹，但其中提到的约束理论、控制半成品的要求，还是很有启发意义的。跳开具体的管理理论，本书传达的向成熟行业学习的思路，也值得借鉴学习。
对于一位工程师，或者说工程师团队负责人来说，你所做的该是与公司目标息息相关的事。构建一个合适的工作流，保护你的时间、保护你的工程师，确保达到目标。与反馈源保持密切接触，缩短反馈时间，尽可能扩大项目的影响。多探索（但是要控制半成品数），多实践（无交付的脑暴没有意义）。
最后说说局限与思考，本书构建的场景中，主角和CEO有紧密的联系、还有外部的支持，这在很多公司里面是不一样的。团队内有项目管理的专家，有支持主角的下级管理者，也有能干活出活的工程师，很难说这种组合对于项目结果没帮助。最后，拯救公司于水火之中的独角兽项目可不常见，对于日常的工作，如何发动变革，如何带来结果，是《凤凰项目》回答不了的。
关于作者</description>
    </item>
    
    <item>
      <title>思维导图｜《刘擎西方现代思想讲义》</title>
      <link>https://kuhung.me/2023/modern-western-thought/</link>
      <pubDate>Sat, 28 Jan 2023 22:46:53 +0800</pubDate>
      
      <guid>https://kuhung.me/2023/modern-western-thought/</guid>
      <description>工具理性正在日益渗透进入我们的生活，而价值理性正由于去“魅”失去标杆，现代人不可避免地工具化，只为在激烈的竞争中成为合格的、优质的零件。
交往理性带着它美好的期待，却很难成为共识。我们都知道要好好说话，但日益禁锢的流程或结构下，少有人真情吐露。
现代，我们身处其中。无论是工作还是家庭，都被其包裹。当然，随之而来的也有工具理性。好在我们有各种闪烁的思想，让我们能够与之对话，明晰自身。
关于导图作者</description>
    </item>
    
    <item>
      <title>思维导图｜《关键冲突》</title>
      <link>https://kuhung.me/2022/crucial-confrontations/</link>
      <pubDate>Sun, 07 Aug 2022 21:55:54 +0800</pubDate>
      
      <guid>https://kuhung.me/2022/crucial-confrontations/</guid>
      <description>关于作者</description>
    </item>
    
    <item>
      <title>思维导图｜《极客与团队》</title>
      <link>https://kuhung.me/2022/team-geek/</link>
      <pubDate>Tue, 07 Jun 2022 21:53:11 +0800</pubDate>
      
      <guid>https://kuhung.me/2022/team-geek/</guid>
      <description>关于作者</description>
    </item>
    
    <item>
      <title>抵抗理性人思维与数据诱惑</title>
      <link>https://kuhung.me/2022/how-over-targeting-ruined-our-lives-step-by-step/</link>
      <pubDate>Sun, 15 May 2022 11:03:26 +0800</pubDate>
      
      <guid>https://kuhung.me/2022/how-over-targeting-ruined-our-lives-step-by-step/</guid>
      <description>（这是一篇原定于去年这个时候发出的文章，但由于种种原因，中途搁置。近日上海发生的种种，又不禁让我想起这篇文章的意义。数据到底意味着什么？这是本期，我们思考的议题。尤其是靠数据吃饭的数据分析与数据挖掘人士，在运用数据的同时，更应该知晓其短板和问题。人，因为理性而伟大，因为知晓其局限性而成熟。）
背景故事 最近一位朋友遇到一件事情：他们公司是做外贸的，每天和很多客户打交道。只要和人打交道，就不可避免会有冲突。他们有个系统，来记录客户的投诉。问题就在客户投诉量这里。原因是公司老板觉得，每天一百的投诉量太多，需要产品弄清楚什么情况。产品想了一个立竿见影的方法，修改判断标准：如果客户的投诉内容少于7个字，则视为无效投诉。因为字这么少，并没有实际有效的信息。
这个方法，惊为天人，马上投诉量指标就下来了，老板也不再过问。问题解决了吗？看起来解决了，又看起来没有。
我的朋友是一位思想坚定的青年，有他自己的原则。他认为这种做法无异于掩耳盗铃，即使这个事情每天都发生在我们周边。为什么这样说，首先第一点，老板想知道原因，改善问题。但是下级却曲解了其本意，认为数据是让老板感觉不爽的点，并奉为行事圭臬。第二点，通过粉饰数据的方式去达到表面的目的，放弃了深入理解这个问题的可能。
朋友认为需要该事发起一项专项分析。可是很不妙的是，项目的决策者并不关心客诉，他希望他开发的功能赶紧上线。另外一个产品还说，这就是工作。Yep，有时候你不得不陪某些人演戏，但当整个组织都在演戏时，没人关心客户，没人关心长远利益。这个组织虽然短期还能运转，但我们都知道最后的结局。
这些人呢？也许会失业，也许因为其“卓越”的方法论，被请到下一家企业，作为职业经理人，继续布道。
这样的事情每天都发生在我们周围。
数据的不可抗拒之魅力 指标，是现代管理学的一次伟大胜利。著名管理学家彼得·德鲁克（也是提出彼得原理的那位）曾经说过：无法测量，则无法改进。这句话掀起了管理的革命，一定程度上帮助近现代企业走向目前的辉煌。目前在管理体系中，活动大多围绕指标（metric）展开。
作为数据从业人员，我们也会遇到很多数据指标，DAU、转化率、营收。在建模时，同样也需要指标去衡量模型的客观效果。数据简直太好用了，不愧是21世纪最性感的科学。当别人不同意你的看法时，拿出数据；当组织考核你绩效时，拿出数据；当前路不明需要探索时，拿出数据。数据是石，敲击星星之火。数据是火，点燃熄灭的灯；数据是灯，照亮夜行的路；数据是路，引你走到光明。
这些点点滴滴，一步一步也在筑起企业的数据能力，帮助企业在决策中走向理性和胜利。
但是，越来越多的证据表明，过度指标化，正在侵蚀我们的生活。
数据的日常快照 生活上，我们总是在追逐各种数据。早上什么时候起来，今天学了多少东西。体重保持在优雅的范围没，工资能买零点几平上海老公房了。甚至于，我们会拿智能设备去监控自己的各项指标，以期望达到某种自我的调和认可。
以我写文章为例。早期的目标是一周一篇，发现实际操作起来，还是有难度的。主要的难点在于，怎么保证稳定输出。想得很好，但实际却也陷入指标的陷阱。我开始焦虑，文章会不会受到欢迎。如果我不写、不发布，那就永远不会面临指标的考核。这也是我目前正在经历的。这样的例子在工作、学习、人际交往以及理财等领域屡见不鲜。
职场上，这类事情就更多了。成也指标，却也败于指标。上面一开始的例子，绝对不止发生在朋友的公司，成千上万的企业内部正在发生类似的事情。今天你这个部门多少人加班了，明天这个季度你所在的项目数据如何，后天再来一个数据复盘。数据正渗透我们的职场生活。
某位老板希望产品的DAU能到百万，于是该产品团队撤掉了支持集团其它业务的工具，将其并入某app，达到了百万DAU。但是，公司得到了什么？公司得到了数字，但是却失去了用户体验。从一个旁观者来看，对集团最有利的不是牺牲用户体验堆DAU，而是发挥员工的主观能动性，去开发一款真正吸引用户的产品。
至于社会上，这类事情则表现得更隐蔽。如果一个地区强调破案率，则基层民警则一定会先去做简单的案子。如果破案率要求到百分百，则冤假错案也就出现了。同样的，医院如果注重康复率，那些疑难杂症，自然而然优先级就降低了，这并不是我们想看到的，但却每天都在发生着。
更甚至，编造假数据欺骗外界。亩产万斤放卫星的事情，至今还没被教科书擦掉。
魅惑的原理与后果 为什么我们会痴迷于此，这恐怕得和最近两百年的科学文化胜利脱不开关系。近现代文明得以有飞速的发展，离不开“理性”两个字。理性是现代化启蒙的源头，理性、科学、实证替换感性、玄学、传言，将诸多现代发明带到我们身边，提高了我们的劳动生产效率，也带来了物质的空前富足。我们有什么理由拒绝理性呢？
在另一个方面，从社会规训角度，大家会潜意识地认为：只要有公开透明的数字，那么我们就可以监督组织或个人实现其目的。无论这个组织是我们持有股票的上市企业，还是一般科研机构。这个人是标准化考试下的未成年人，还是绩效考核下的打工人。
指标文化甚至到了一种安慰剂的程度：即使没做出什么事情来，只要在不断收集数字，呈现数字，那么至少还会有些心理上的慰藉。这大概就是无效加班，没有功劳也有苦劳的内在自洽逻辑。
不过问题也显而易见：你测量什么，你才能优化什么，但你也只能得到什么。但越来越多的事实表明，指标之中存在陷阱。迷恋指标，只是带来粉饰、欺骗甚至是生命的代价。
首先是信息的扭曲，每个人对于指标的理解都不一样。计件工作是吧，那我先做容易做的。程序员的代码不好评估，那就去评估代码量、去评估工作时长。同样的数据，用春秋笔法，听起来也就没那么糟糕了不是。
同时存在的也有指标的操纵。粉饰业绩，让数据在不同的口径下进行对比。降低标准，以期让产品达标（对的，某奶制品企业）。或者报喜不报忧，喜欢听好话是吧，给个够，负面消息藏着掖着让后来的人吃个够。作弊造假自然也就见怪不怪了。
如何摆脱理性人 回到开头的案例，我们试着以朋友的思维来解决问题：首先，不必对指标过份解读。也许老板是随口一提，表达他的困惑。作为负责人，有理由去澄清和引导老板。迫于老板的“淫威”而改变口径降低标准，是放弃了自己作为主体人的权利，沦为工具理性的客体。接着，才是把注意力集中在核心的问题上，去解决问题。
但是有时候，我们不得不设立指标去追踪、记录和改善某件事。《指标陷阱》中提出了以下九点建议，我们得以按清单一一检查：
测量对象的类型：是人还是物，人的介入越多，测量的扭曲可能性越大 测量对象的意义：虽然有些东西很容易测量，但却离意义甚远 测量对象的数量：不是越多越好，测得越多成本越高 一定要标准化测量吗？有没有其他能表现效果的方式 测量结果的用户：是拿去直接做绩效奖金依据，还是作为宏观资源分布调控用 获取指标的成本：除开事实成本，也考虑机会成本 提出测量人的目的：有时候我们是执行某个人的测量，请弄清楚其目的 测量方法由谁来定：最好是被测量者本身，因为只有认同，才更能发挥作用 明白局限：再好的测量系统都会受制于目标转移 如果检查完上述的9条，还是很有把握应用指标，那么就请行动吧。毕竟指标化，有如此多的好处。当然，选择不继续指标化也是很正常的，并不代表个人、组织的失败。有的时候，基于生活经验的决策，带来的好运气也许更长久。
请时时刻刻记住其局限性，无论你是否是专业数据人员，明白局限，是智慧的开端。
参考资料 刘擎西方现代思想讲义 我们的未来 : 数字社会乌托邦 算法的力量 : 人类如何共同生存？ 指标陷阱 : 过度量化如何威胁当今的商业、社会和生活 </description>
    </item>
    
    <item>
      <title>思维导图｜《Your Brain at Work》</title>
      <link>https://kuhung.me/2022/your-brain-at-work/</link>
      <pubDate>Wed, 04 May 2022 11:36:48 +0800</pubDate>
      
      <guid>https://kuhung.me/2022/your-brain-at-work/</guid>
      <description>🔗 免费下载 pdf 稿
关于作者</description>
    </item>
    
    <item>
      <title>思维导图｜《量化交易》</title>
      <link>https://kuhung.me/2022/m2-quantitative-trading/</link>
      <pubDate>Tue, 29 Mar 2022 21:04:26 +0800</pubDate>
      
      <guid>https://kuhung.me/2022/m2-quantitative-trading/</guid>
      <description>🔗 免费下载 pdf 稿
关于作者</description>
    </item>
    
    <item>
      <title>思维导图｜《纳瓦尔宝典》</title>
      <link>https://kuhung.me/2022/the-almanack-of-naval-ravikant/</link>
      <pubDate>Mon, 07 Feb 2022 21:48:22 +0800</pubDate>
      
      <guid>https://kuhung.me/2022/the-almanack-of-naval-ravikant/</guid>
      <description>关于作者</description>
    </item>
    
    <item>
      <title>思维导图｜《四步创业法》</title>
      <link>https://kuhung.me/2022/the-four-steps-to-the-epiphany/</link>
      <pubDate>Fri, 07 Jan 2022 21:41:40 +0800</pubDate>
      
      <guid>https://kuhung.me/2022/the-four-steps-to-the-epiphany/</guid>
      <description>关于作者</description>
    </item>
    
    <item>
      <title>技术领导｜03 techlead 想象、现实与路线抉择</title>
      <link>https://kuhung.me/2021/techlead-vol-3/</link>
      <pubDate>Tue, 23 Nov 2021 15:56:41 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/techlead-vol-3/</guid>
      <description>🌟 合集地址：《The Manager&amp;rsquo;s Path》中文翻译 注：没有特别声明，文中的“我”都指原作者 Camille Fournier
抉择：留在技术路线还是成为经理（管理路线） 成为经理还是留在技术路线是一个艰难的决定。这完全取决于你所处的环境，我不可能告诉你该怎么做。然而，作为一个憧憬并经历过这两条路线的人，我可以透露下我所幻想的、以及真实所见的。需要注意的是，这些只是为了表述方便进行的脸谱化描述，现实不完全相同。
高级技术路线的想象生活 你的每一天都在深度思考中度过，与其他高级开发人员一起，解决那些有趣、新颖的智力难题。这是软件开发，所以你知道会有一些繁琐的小事。你有很大的权力来选择你的工作，进而可以选择最有趣的部分。你喜欢编写代码、修复bug、让代码运行得更快、让计算机做新的事情，并且你可以把大部分时间花在这上面。
由于你的资历，经理会在开发开始之前询问你关于开发的建议。你知道正在发生的一切，但又不需要处理人事问题。你被邀请参加正确的会议，在那里做出重要的决定，而且没有影响到你的正常工作。大部分初级开发人员会尊重你、并相信你的每一句话，接受你的反馈，且没有过多地占用你的思考时间。
你的上升轨迹永远不会放缓，你总是可以解决新的、大的问题来向组织展示你的价值。你工作很努力，很少被要求加班或周末工作。当你工作到很晚时，那是因为你专注于工作，迫不及待想完成手头的功能或修复刚刚发现的错误。
你可以写书、发表演讲并发布开源作品——如果有一些运气和坚持，你会赢得一些行业名声。在你表达时，没有人关心你有点尴尬或害羞，也没人期望你改变自己的沟通方式。你说的话很重要。你所在组织中的每个人都知道你是谁，了解你工作的价值，并尊重你的意见。
简而言之，你在投入的工作、名望和积累的专业知识之间取得了完美的平衡，这使你成为无价的、受人尊敬的、高薪和有影响力的技术大牛。
高级技术路线的真实生活 当你处于正确的项目，以及项目的正确生命周期阶段时，你的生活就很棒。虽然面临挑战，但可以学习新事物。你对日常工作有很大的控制权，而且会议的次数肯定比管理同行要少，但你的日子并不总是在幸福的状态中度过。
每个项目都有一个阶段，你需要将想法推销给其他人，试图说服他们这是正确的方法。可能你已经实现了这个系统，但现在你需要让其他团队开始使用它。你花上好几天时间，向他们展示来龙去脉，解释它为什么有用，试图说服他们、游说他们的经理采用它。
你的上升轨迹并不像你希望的那样快速和容易。事实上，它非常缓慢。那些证明你是一位无价开发者的大项目很难找到。团队不需要新的编程语言、新的数据库或新的 Web 框架。你的经理不擅长给你布置向整个组织展示你才能的重要任务；他希望你告诉他这些机会在哪里。
发现好的项目似乎是运气问题。选择糟糕的项目，尽管你尽了最大努力，但仍会花费数月甚至数年的时间来完成一些可能会被取消的项目。你有点嫉妒你的管理朋友，他们在不断壮大团队的同时，似乎升职迅速。
与其他开发者的关系也是不好不坏。你是个不错的人，所以他们中的一些人钦佩你并听取你的意见，但其他人似乎嫉妒你的影响力。初级开发人员要么想占用你大片时间，要么出于某种原因害怕你。“谁来领导大型的、有趣的项目？”在这个问题上，同辈之间存在竞争。
你的经理也是麻烦的来源。他并不支持你开源系统的愿望，即使你认为这提供了行业需要的新思路，将为行业带来转折和变革。他建议如果你想发表演讲或写书，应该花费个人时间。他会寻求你对技术问题的反馈，但有时会忘记告诉你计划有变，直到你已花费大量心思。
你怀疑你错过了重要信息，因为你没有出席该参加的会议。但每次他邀请你参加这些会议时，你都会想起他们是多么无聊和低效，以及你有多少宝贵的专注时间被浪费。他对你希望摆脱繁琐工作的期望（如回复电子邮件、面试或及时回复代码审查）并不上心。
尽管如此，你大部分时间都可以构建软件。你可以将时间花在技术问题、系统设计和工程问题上，而不必与人打交道或坐在无聊的会议上。你通常可以选择你的项目，如果你想尝试些新的东西，可以较为容易地更换团队。你刚刚发现你的薪水比你的经理高！所以，生活并不全是坏事。
管理路线的想象生活 你有一个团队，你有控制权，你有决定权，你可以让别人按照你的方式做事。你的团队尊重你，并乐于在所有事务上服从于你的权威。你认为他们应该写更多的测试吗？你告诉他们，“写更多的测试”，他们就做到了！你想确保每个人都得到公平对待，无论他们的性别、种族。为了确保实现这个目标，你解雇任何有越界行为，或为团队其他成员创造不健康环境的人。
因为你的出发点是好的，成员知道即使他们不认同你，你做的事情也是为了他们好。他们为你解答疑惑，在你一团糟或希望收到反馈时，以公开的方式为你提供反馈。与人打交道压力重重。他们知道你关心他们，所以这项工作的回报也不少。你处于教练的位置，且很快会看到教练技巧发挥了作用。
当你看到另一位经理做错了事时，你可以自由地向他提出建议，就像与另一位需要系统设计帮助的工程师交谈一样。其他经理总是很乐意听你的想法。他们看到你让团队工作的效率提升，你关心组织健康的关心程度，也关心让每个人都变得更好的因素。
你的经理给了你很多指导，但很少介入告诉你该怎么做。当你准备好接收一个更大的团队时，你的经理愿意给你更多的人并扩大你的团队。他给你的目标很明确，很少改变。即使你有很多责任，你仍然有一些时间写博客文章和演讲。这是值得鼓励的，因为它会帮助你的团队招聘并提高你在科技行业的地位。
简而言之，你可以做出关键决定，你创造文化，你的效率对你周围的人都是有目共睹的。你的晋升之路更快，你的职业生涯令人兴奋和有利可图。
管理路线的真实生活 你有一个团队。你有一定的控制权，但你很快发现让人们做某事比口头说说难多了。你似乎已经放弃了对自己日常生活的所有控制。大多数情况下，你整日都在开会。
当你只有一个小团队时，你能够平衡时间且仍编写代码，但随着团队的发展，你已经几乎不写代码了。你知道该写代码，但你没有时间。专注于编写大型系统代码似乎已经成为记忆。
你可以做出决定——一些决定。实际上，你也许可以缩小将要决定的事情的范围。你可以让你的团队专注于一些事情，比如编写更好的测试，但他们仍然有一个产品路线图要实施。他们对应该优先做哪些任务有自己的想法。你不仅仅是自己做决定，还需要引导团队的决策方向。
你的经理给你目标，但有时会突然改变这些目标，你需要向团队解释这些变化。你为团队设定了文化榜样，这有好有坏。当他们学到了你好的方面是值得开心的，但团队有时也会放大你的缺点。你的团队自然不会只是同意、尊重和喜欢你。权威不仅仅靠一个头衔赋予。
当项目进展不顺利时，你会发现自己得想尽办法激励他们。他们中的一些人不开心的时候是不会告诉你的，直到他们厌倦并且准备离职。
当公司发展顺利，你会收到很多金钱回报，有很多令人兴奋的项目可以开展，生活很棒。但当事情有压力的时候，你就会发现让人们开心的力量是多么的微不足道。
尽管如此，你仍然可以看到你的工作对他们中的一些人很重要。因为你的指导，他们更快乐、更成功。这些小小的确幸支持你度过艰难时期。
其他经理对你的反馈不感兴趣。事实上，当他们认为你在侵占他们的地盘时，他们会抵触你。
上级经理不同意你扩大的团队，并且无法真正解释原因；他的领导技巧还有很多不足之处。也许他只是担心你会超过他？他绝对不希望你把所有时间都花在演讲上。当你离开办公室太多时，他会生气，无论团队可能从中获得什么价值。
在不损害同事或老板的情况下弄清楚如何领导比你预期的要棘手。但是，如果你能组建一个更大的团队，你知道你会得到晋升，所以至少你的道路是清晰的。当你发现为你工作的高级工程师比你赚得多时，你会心里不平衡。你想弄清楚如何快速组建更大的团队。
我最后的建议是：如果需要，你可以切换路线。人们在某个时候尝试管理，意识到不喜欢，然后回到技术路线是很常见的。每个角色都有优点和缺点，你可以自行感受自己最喜欢什么。
好经理、坏经理的区别：流程崇拜 流程崇拜者信奉：一个真正的流程如果正确实施并按设计遵循，将解决团队的所有问题。流程崇拜者可能会沉迷于敏捷、看板、Scrum、精益甚至瀑布方法。他们对 on-call 应该如何工作、如何进行代码审查、发布过程必须如何运作有非常明确的想法。他们往往非常有条理，对细节很满意，他们善于理解规则并准确地遵守它们。
流程崇拜者通常出现在测试、中台或项目管理小组中。他们在咨询机构和其他衡量过程来评判回报的地方也很常见。他们可以成为项目管理团队中非常有价值的成员，因为他们倾向于确保任务不被遗忘，并且一切都按照应有的方式进行。
当流程崇拜者没有意识到大多数人并不像他们那样擅长遵循流程时，他们会陷入矛盾。他们倾向于将所有问题都归咎于未能遵循流程，而不是承认灵活的必要性以及意外的必然性。他们通常专注于易于衡量的事物，例如在办公室工作的时间，而忽略了那些无法衡量的事物。
相信“合适的工具能解决一切问题”的工程师在成为技术主管时可能会变成流程崇拜者。他们寻找合适的工具来解决时间管理和优先级排序等所有问题。他们试图在寻找到好的流程前停止所有工作，或者不断在团队中推出新工具和流程。
与流程崇拜者相对的，不是完全放弃流程的管理者，而是理解流程必须满足团队和工作需要的人。具有讽刺意味的是，虽然“敏捷”通常以僵化的方式实施，但敏捷的原则是对健康的流程领导的一个很好的总结：
• 独立和互动胜过流程和工具 • 工作软件优于复杂文档 • 客户协作而非合同谈判 • 响应变化而非遵循计划
作为一名新的技术主管，要小心依靠流程来解决由于团队沟通或领导力差距而导致的问题。有时流程的改变是有帮助的，但它很少是灵丹妙药，没有两个伟大的团队在流程、工具或工作风格上看起来完全相同。
我的另一条建议是寻找自我调节过程。如果你发现自己扮演着任务主管的角色，与其批评那些违反规则或不遵守流程的人，倒不如看看流程本身是否可以改变得更容易遵循。扮演规则警察是在浪费你的时间。
作为流程崇拜者的经理，你需要帮助他更轻松地应对模棱两可。与许多经理所踩的坑一样，对流程的痴迷可能与对失败的恐惧和控制事物以防止意外发生的愿望有关。
如果你诚实并明确表示失败和不完美是安全的，那通常就足以让你的流程崇拜者放松一点并容忍模棱两可。防止流程崇拜者花大量时间寻找完美的工具或流程，尤其重要的是要确保他们不会因为未能遵循流程而惩罚他们的团队。
如何成为一名出色的技术主管 优秀的技术主管有许多特征，但下面这些是最重要的。
了解架构 如果你担任技术主管，但觉得自己没有完全理解所支持的架构，请花点时间了解它、学习它。了解它如何影响它所支持的产品，这些产品的核心逻辑在哪里。当你不了解你正在改变的架构时，几乎不可能很好地领导项目。
成为一名团队合作者 如果所有的有趣工作都是你在做，请停下来。看看那些棘手、无聊或烦人的领域，你是否可以解决这些问题。处理代码中繁杂的部分可以提供你很多关于流程哪里出错的信息。对于无聊或令人沮丧的项目，有经验的人花时间查看它们通常可以发现并修复一些明显的错误。</description>
    </item>
    
    <item>
      <title>技术领导｜03 techlead 与项目管理</title>
      <link>https://kuhung.me/2021/techlead-vol-2/</link>
      <pubDate>Sat, 13 Nov 2021 15:56:41 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/techlead-vol-2/</guid>
      <description>🌟 合集地址：《The Manager&amp;rsquo;s Path》中文翻译 注：没有特别声明，文中的“我”都指原作者 Camille Fournier
管理项目经历 回到我第一次担任技术负责人的时候，我的团队正在执行一项非常复杂的任务：分布式系统迁移。我们一个现成的系统在单机已经到达了它的理论极限。在倾尽所学优化它之后，我们决定是时候弄清楚如何在多台机器上运行它了。
这还是分布式系统萌芽的初期，当时大多数软件开发人员对构建它们的最佳实践知之甚少。但我们有一支优秀的聪明的团队，我们有信心解决这个问题。
我们确实搞定它了，虽然缓慢但毋庸置疑。我们花了很长时间思考、设计和拆分计算。当跨多台机器计算时，这个过程是非常重要的。然后有一天，我的老板迈克把我拉到他的办公室，告诉我：需要制定一个项目计划。
糟糕的体验 这是有史以来最糟糕的经历之一。
我不得不接受这项极其复杂的任务，并试图找出哪些任务依赖于其他任务。我不得不考虑各种依赖关系。我们如何让它在我们复杂的测试框架中运行，我们将如何部署它，我们什么时候采购硬件来测试它，集成测试需要多长时间？问题不断涌来。
我走进迈克的办公室，坐在他对面的大木桌旁。我们会讨论任务细节、时间节点和意外情况。他会帮我解决部分问题，然后把更多的工作分发给我。
这不是我喜欢做的事情。我必须克服不确定性和对犯错误的恐惧，对遗漏的恐惧，以便制定一个能够通过迈克的计划。接着又得进行一轮繁琐的工作，将其整理成某种容易理解的形式，我们可以呈现给领导团队，以便他们认可。
重要的学习经历 敏捷开发不是摆脱了对项目管理的需求吗？
不。敏捷开发是一种拆解工作的好方法，因为它迫使你专注于将任务分解成更小的块，规划这些更小的块，并以增量方式交付而不是一次性交付。
这并不意味着你无需了解如何进行项目管理。
你会有一些项目，无论出于何种原因都无法在一个迭代中完成，甚至无法在两个小迭代中完成。你需要为你的管理团队估算项目时长，并详细说明为什么你认为事情会花费那么长时间。
有一些项目，例如基础设施、平台或系统等，需要架构或重要的高层次规划。当面对这种包含许多未知数和相对严格的截止日期的项目时，你会发现它不太适合标准的敏捷流程。
随着你的职业发展，你需要了解如何分解复杂的工作。这些工作可能超出了你作为个人的能力范围。一个长期运行的、基于团队的项目的管理并不是那么有趣。
为什么项目管理很难 我想写代码并获得直接反馈，而不是考虑如何分解非常模糊的项目实施细节。
我担心我会被追究责任，并且我可能会在这个过程中错过一些重要的事情，这将使项目失败。
项目管理并不等同于每一项工作都被详细计划，它的作用在某些组织中被过度夸大。
我甚至不喜欢招聘项目经理，因为他们经常阻碍工程师，而非思考他们将要做的工作，并就他们在做什么以及为什么要做提出真正的问题。他们的存在意味着你有更多瀑布式项目而不是敏捷过程。
尽管如此，项目管理仍然必须进行，作为技术负责人，你应该在需要时进行管理，尤其是对于技术性很强的项目。
项目管理价值 归根结底，计划的价值不在于你完美地执行计划、事先抓住每一个细节，准确预测未来；而是在项目动手之前，深度思考项目：稍微看远一些，在你能预测和计划的地方找到参考系。计划本身并没有行动重要，无论结果表明计划是多么准确。
回到我的第一个项目管理。
项目是否按计划完美运行？当然不是。有bug、意料之外的延期以及我们没有注意的事情。然而，我们仍然接近约定的时间交付了该项目，并且没有通宵赶版本。
我们设法将这个复杂系统迁移到分布式系统，40名开发人员一起针对主代码分支进行了自己的分支更改。所有这一切都是可能的，因为我们有一支很棒的团队。我们制定了计划。我们已经考虑过成功是什么样子，并确定了一些可能导致失败的风险。
自从与迈克的那次令人沮丧的会议之后，我举行了一系列项目规划会议。我坐在迈克的位置上，而我对面是卡罗、艾丽西亚或蒂姆。他们每个人都感到了计划缺乏细节的挫败感。他们每个人都有去做一些令自己不舒服的工作，去思考那些不是代码、无法完美预测的事情。
由于这项工作，他们每个人都带领复杂的项目取得了成功，并且现在他们了解分解项目的真正含义，从而更有能力构建更大的系统和领导更大的团队。
花时间澄清 取得博士学位的最后一步是答辩。在这个阶段，作为博士候选人，经过多年的研究，你需要在所处领域的专家小组面前展示你的工作结果。他们将判断你的成果是否值得获得博士学位。
多年前，我有幸获得了美国最负盛名的应用数学方向的数学博士学位。小组中的一位评委是数值分析领域的著名数学家。在我（成功地）答辩之后，他对我说的话在我整个工作生涯中伴随着我。他说：“你的论文是我多年来读过的最清晰、最清晰的论文之一。谢谢！”
我当然很欣慰，但也对他的话感到非常惊讶。我原以为他是世界一流的数学家，他会“无所不知”，只用“观察”就知道我的论文质量如何。事实上，正如他所解释的，他能够做到这一点，只是因为我不厌其烦地解释了问题空间的基本思想以及我想法背后的动机。
我一直没有忘记这个教训。从那时起，在软件和大型组织工作多年后，我更加牢记了澄清的重要性。
软件工程中的澄清 我们认为我们的管理层“理解到了“我们作为技术人员所做的事情。只需“阅读代码，伙计！”。我们每天编写的软件对任何从事技术工作的人来说都应该是显而易见的，对吧？但事实并非如此。技术经理雇用最好的人，寄希望于他们能够解决难题。但经理们并没有完全“理解”这一切。
当我能够以一种不具威胁性和不居高临下的方式向他们解释一些非常基本的现代思想（例如，这些 NoSQL 的内容是什么，我为什么要关心？）时，高级技术经理很是开心。
最近，一位高级业务经理私下问我为什么要将传统部署的客户端架构迁移到托管平台。他承受着很大的内部压力来推动这项工作，但他不知道为什么这是必要的。他也可能太不好意思公开询问了。我花了两个非常有成效的小时来解释。
我现在从不犹豫，借此机会向高级或初级成员解释基本知识和动机。它在不让他们感到渺小的情况下帮助了他们，他们学会相信我的判断和建议，我们带来改变。
花时间解释是非常重要的。
管理项目101 项目管理是：将复杂的最终目标分解成更小的部分，将这些部分大致按最有效的顺序排列，确定哪些部分可以并行完成，哪些必须按顺序完成，并尝试梳理找出可能导致项目放缓或完全失败的项目的未知因素。
你正在解决不确定性，试图找到未知数，并认识到尽管你尽了最大努力，你还是会在此过程中犯错误并错过一些未知的东西。
这里有一些指导方针：
分解工作。拿出电子表格、甘特图或任何对你有用的东西，开始把你的大可交付成果（比如，重写你的计费系统）分解成任务。
从最大的部分开始，然后将大的部分分解成更小的部分，然后再将它们分解成更小的部分。
你实际上不必自己做这一切。如果系统的某些部分你不太了解，请向了解的人寻求帮助。
把大事分解一些，然后把注意力转移到工作的顺序上。
什么可以立即开始？将这些任务交给能够真正将它们转化为简单任务的人。
推进细节和未知数。项目管理的诀窍是当你感到有点卡住或厌倦时不要停下来。
正如我之前所说，这很累很乏味。这可能不是你擅长的事情。因此，继续努力克服那些刺激、无聊和痛苦的点。
一个好的经理会和你坐在一起，告诉你哪里不够好，提出问题来提示你，甚至和你一起解决一些问题。
我们也不喜欢它，但它是教学练习的一部分。解决未知数，直到你真的觉得花时间在它们上面没有任何价值。
运行项目并随时调整计划。一个好的计划过程的价值在于，它可以帮助你大致了解项目已经进行了多远，以及距离完成还有多远。
随着事情的进展（他们总是如此），让每个人都了解状态。但是现在，你不必猜测你必须走多远，而是可以清楚地指出已达到的里程碑并概述预期的剩余工作。
使用在规划过程中获得的洞察来管理需求变更。
在给定原始需求集的情况下，通过分解项目，你学到了很多东西。
如果需求在中途发生变化，请知悉这些变更并将计划进行调整。
如果变更给项目增加了重大风险，需要进行大量新的规划，或者只是需要额外的工作量，请清楚这些成本。
如果截止日期严格，粗略地了解所需的工作将帮助你确定优先级、削减和简化工作，以在功能、质量和交付日期之间取得最佳折中。</description>
    </item>
    
    <item>
      <title>技术领导｜03 techlead 该知道的事情</title>
      <link>https://kuhung.me/2021/techlead-vol-1/</link>
      <pubDate>Sat, 23 Oct 2021 15:56:41 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/techlead-vol-1/</guid>
      <description>🌟 合集地址：《The Manager&amp;rsquo;s Path》中文翻译 注：没有特别声明，文中的“我”都指原作者 Camille Fournier
背景介绍 多年前，我成为技术负责人。在这之前我已经晋升为高级工程师，和其他几位高级工程师在一个小团队中工作。我对被提升为技术负责人有点令人惊讶，因为无论是头衔还是年限，我都不是团队中最资深的人。
回想起来，我有一些优势。首先，我不仅仅是一名优秀的工程师，还是一个很好的沟通者。我可以写出清晰的文档，我可以在思维不短路的情况下进行演示，我可以与不同团队、不同角色的人交谈并解释发生了什么。
我也擅长优先级排序。我渴望推进工作并搞清楚下一步需要做什么。最后，我愿意收拾残局，做能做的事情来取得进展。我认为，这种务实的紧迫性（pragmatic urgency）是决定性因素。毕竟，技术负责人是一个领导职位，即使它不是管理职位。
（译者注：领导（lead）意味着需要做出关键性决策，对团队的业务发展负责。管理（manage）意味着塑造团队，有权决定团队的构成。一般而言，技术负责人是技术管理者与其他成员的桥梁。两者的进一步区别，可以参见本系列 tech lead 的第三部分。）
我见过技术负责人陷入困境。
一个印象深刻案例：他是一位了不起的工程师，能编写出色的代码，但讨厌与人交谈，并且经常被技术细节分心。我看着他一个接一个地陷入困境。与此同时，产品经理利用他的缺位，促使团队的其他成员将注意力集中在交付设计不佳又过于激进的功能。
项目一团糟，技术负责人在做什么？他追求下一次重构，因为他确信问题完全出在代码的结构上。你可能熟悉这个故事，因为它无处不在。
这里存在一种误区：认为技术负责人应当由这样的人担当，他们是最有经验的工程师、能够处理最复杂的功能或编写最好的代码的工程师。即使是有经验的经理也会犯这个错。专注于自己的代码细节不是技术负责人的该做的事。
技术负责人的工作到底是什么？我们对这个人有什么期望？
什么是技术负责人 与软件工程中的许多头衔一样，“技术负责人”缺乏一个统一的定义。我能做的最好的事情就是借鉴我自己的经验和其他人的经验。
作为技术负责人，我的工作是继续编写代码，但要承担额外的责任。即做好团队和管理者的衔接，审查我们的功能交付计划、处理项目管理过程的诸多细节。
尽管我不是最资深的人，但我可以成为技术负责人，因为我愿意并且能够承担这个角色的责任，而团队的其他成员更感兴趣的是专注于他们正在编写的软件。
当我在 Rent the Runway （一家公司）的团队创建我们的工程职业发展路径时，我们有意识地选择将技术负责人的角色定义为：工程师可以在职业生涯中的许多点，而不是特定级别上承担的事务。
我们采取这种策略是因为我们认识到，随着团队的变化和发展，技术负责人的角色可能由许多不同阶段的工程师担任，并且可能会从一个工程师传递到另一个工程师身上，无需任何一个人改变他的职能或工作级别。
技术负责人在公司与公司之间，甚至在公司内部的团队与团队之间可能并不完全相同。我们从标题中知道，它既是技术职位又是领导角色。它通常是临时的职责，而不是一个永久的头衔。
所以，综上所述：什么是技术负责人？这是我们在 Rent the Runway 的口径：
Rent the Runway 关于技术负责人的描述 技术负责人不是职级上的一个点，而是任何工程师在达到高级水平后都可能承担的一系列职责。
这个角色可能包括也可能不包括人员管理，但如果包括，技术负责人应该按照 RTR 原则管理这些团队成员。这些标准包括：
• 定期（每周）1-1 接触 • 关于职业发展、目标进展的定期反馈：需要改进的地方，并根据表现进行表扬 • 在各种信息中确定成员的发展方向，通过特定项目、外部学习或额外指导帮助他们在这些领域成长
如果技术负责人不直接管理，他们仍然需要为团队的其他成员提供指导和帮助。
技术负责人如何成为一名强大的技术项目经理？他们通过有效委派而非微操管理来实现这一目标。
他们关注整个团队的生产力，努力增加团队产出产品的影响力。他们有权为团队做出独立决策，并正在学习如何处理麻烦的管理和领导情景。他们还在学习如何有效地与产品、分析以及其他业务领域的同事合作。
技术负责人还写代码吗 正如 Patrick Kua 在他的书《Talking with Tech Leads》中的描述：负责（软件）开发团队的技术负责人，至少花费 30% 的时间与团队一起编写代码。
技术负责人的位置更像是技术型的项目经理，需要在更大范围内利用他们的专业知识，促使整个团队变得更好。他们可以做出独立的决策，并在团队与其他非技术团队的协调方面发挥重要作用。你会注意到这里没有特定的技术向工作。这是一个高级工程师职位，但将技术负责人等同于团队中最优秀或最有经验的工程师是错误的。
没有其他人的参与，你就无法领导。人际交往能力是我们要求新的技术负责人需要强化的地方，甚至优先于技术专长。与此同时，技术负责人将致力于一项新技术技能学习：项目管理。分解项目的工作与设计系统的工作有很多相似之处，即使对于不想管理他人的工程师来说，学习这项技能也很有价值。
如果你发现自己处于技术负责人的位置，那么恭喜你！有人认为你具备成为团队关键人物的条件。现在是学习一些新技能的时候了！
成为技术负责人 **技术负责人是一种在未授权状态下，练习影响力的机会。**作为技术负责人，我正在领导一个团队，但我们都向同一个技术经理汇报。因此，我不仅要影响我的同事，还要影响我的经理，以确保我们优先聚焦正确的工作。</description>
    </item>
    
    <item>
      <title>增长黑客概要</title>
      <link>https://kuhung.me/2021/growth-hacking-01/</link>
      <pubDate>Sun, 10 Oct 2021 23:11:13 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/growth-hacking-01/</guid>
      <description>诸多科技公司都热衷的增长黑客是什么 增长，自古以来是一个永恒的话题。宇宙在膨胀、国家经济在增长、数不胜数的公司也在这片土地上扩张。可以说，没有一个带自主意识的东西，是不在扩张边界的。即使是在零和博弈中，一方的衰减也伴随着另一方的增长。
增长黑客这个词，也是最近网络上的一个热词。同人工智能、数据算法一样，很多新兴高科技公司，都想通过这种模式，实现快速的跨越式的增长。实际情况到底是怎么样的，如何做好增长，今天我们就来缕一缕思路。
由于我本身工作就和数据相关，且和数据中的用户相关，因此会添加更多数据、算法的模型角度观点。从一个数据挖掘工程师的角度，来看待增长这么回事。
增长没有银弹 首先要明白，增长黑客这个做法不是银弹。没有说我搞了这一套东西，组建团队，引进了增长黑客相关的人员，就能够实现跨越式的增长。增长和数据驱动本身并不冲突，甚至是一件东西的不同角度侧写。只有当你明白这个东西的期望上限时，你才会明白瓶颈在哪里，以及这个瓶颈是否是目前制约你的因素。
那什么是增长的基础前提呢？我认为有两个方面，一个是有一个至少能用的产品，有忠实的拥簇。不至于说咱们的产品还没搞出来，就指望着搭建增长团队了。第二个，是企业能有数据驱动的文化，有谦虚和平和的工作氛围，允许犯错。这是为了保证增长业务在跨部门时，能不受限于各个部门间的藩篱。
从我个人的经验来说，市面上不缺能用、好用的产品，缺的是具备增长条件的公司文化氛围。在类似361系的文化中，KPI制胜，已经严重制约了用事实数据驱动增长的工作模式发挥作用。因为粉饰数据就能够获得好的回报，你去较真，往往吃力不讨好。没有人愿意去试错，你失败了就得接受最低绩效走人。没有人愿意说真话，也没有人愿意接受其他人的合作。所以，如果你在类似的独裁式的公司，应当先考虑的不是增长，而是如何保证业务不衰败。
开启增长循环 很幸运的是，我也看到很多公司具备上述两个条件。好的产品+谦逊合作的公司文化。那么，我们就该步入正题，谈谈如何做好增长这个过程。增长的预期效果，如果要用一句话概括，那么就该是：通过数据，找到高效的获客方式，更快激活用户、让用户体验到产品的aha时刻且形成习惯，灵活适应客户的需求变更，让用户成为产品的口碑传播者。这么一套下来，增长是自然而然的事情了。
通过对于用户生命周期的分析，我们可以将其分为以下四个阶段。获客、激活、留存以及变现。在不同的阶段，我们有不同的关注重心。总体而言，我们关心的是：什么渠道的客户，是如何体验到产品的aha时刻的。即渠道和产品的匹配以及用户和产品的匹配。
获客阶段，我们的目标是优化成本，扩大规模。因此我们希望能够找到最高ROI的渠道，在现有渠道不断迭代素材，优化转化率。从产品设计角度而言，适当引入病毒传播元素，让用户分享产品的体验必不可少。对于社交类产品，网络效益的挖掘也十分重要。更多的用户带来更好的产品体验，即网络效益。
激活阶段，我们的目标是让用户真正使用你的产品，体验到“让人眼前一亮”的功能。关注每个环节的转化漏斗，明确产品的aha时刻，让新用户尽可能快地体验到aha时刻。这个阶段，我们关注特定用户群面临的障碍，通过用户研究等方式，获得玩家真实想法。总体而言，这个阶段的杠杆最大，也是最值得花精力的。
留存阶段，我们的目标是唤醒并留住用户，确保用户的真正活跃。我们希望产品已经成为用户生活的一部分，且用户真正从产品（服务）中获得满足感。应当明白的是，留住用户的是产品质量，是因为我们提供的产品或服务，能够持续满足用户需求，或让他们感受到愉悦。在这一阶段，我们常常关注触发物的设计，通过合理设计触发物，使用户形成习惯。
变现阶段，我们的目标是提高每位用户的收益。当然，也有一种说法是，只要你做好产品，收入自然会尾随其后。变现值得关注，但它绝非关注的重点。优化变现，常常通过漏斗图的方式，去关注每个环节的摩擦。除此之外，合理的定价，也能给产品带来可观的收入。
总结 当谈起增长的停滞，我们总是会发现各种各样的原因。有的公司是取得主导地位后心态膨胀，不再关注自己的核心产品或服务，转而扩张到其他业务。有的是过度依赖某些渠道，直到渠道变化，被掐断流量。也有的是公司文化建设不善，人才流失严重。其实，最最常见的是，公司疏于检测用户的满意度，忽视了用户的早期不满情况。
除开外部市场变化，竞争对手的创新我们无法控制，以上的种种，我们都有措施规避。时刻保持警惕，要明白增长永无止境。深入理解用户体验aha时刻的路径，不断去理解和优化这一过程。发掘新渠道，引入新视角，都可以避免上述问题。
当然，从我个人的视角而言，最最重要的还是：保持谦逊，对用户心怀敬意，对增长的目标永远坚定。
参考资料
《增长黑客》 关于作者</description>
    </item>
    
    <item>
      <title>思维导图｜增长黑客</title>
      <link>https://kuhung.me/2021/30186119/</link>
      <pubDate>Thu, 07 Oct 2021 21:33:50 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/30186119/</guid>
      <description>关于作者</description>
    </item>
    
    <item>
      <title>日常冲突的解决之道</title>
      <link>https://kuhung.me/2021/confrontation-01/</link>
      <pubDate>Mon, 13 Sep 2021 09:03:51 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/confrontation-01/</guid>
      <description>冲突管理三步骤 “不在沉默中爆发，就在沉默中灭亡。”这句话原本是周树人用来描绘旧中国反动派统治下的场景，但今天的很多场景也很适用。在人类社会中，由于各种理念的差异、资源的不均，冲突从来没有停止过。面对冲突，我们最常见的要么是沉默、要么就是爆发。
改善冲突管理技巧，对于我们的生活将大有裨益。首先，冲突很多时候是因为他人不符合自己的预期，提高冲突处理技巧能鼓舞他人对事情负责。其次，有效的冲突处理，能够给他人带来信任感，让他人更加信任你。最后，在职业生涯中，管理得当的冲突，能够给组织结构带来可预见性。
今天，我们就冲突这个话题，展开讲讲如何处理它。分为冲突之前、冲突进行中以及冲突的后管理。以下的思路框架来源于《关键冲突》，看完全文且感兴趣的同学，可以去阅读原著。
冲突之前 看到一个不合预期的情况，很多人的第一反应，大概就是直接冲上去了吧。这个反应很正常，但今天起，你应该稍微停下来，思考下：这真的是个问题吗？这个观念和《你的灯亮着吗》如出一辙。强调的是：不是所有问题都真的需要解决，也不是所有问题都需要你解决。
目标和意义 具体怎么做，首先要明白事情的目标和意义。冲突是第一次出现，那么请关注冲突的内容，不要轻易上升程度。冲突再次出现，则应关注模式。是不是什么流程出了问题？冲突多次出现，则应该关注下你和冲突方的关系了。同时审视自己，是在不该沉默的时候，选择了沉默吗？
梳理头绪 冲突面前，最应该克制的便是情绪化。情绪是一头猛兽，会干扰你的判断。如果还有第三方介入，则这个第三方可以通过操控情绪，影响你的判断。所以，请先克制住上头的感觉，克制先入为主的观念。从人、社会 以及组织的角度，综合分析影响的源头。逐步还原真相。
冲突进行时 面对冲突，首先要做到不去妄下定义。而是通过描述现状的模式，向对方询问问题的来龙去脉。
明确冲突的来源，是动机不够、还是能力不够。不同的原因有不同的应对措施。
制造动机 当对方缺少动机时，要做的是给予对方做这件事的动机。可以通过正反两种未来场景的描述，到达目的。说明目前的错误行为，对于各方的负面影响。预测正确行为将给到其他人的积极结果。最后，明确目标、责任人以及时间节点。定期检查结果。
简化问题 除了动机，能力也会影响一个人做某事的态度。你让我一个拧螺丝的去造火箭，那我即使想完成，也很难胜任不是。所以，在缺乏能力时，应尽量帮助对方简化问题。通过提问的方式，和对方一同探寻问题的根本原因。适当的，引导去关注潜在的影响因素。当能力得到匹配之后，再检查动机是否具备。
随机应变 进展不可能一帆风顺，多少你会遇到意料之外的事情。当对方感觉不安全时，先跳出话题，营造一种安全的感觉。语焉不详时，抓住这个点澄清事实。当插入突发话题时，标记好之前的话题进度，稍后回到原议题。当对方情绪化时，引导对方关注事实的经过，减少情绪化对判断的影响。
冲突之后 最后别忘了，冲突解决了不等于问题解决了。明确执行计划并跟踪进展，是善始善终的重要一环。明确何人、何时、何地做何事。明确每个人的责任和工作内容。和对方一同确定检查的时间节奏。
总结 面对冲突，核心还是在于沟通。当然，沟通也是需要技巧。以一个平等、尊重的视角，梳理冲突的经过。对差异的来源进行诊断，从能力和动机两个维度，激励他人。最后，定期检查，时刻回顾。这就是冲突处理的核心技巧。</description>
    </item>
    
    <item>
      <title>思维导图｜《战略历程》</title>
      <link>https://kuhung.me/2021/strategy-safari/</link>
      <pubDate>Tue, 07 Sep 2021 21:18:54 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/strategy-safari/</guid>
      <description>关于作者</description>
    </item>
    
    <item>
      <title>思维导图｜《用数据讲故事》</title>
      <link>https://kuhung.me/2021/storytelling-with-data/</link>
      <pubDate>Sun, 05 Sep 2021 21:38:31 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/storytelling-with-data/</guid>
      <description>关于作者</description>
    </item>
    
    <item>
      <title>思维导图｜竞争性真相</title>
      <link>https://kuhung.me/2021/competing-truth/</link>
      <pubDate>Sun, 15 Aug 2021 23:17:46 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/competing-truth/</guid>
      <description>关于作者</description>
    </item>
    
    <item>
      <title>软件开发的高杠杆活动</title>
      <link>https://kuhung.me/2021/the-effective-engineer-01/</link>
      <pubDate>Mon, 09 Aug 2021 09:12:06 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/the-effective-engineer-01/</guid>
      <description>软件开发的正确思维，聚焦高杠杆活动 作为技术序列的工程师，我时常在想，什么样的角色将会是我五年、十年后所扮演的。目前来说，工作三年有余，在某些公司内，已经可以算是高级甚至是资深工程师。不过，对于我来说，赋予title起的作用，并没有做成一件事兴奋。我时常在好奇，别的工程师的工作方法和我一样吗？我目前的工作方法是最优的了吗？
带着这样的疑问，也关注了硅谷大厂程序员的一些博客，同时也阅读了一些软件开发的经典之作，例如《人月神话》、《大教堂与旧集市》、《程序员修炼之道》等。这些内容都是很好的基础，为我软件开发的职业道路，树立了基本的职业价值观。不过今天，要推荐另外一本书《The Effective Engineer》。本书目前还没有中文版本，作者经历过硅谷的大小厂，Google、Quip、Quora等，从他的角度，总结了一些很有道理的内容。
该书的核心，聚焦在一个杠杆二字。所有活动的目的，都是最大化杠杆的效果。这点和的之前讲的财富38条法则不谋而合。在上次的法则中，同样强调了杠杆的效用。而软件开发领域，本身就是一个高杠杆活动。你开发的软件，可以只供团队内数十人使用，也可以供数以亿计的用户使用。
该系列整体分为三条，咱们逐一拆解。
软件开发的正确思维 聚焦高杠杆活动 作者认为，软件开发的核心：不是用了多么炫酷时髦的技术，不是你懂的技术别人不懂（技术垄断），而是解决业务问题。只是恰巧，工程师的角色定位，让我们能够借助软件程序解决问题。
在这个过程中，去聚焦高杠杆活动，充分发挥软件程序的优势。用杠杆率去衡量自身的产出，有计划地增加杠杆的效率。
例如：有没有方法更快完成项目？有没有方法让项目的作用更大？如果不做这个项目，有没有其他杠杆率更高的项目？
优化学习 这里的核心观点在于，学习是存在复利效应的。无论外界如何变化，一定要掌握自己的学习节奏。寻找能够提供成长的环境，结合工作中的其他人的能力，提升自己的能力。除了工作内容，工作外的技能也应有所精进。
更迭优先级 我们都知道，事情可以根据四象限法则，分为重要紧急、重要不紧急、不重要紧急、不重要不紧急。最后一个能不做就不做，倒数第二个能晚做就晚做。前面两个优先做，重点做。
在这一环节，聚焦能够直接产生价值的地方。如果担心被打扰，则可以设置一个番茄闹钟，以减少场景切换的可能。为了减缓拖延，可通过自我目标设定，自我陈述的方式：”如果，就“来有序安排工作。
在执行上下功夫 投资迭代 在软件开发领域，有一个著名的MVP理论，即最小可行性原型。该方法除了快速验证假设外，也起到快速迭代的作用。迭代越快，我们能学到的就越多。熟练掌握工作，多在迭代上下功夫。
测量指标 没有测量，就没有改进。这是著名管理学理论。在软件开发领域也是如此。当然，衡量程序员的产出，不是靠代码行数或者bug数，而是其实际的产出价值。这也要求我们谨慎地选择衡量指标。理解数字，诚实看待数字。
尽早验证想法 一如前面的MVP原则，我们尽早验证想法，通过迭代减少浪费。如果有必要，我们还可以通过A/B测试，来检验实际效果。
项目评估技巧 大部分时间，我们也会面临项目周期评估的问题。作者建议，在排期中设立回旋余地。拆分项目，设置合理的里程碑。优先处理高风险的事项，能一定程度保证项目如期交付。如果延期不可避免，则也应该对延期时间有个合理的评估。
构建长期价值 实用与质量的平衡 多快好省赶紧上，这种思想也会出现在软件开发领域。这本身与快速迭代并不矛盾，但要注意平衡好开发周期与质量的矛盾。CodeReview、自动化测试，能够一定程度减少出错概率。项目发展过程中的技术债，要得到有效管理。不可一味堆叠需求而忽视技术基建。
减少维护成本 在项目上线的维护过程中，也需要留意维护的成本。开发代码过程中，将错误有效暴露。同时进行链路上的故障演习，合理安排兜底策略，将有效减少维护成本。
投资团队成长 从长远来看，每个人都不可能单兵作战取得巨大的成功，我们需要团队。投资团队成长方面，首先是帮助其他人成功。这可以通过分享自己的经验，写下高质量的文档实现。也可通过CodeReview实现。另一方面，招聘是团队内每个人的责任。招聘高质量的同事，在入职培训和指导方面下功夫，也将获得极大的回报。
关于作者</description>
    </item>
    
    <item>
      <title>思维导图｜《The Effective Enginner》</title>
      <link>https://kuhung.me/2021/the-effective-engineer/</link>
      <pubDate>Sun, 08 Aug 2021 00:22:36 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/the-effective-engineer/</guid>
      <description>关于作者</description>
    </item>
    
    <item>
      <title>如何理解战略</title>
      <link>https://kuhung.me/2021/strategy-01/</link>
      <pubDate>Sun, 01 Aug 2021 22:56:45 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/strategy-01/</guid>
      <description>“战术勤奋战略懒惰”中的战略是什么 相信大家都听过：战略上的懒惰，不能通过战术的勤奋弥补。在学习中，我们将这句话理解为：学习需要方法，不能蛮干，需要理解基础知识，进行结构化的理解和吸收，这就是所谓的学习上的战略。在工作中，我们将这句话理解为：工作需要找准聚焦，不能用低效的加班内卷来堆砌苦劳，而是应该找到业务的需求点，从目标出发进行工作内容的拆解，这就是所谓的工作上的战略。
可是，战略的本质又是什么呢？到底什么才是战略，什么是好的战略？大家都在说战略，战略就没有缺点了吗？
今天我们就通过《战略历程》这本书，拆解战略的本质，通过这篇内容，帮助你理解战略。
战略是大象 没有人能准确定义战略，因为战略的本身，就是一个抽象概念，是对生活的抽象总结。战略就像是盲人摸象中的大象，而我们则是那些盲人，通过不同的接触面，会得到不一样的战略描述。战略总结，是片面的。
当然，在很多商学院中，他们会有如下的战略概括：战略是企业为了获取与组织目标以及使命相契合的经营成果而制定的高层管理计划。从这句话，我们可以理解到如下要点：1. 战略是为了达到经营目标的计划。2. 战略是高层的计划。3. 这些计划要与目标使命契合。
管理思想 在前面我们提到，战略的本质是高层的计划，也就是说是高层的管理范式。对于明茨伯格而言，他对此有其独特的理解。
从派系角度，是更强调经验、实证和归纳的英美学派。不同于强调理性、推理和演绎的大陆学派。
从倾向角度，不同于强调管理层权力、崇拜CEO和管理层超人能力的保守倾向，更重视平等、参与和互动的进步倾向。
从实践和学院角度来说，更强调理论和实践良性结合的实践学派，而非消防自然科学的学院派。
管理思想核心 从明茨伯格角度，管理的本质是尊重、平等、信任、合作与分享。不是整人，更不是把人当作机器来控制，也不是把人当作羊群来驱赶或驾驭。
战略的十个学派 事实上，根据我们所观察的角度不同，战略可划分为十个学派。它们从不同侧面，描述了战略的面貌。
就设计派而言，战略是一个孕育的过程。强调匹配、强调独特竞争力的分析，SWOT法则将是你在这个派系中听得最多的。计划学派，是一个程序化过程。就如名字所言，战略是计划出来的：通过规划，设定预算进行相关准备。这一学派常被咨询机构拥护。定位学派，战略是一个分析过程。通过分析得到组织的定位，用事实说话。企业家学派，是一个构建愿景的过程。在这一学派，更崇尚企业家的个人人格魅力。需要企业家的大胆举措，来达成经营目标。认知学派，战略是一个心智过程。通过框架和解释来认知组织发展。这一学派，多被心理学爱好者支持。
学习学派，则是一个涌现过程。失败乃成功之母，该学派强调渐进式发展，通过学习去构建意义，利用精英的核心能力，实现战略。权力学派，认为战略是一个协商过程。在这个过程中，组织内政治气氛浓厚，联合利益相关者，达到集体战略。文化学派，战略是一个集体思维的过程。通过价值观、信仰来引导人们做出正确决策。环境学派认为，战略是一个适应过程。是一个组织适应环境的过程。而结构学派，则是从系统角度出发，认为战略是一个变革过程，是上溯战略学派的综合过程。
战略的利弊 凡事有利必有弊，战略也不例外。从四个角度，我们来看看战略的利弊。
从设定方向角度，战略为组织设定了航线，大家能够齐心协力达到目标。但其缺点就是，会掩盖潜在的危险。从集合力量角度，战略让组织内的行动更协调。但过份一致的思维，很有可能会让组织丧失洞察。
战略决定了组织风格，方便了人们理解并和其他组织区分。它的负面效果就是，过份清晰界定组织，组织的多样性将会丧失。从提供一致性角度来说，战略减少了组织的模糊和无序。其缺点则是，追求一致导致了狭隘，甚至扭曲了事实。
小结 战略是一头大象，我们往往只能看到其局部。但只有当我们从整体来看时，才会发现整体大于部分之和。可能你的组织正表现出某一类战略，但了解更广的面貌，总是更有助于发挥战略的作用。也别忘了，凡事需要有个度，过份一致的战略，反而会带来多样性丧失、灵活性丧失的风险。为此，还是需要缓慢移动，小心评估。</description>
    </item>
    
    <item>
      <title>奈飞工作法</title>
      <link>https://kuhung.me/2021/netflix-culture-01/</link>
      <pubDate>Mon, 12 Jul 2021 23:12:34 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/netflix-culture-01/</guid>
      <description>红线可有可无文化 之前互联网有个段子，叫做：低P（职级）碰红线，低P没了；高P碰红线，红线没了。大致描述某电商公司的月饼事件、高P替考事件以及总裁出轨事件。这种说法，虽然是大众编的段子，但也折射出该公司的真实文化与标榜文化的背离。
在这类公司里，价值观成了上级约束下级、驱使下级讨好自己，以及内部斗争的工具。
组织管理大师沙因曾经提出一种观念，用文化管理组织。而今我们也发现，不同的公司文化，开始有了不一样的经营现状。我们就以8年前就公开组织管理秘籍，且在这些年仍继续成长的奈飞作为剖析对象，看看这样的企业文化，有何不同。
奈飞背景介绍 由于种种原因，国内对于奈飞的接触机会较少。实际上他们是目前全球最大的流媒体提供方，出品了多部精彩的剧集，《纸牌屋》就出自他们之手，并且当下仍然保持着不错的创意生产力和资本回报率。奈飞文化和传统的控制文化呈现两个极端，有一定的思考意义。
奈飞文化核心 奈飞文化的核心是两个词，自由与责任。自由体现在你可以做很多你想做的事：你可以公开和CEO辩论，你可以随时休假而不用审批，你可以提出很多点子很不会被视为傻瓜。而责任，则是说，奈飞不会过多控制你，所以你得自己担负起责任，自己去做事情的owner，承担起更大范围的责任。
奈飞文化的先决条件 为了达到这些要求，是有很多先决条件的。也不是说随便一个公司，在企业文化手册里写下自由和责任两个字，这家企业便成为了奈飞一样的公司。
高人才密度 首先，它需要足够高的人才密度。在周围都是优秀同事的前提下，给予充分的自由，同时也信任他们，能做出自己的、有利于更大范围的决策。
坦诚 接着，要求公司内的每个人都坦诚。这个词我在字节的企业文化里也有听过。坦诚，意味着袒露自己的真实想法，积极地去表达想法。这种文化，鼓励了更大范围的信息传播，减少了信息孤岛的存在。同时也让办公室政治无处遁形（虽然还是会有，但没那么严重）。
取消不必要的流程 然后是取消了很多不必要的流程。取消休假审批、需要差旅审批，这也是基于对人的基本信任。虽然我们知道，多少会有钻空子的存在，但他们认为与其为了防范钻空子的人所带来的整体效能下降，不如放开这个流程。这一思想同样应用于绩效回顾。奈飞中不存在绩效回顾，取而代之的则是员工留任测试。组织认为花大量的时间去评估和改进绩效，却未能实际地提高效能，那么这个流程就是不必要的。
奈飞文化的进阶条件 更进一步，为了达到上面的先决条件，比如高人才密度、坦诚、积极地表达真实想法，奈飞从管理视角提出了下面三点。
行业内最高薪酬 第一，支付行业内最高薪酬，以此来吸引高水平员工。在有了高水平员工之后，用他们去吸引类似特质的人。组织就在这个过程中，不断提高人才密度。
开卷管理 第二个是开卷管理。奈飞认为，每个员工都有必要了解公司、部门、团队当下发生了什么。他们会将公司的经营状况同步给员工，以此来培养员工的企业家视角。
分散决策 第三个是分散决策。不同于传统组织逐级审批决策的方式，奈飞将决策权下放基层，让每一个了解第一线实际情况的人自主裁决。这样做有两个好处，一个是传统逐级汇报到高层的决策方式，过程中一定有信息的折损以及时间成本；另一个是员工自己做的决策，他们将更有动力去实现自我许诺的事，这也让员工更有主人翁意识。
巩固奈飞文化 为了巩固以上文化，奈飞还采取了一些措施。
留任测试 没有绩效评估不代表每个人可以躺平过日子，奈飞采用的是留任测试。简单来说，如果当下有个人比你更适合目前岗位，则会毫不犹豫替换掉你，以此来促进人才流动。这一点很像是职业球队，如果你在场上表现不佳，则会用其他人替补掉你。而在公司层面，就是开除掉你（当然奈飞有补偿金）。
高效反馈 然后是反馈。奈飞内部寻求各式各样的反馈（但并非361绩效排名这种）。他们更乐意的是当面的反馈，及时的反馈，不唯上取悦老板的反馈，以及360度的全方面反馈。这种做法，减少了办公室政治，同时也让表现稍微不及预期的同事，能有及时修正的机会。
情景管理取代控制管理 最后一点是情景管理取代控制管理。这是我觉得比较新颖的观点。日常我们比较常见的是：领导拍板的控制型管理。领导会给你设定目标，进行核心决策，而你负责执行，并在规定时间节点交付结果。即使有自由度，也不过是规定流程内的自由度。最后，按实现的效果，进行绩效考核。而情景管理则把这些都交给了员工。透明各种信息，明确不同场景或情景，给组织、个人带来的不同结果，阐明动机和期望，剩下的全部交给员工自己处理。
奈飞文化小结 以上，就是奈飞文化的核心内容。有些人看完之后会觉得羡慕，因为自己处于另一类文化氛围的公司之中：事无巨细的微操管理，自上而下的决策环境。同事间互相提防，上下级玩权谋斗争。没有到点下班的自由，反而是各类不合理的KPI绩效考核。劣币驱除良币，老白兔员工扎堆。
很不巧，上面这些我有个朋友曾体验过。这也是我形成疑惑并在寻找另类文化的动机。
不知道你是否有同样的感受。看到此处的同学，如果国内有类似奈飞文化的公司，你会如何做决策？</description>
    </item>
    
    <item>
      <title>扁平化团队背后的危机</title>
      <link>https://kuhung.me/2021/the-tyranny-of-structurelessness/</link>
      <pubDate>Fri, 09 Jul 2021 09:07:13 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/the-tyranny-of-structurelessness/</guid>
      <description>越来越多的扁平化 越来越多的公司开始宣称他们是扁平化团队。扁平化就是字面意思：整个组织的架构很宽，而纵深很窄。基层员工到组织领袖，可能只有3层。扁平化的概念，是相对于层级分明的大型组织而言的，同时它也是较小组织吸引人才的一个关键。背后隐藏着基本假设：富有创意和才华的年轻人，很难忍受传统大型架构组织的官僚。组织需要更扁的层级，以加快信息的流通和促进决策的有效性。
扁平化背后的独裁 现实生活中，管理的扁平化大多出现在小公司，当公司逐渐成长后，扁平化也将暴露一些问题。在这篇文章中，我们将其称为扁平化背后的独裁。本篇的思想框架主要来源于文章《The Tyranny of Structurelessness》。该文章阐述了上世纪70年代，伴随着女性权力运动，无架构组织中出现的一些问题。我们今天将其带入公司管理视角，逐条分析扁平化背后的问题，以探寻可能的解决方案，以及尝试着去思考：作为扁平化团队的一员，如何规避其负面效果，最大化扁平组织架构的作用。
无架构组织的出现 在当时，无架构、扁平化起源于女性对男性主导的社会权力结构的反抗。传统的组织中，多级架构存在于组织内。而当时的运动想摆脱这一点，于是提出了无架构（后文又叫做扁平化）的主张。当然扁平化不是完全无架构，但可以将无架构看成扁平化的特例，即只有1-2层组织。在这样的组织架构中，人们通过非正式会议达成共识。
不过这样的理想，却充斥着精英主义和排他性，即需要高度精英化的人才才能完成组织的基本运转，同时由于没有明显的架构，各自为战的小团体十分普遍，团队多样性缺失。
架构的天然性是无架构的阻碍 无架构的理想很丰满，可现实却很骨感。架构存在于人类社会的方方面面。一旦存在着资源的分配，不同的人受限于个人经历与价值观，势必有不同的主张取向，这些分歧将导致小团体的产生，进一步产生组织架构。与此同时，无架构也是极具欺骗性的。因为首先，发起这个主张的人一定是最有权力的，这样他才能发起和推动无架构。
无架构下的决策模糊 同时，由于没有明确的组织架构，也就意味着决策规则的模糊。决策规则集中在少数人手里，而圈子外或者不知道规则的人，则将处于困顿状态。这种信息不透明，会在无架构组织内产生割裂。而从其他渠道获取的小道信息极可能存在偏差，这进一步加深了误解。
组织的成败取决于精英的水平 在上面的决策过程中，我们可以发现拥有规则的少数人，能对其余人施加权力。这些人也被叫做精英（elite）。也就是说，整个组织能否做出有效的决策，极大程度依靠这群精英的综合实力水平。
精英圈子的对立特性 这样被寄予厚望的精英圈子，却会表现出两个彼此对立的特性。对于内部，他们彼此倾听、相互让步。但到了外部，他们会忽视甚至是会同外部意见相对抗。当团体内产生两个及以上的社群朋友关系，即产生了派系。对于其他未明确加入派系的人，这些派系的人将相互竞争吸纳剩余人；但也有可能由于排他性的存在，拒绝新人加入。
无架构组织的管理无能 无架构团体起作用是需要前提的，如果没能充分评估好前提，则容易导致管理无能。无能的具体表现在于以下方面。团体内结党营私，形成各类小团体小圈层。由于精英主义的排他性，会导致孤立的广泛存在。在没有明确任务的情况下，产生内耗：一部分群体，会尝试着去控制另一部分群体。
提升管理无能的四个前提举措 如果想减轻无架构的负面作用，原文提出了如下四点举措。
任务导向，保证每个人都有各自的任务，不至于任务模糊开始内耗。 团队尽可能的小，同质化高。这样的情况下，组织内成员才更可能理解彼此。 高度沟通，让组织内每一个成员，都能充分理解规则和决策的逻辑。 所需的技能非高度专一，每个人都有替代的可能性。以避免出现资源与话语权垄断的情形。 扁平化团队的责任人迷思 扁平化组织中，很多人常遇到的疑惑是：这件事谁在负责？
由于组织未明确设立发言人和统筹者，很难定义一个明确的负责人。这对于从控制型、强结构型组织过来的人来说，会产生组织混乱低效的感觉。
在事情推进的过程中，某些成员将主动或被动地成为发言人。不过这样的发言人，很可能受到组织内其他成员的排挤。因为没有正式任命，其他人可能会产生嫉妒心理。更糟糕的是发言人的地位，组织无法取消。这就导致扁平化团队虽然在自发形成负责人，却无法控制或保证这些发言人的利益诉求和组织一致。
扁平化的潜台词与积极意义 回到我们当下的组织中来，越来越多的公司对外宣称扁平化。在沟通层面，这降低了官僚主义的可能。不过在个人发展层面，也模糊了成员成长的空间。即意味着晋升的模糊性。
可反过来也不一定是对的。如果你想要一个初创企业死得更快，那就在其中设立多级领导。换灯泡的故事不知道大家听过没。某间房间需要更换灯泡，在数十位领导审批通后，又被几位领导围观，公司仅有的业务人员老李终于有机会换下了灯泡。而这，离小李发现灯泡坏了已经过去了好几个月。
从无架构中反思 从无架构的组织反思，我们会发现其核心问题有三点：小圈层、精英主义、以及明星体制。由于没有明确的组织架构，人们根据喜好或行为被划分进入更小的圈层。如果刚好这个圈层掌握了决策信息，则形成了精英主义。组织决策的质量依赖于精英的综合实力。当这个圈层的决策信息模糊时，则迫切需要英雄主义式的明星员工站出来，承担决策和推进的角色。
人力资源视角 我们可以通过一些人力资源的策略，来最小化其负面作用。就小圈层而言，其实就算是正式的架构组织，也会存在。真正致命的是，组织的使命与业务所仰仗的精英或明星员工，他们的能力决定了组织的决策走向。为了达到更好的决策效果，这就要求人员水平要足够高。不仅仅是要契合当下的业务，也需要面向未来，吸引并补充更高水准的员工。
从企业文化角度，也要鼓励信息的高频同步，鼓励坦诚清晰、有话直说，以此来保证反馈的有效性。通过这种方式，加快组织内信息的流动，使高水平员工做出的决策能基于更大的面貌。再一个，引入hrbp和pmo，做一个信息沟通桥梁与项目推进的作用，来实现发言与统筹的角色。
个体成员角度 这其实一度是我的疑惑，也是我写下本文的动机。目前通过涉猎更多的资料，以及和团队内的成员沟通，找到了一些可能的答案。
首先第一个，解放自主性。在扁平化团队中，不会有过去阶级化组织中常见的命令式需求。也就是说，你的需求很可能需要自己去寻找。这点更类似于学习型组织，没有固定的流程与制度来控制每个人，而是希望每个人能自适应组织的需求。不仅是需求需要自己去沟通，在某些没有发言人的场合下，也应勇敢站出来，承担发言人角色。在扁平化组织内，职级头衔已经没有意义。推动某事的力量，在于基于事实的推演，而非职级。
其次第二个，充分沟通，寻求及时的反馈。在扁平化组织里，没有绝对的上下级，也没有官高一级压死人的情况。就像上面所说，扁平化的初衷就是加快决策速度，放权基层决策。在这种情况下，则更应该积极去沟通，努力打破小圈层现象，去寻求业务方或是客户的及时反馈。这点，也是践行公司文化的过程。有话直说，以理服人。
第三个，让自己成为明天的更高水平员工。正如前面所说，组织的决策有效性，取决于每一个员工的综合水平。作为今天的我，可能适合今天的决策环境，但高速发展之下，还一定胜任吗？这就要求我们，以开放的心态，去努力成为明天的高水平员工。不仅专业技能和业务理解能力需持续磨练加强，综合能力中的沟通能力、共情能力以及影响并激励他人的能力，这些都需要为明天做好准备。
总结 在本文中，我们探讨了扁平化组织中的常见问题：小圈层、精英化以及明星体制。这些问题若处理不好，则很大程度影响扁平化的决策效果。为此我们需要面向未来招聘高水准的员工，强化组织内的沟通和信息流动机制。作为个人，为了更好适应组织，则需要解放自身能动性、对于遇见的困惑，做到有话直说，坦诚清晰。面向未来，培养自身技能。</description>
    </item>
    
    <item>
      <title>五年十个财务瞬间｜02 如何在2021年最短时间亏钱</title>
      <link>https://kuhung.me/2021/ten-financial-moments-in-five-years-2/</link>
      <pubDate>Wed, 07 Jul 2021 22:56:03 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/ten-financial-moments-in-five-years-2/</guid>
      <description>概述 预计耗时 预计发布 实际发布 最后一次修改 财务总结第二篇 我这半年是怎么亏钱的 宏观与微观情况 距离上篇财务总结，已经过去了整整半年。这半年，可以说是在亏钱中度过的。股市春节后给了一个意外的套路，机构抱团结束，纷纷争相离场，带来股市、基金的大幅下挫。与此同时，房地产却不再横盘，上海的二手交易价格创出新高；重庆的土拍价格也新高。在临近写这篇文章的6-7月，多重利空加在中概股上，国内的A股，之前一直广受市场追捧的白马股，也一蹶不振。虽然前期持仓比例不高，但这半年也跌掉了过去好几年的收益；算上融资的成本或者是买房的机会成本，整体亏损20%。
资金分配方面，主要还是分为三大类。一类储蓄、一类投资，最后一类杠杆。当下时间切片，储蓄比例约占13%，基金比例约为33%，A股和数字货币比例为16%，港美股比例约为59%。总体杠杆率约为20%，杠杆融资成本约为5%。
半年策略回顾 接着回顾一下这半年的策略。在第一次回顾报告中，我们设定的比例为储蓄+黄金+数字货币的比例约为20%，本期来看基本达到这个水平；基金比例为25%，目前来看略微超过这个比例8%。其中的原因大致有两个：一是基金那边不完全是买入的基金，还有部分每月自动划拨的现金。第二个则是，股票类资产亏得比例比基金多，因此整体拉高了基金的权重。港美股的杠杆率未到预期的30%，不过也快接近了。之前是因为在上杠杆方面比较保守，但后来对比了商业房贷的5+点位，评估下觉得其实也还好。
四类策略回顾 策略方面，主要分为4类。
轮动策略 第一个是轮动，或者又叫资产配置。大致的意思就是，将钱按比例配置在不同形式的资产上。比如房地产、债券、基金或是股票。轮动策略要求，每隔一段时间（大于半年），根据不同资产的自然权重变化，做一个权重的再平衡。在某些资产高位时卖出，转入低位的资产。该策略有一个假设：资产价格总是在起伏中均值回归。即高的会变低，低的会变高。另一个是要求我们不要频繁去控制仓位，频繁的调整，实际上还是交易所和券商挣了大头。
定投策略 另一个策略是定投。这里也不局限于支付宝里的基金，而是说将投资自动化。举个例子，工资发放的第一天，我会将其分为若干个等分，将其转入对应的账户，并设置时间点提醒，进行买入操作，以此来自动化我们理财行为，也防止自己过度、即兴超额消费。这样的技巧也无需多说，进入支付宝这类理财产品，他们就会教育用户其中的好处。不过这里在定投基金方面，还是得关注该基金的手续费，除非别的券商不可替代，则尽量选择费率更低的。
风险对冲 风险对冲，这个概念听着很厉害，但其实也是我的第三个策略。比如基于对地产价格上涨的预期，我会买入一部分地产股，以对冲其上涨带来的我付出更多成本的风险。第二个则是健康保险类，自身有生病的风险，则选择去买入一些保险、医疗的股票，进行对冲。以及从事行业的风险对冲。虽然目前待的公司势头也很好，我也看好其未来，但为了对冲竞争对手做得更好的可能，我也买入了部分头部游戏公司的股票，作为对冲。
体验为王 第四个策略则更多的含有主观意图。像第一次提到的那样，由于主观判断，在较底位买入了海底捞，虽然其上半年表现不如预期且产生了下跌，但也带来了20%左右的账面收益。另外的像美团、快手，买入他们也是因为自己或身边人喜欢用它产生路径依赖，加上自己又是互联网行业的，多少了解其商业模型，所以选择了逢低买入一小部分。
以上策略的效果，你要说他有吧，但事实则是账面整体亏损了20%以上，你要说它没有吧，可能还真是这样，也就图一乐。但分散风险、自动化理财的意识，还是很有必要培养的。
财务观念 其他方面的补充，则是来填一下上一期的坑，在上期结尾，提到了三个下期想详细展开的点。分别是分桶、轮动策略和对待意外之财的态度。不过这里面前面已经讲了两个了。
分桶 分桶其实就是第二个定投策略的某一个环节。将每月可支配收入，划分到多个桶里面去，专桶专用。零花桶就只用于零花，基金桶就用户基金定投，储蓄桶则用来储蓄转定期。这样的好处在于，不会有钱很多，所以尽管花的错觉。其实，要想让钱生钱的第一步，还是得学会控制开支。虽然现在能支配的钱比学生时代多很多倍，但实际的焦虑感也是最直接的。而轮动策略，开篇也已经介绍了，就是资产每隔一定周期的再平衡。这里不再累述。
意外之财 这就顺着就到了第三点，对待意外之财的态度。很多人在中大奖或翻出衣柜里角落的钱时，第一个态度便是当成奖金奖励自己。这个态度没错，但它本质还是收入的一部分，它不是别人的钱。随着工资水平的上涨，有些朋友的消费水平也肉眼可见追求攀上高峰，最新最时髦的统统都要，别人有的我也要，很容易就陷入消费主义的陷阱中。对待意外之财，可以适当地小放肆一把，但不可就此过度拔高消费水平，造成留下来能进行投资再生产的钱不变甚至变少的情况。有简入奢易，但反过来却很难。
趋势判断 接下来说说我对宏观环境的一些认知。主要是两方面，人口和楼市。其实他们也可以算是一方面，因为楼市长期还是看人口。这也就不难理解，上海为何近半年房价又又涨了。因为这里有能力的人实在太多，机会也更多，整体呈现人口净流入的现状。居者有其屋，可能在短时间还是无法达到。虽然这其中有不少投机、投资成分，以及各方既得利益体利益趋同存在，但长期而言，还是看好的。
不过全国层面，可能情形就没那么乐观。人口红利其实肉眼可感知的见顶。我们这代人作为独生政策的最大覆盖面，即使造就了所谓的“工程师红利”，但后续的年轻人，却实实在在是在减少。当然我们不能说这是阶级固化了，机会还是有的，不过还是需要胆识和自制力。当下的二手房利率上调，某种意义上是在限制其流动性。因为这东西，大家都看涨，交易热情一直不减，循环促进了房价的螺旋上升。目前来看，是想尽量卡死流动性。但这放水的一万亿，估计还是很难挡住钱流入楼市。而各方利多群体，一定也会把这个信号解读为利好。
计划迭代 最后是下一步计划，前面唠唠叨叨这么多，财富不可能啥不干就产生了，还是得配有相应的下一步计划。
提高杠杆率 第一个还是杠杆率的问题。房产交易，可以达到3-4倍的杠杆，这也是为什么很多人喜欢投资房子的原因。在大家都看涨的环境下，加上杠杆，可不就是数倍的收益。如果你没有房产，那不就还得多奋斗数年。虽然略显荒谬，但也是事实。下一步将会进一步调高杠杆率，由于目前没有上海的房票，但还是期望通过其他手段，到达50%左右的杠杆率（这可比买房动辄3-4倍的杠杆率低多了）。
补充财务知识 接着是还得补充一些财务的知识。在港股熊证交易时，能明显感觉自己就是在瞎搞。金融储备还是有提升空间。你要问我这半年干啥去了，这半年一直在探寻企业组织文化与管理的事情，这就涉及到最后一个计划了。
提升工作素养 别看我上面扯了这么多，让大伙感觉我像是个专职的投机者，其实不是的。主业还是集中在工作上，工作技能的提升、综合能力的提升，以及给公司带来真实价值后公司的回馈，还是很值得花主要精力在上面的。
总结 所以如果有朋友看到这篇文章，千万要理性看待，不要全盘照抄。将注意力集中在主业上去。投资自己、投资公司内自己的团队，带来的连续性的收益也是大大滴。在这个的同时，花些时间去实践并精进自己的财务知识，提升财商，将其作为一种组合策略，共同提升生活的品质。这将是我期望的，这篇内容的最大作用。
关于作者</description>
    </item>
    
    <item>
      <title>思维导图｜《掌控习惯》</title>
      <link>https://kuhung.me/2021/atomic-habits/</link>
      <pubDate>Mon, 05 Jul 2021 20:49:53 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/atomic-habits/</guid>
      <description>关于作者</description>
    </item>
    
    <item>
      <title>技术领导｜02 Mentoring 如何成为一个受人欢迎的mentor</title>
      <link>https://kuhung.me/2021/mentoring-vol-3/</link>
      <pubDate>Wed, 23 Jun 2021 15:56:41 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/mentoring-vol-3/</guid>
      <description>🌟 合集地址：《The Manager&amp;rsquo;s Path》中文翻译 技术路线还是管理路线 本文只少量涉及这个话题，因为导师制的指导通常与管理没有直接关系。
话虽如此，在职业生涯的某个时刻，我们大多数人都会从事某种程度的技术指导、职业指导或两者混合。
我们中的许多人也将获得指导。那么，如何使这种类型的指导富有成效？
互利的技术指导 当高级工程师指导团队中的初级工程师时，他们一起解决问题，这往往能提高后者的生产效率。
当然，高级工程师也从中获益。受指导者编写的代码质量更好，需要修改的就越少，整体开发速度也就更快。
初级工程师从指导中直接获益，并通过更资深人的视角，获得了对工作内容更充分的理解。
这种关系通常不是正式委任的，且极大可能是高级工程师的日常工作内容，它为团队带来了巨大的价值。
当你是导师 告诉你的指导对象你对他的期望。如果你希望他在会面前拟定议题以及准备好问题，明确告诉他。
明确说明你的时间投入，并诚实回应他的问题。如果相对于指导对象的 leader 或者同事，你没有明显的专业知识上的不同，那就没必要提供指导。
拒绝指导也是OK的。有时候你会觉得，有必要回应每个向你寻求帮助的人，但这没那么必要，你的时间也很宝贵。除非你认为这样做对自己和指导对象都有帮助，否则就不要这样做。
当你的 leader 要求你指导某人，但你没有时间这样做时，你可能需要给leader一些原因：例如你当前的排期紧张，近期计划休假或其他无法进行指导的原因。
无论做什么，都不要说“是”，然后实际上却无法达成。
当你是被指导者 想清楚想从这段指导关系中得到什么，并做好自己那部分的准备。
如果你没有时间准备或觉得没有必要做准备，问自己是否真的需要辅导关系。有时，我们之所以被安排导师，是因为有人认为我们应该有。
每个人的精力都是有限的，你不必为了有个导师而获得一个导师；也许你需要一个朋友或一个教练。
低估导师的时间很容易，因为你通常不花钱。所以请保持尊重，并考虑找一位有偿的专业人员来帮助你。
技术达人将是糟糕的经理 在某些场合下，无论是处于指导关系中还是处于指导关系外，你都会遇到技术达人（alpha geek）。
什么是技术达人 技术达人被认为是团队中最牛逼的工程师，他始终拥有正确的答案，并成为解决所有难题的人。
技术达人非常重视智力和技术技能，并认为这些属性决定了谁来做决策。
技术达人通常无法应付异议，并且当众人的焦点转移到别人身上，或别人的方案可能好过自己，会觉得自身的立足之本受到威胁。
他认为自己是最好的，并且只回应支持该观点的信息。
技术达人领导下的文化 技术达人试图创造卓越的文化，但最终却创造出恐惧的文化（译者表示认同）。
技术达人通常是一名出色而有效的工程师，他们进入管理的方式大致有两种：一种是熬资历进入管理层，因为他资历最长，最后成为组长、leader；一种是自认为自己是团队中最聪明的人，自己应该是经理，从而争取转向管理路线。
他倾向于打压手下人的自信心，要么通过夸大下属的错误，要么毫无预兆地重做他们的工作。有时，技术达人会为团队所做的所有工作表示赞赏，但不是以承认团队成员实力的方式。
技术达人的优点 好在，技术达人对于年轻的开发人员可能是鼓舞人心的，即使他们脾气古怪。他有所有问题的答案。
他可能在10年前就使用了某系统的最初版本，且和作者往来密切。如果你需要弄清楚发生了什么，他可以完美地解答你的疑惑。
他完全知道为什么你的某些操作不起作用，而如果不成功，他还会提醒你：他告诉过你怎么做的，只要你听他的，并按他说的做，事情就会奏效。
如果愿意，技术达人可以教给你很多知识，他们可以设计出色的系统，并且这个过程很有趣。
总的来说，技术达人非常聪明。他们有很多知识，这些知识值得团队成员去学习。许多工程师都非常尊重技术大佬，他们身上的优点一定程度上掩盖了其缺点。
技术达人的缺点 在某些糟糕的情况下，在技术达人领导的团队中，只要项目不是技术达人牵头的，他不会让任何人获得奖赏与夸赞。他们会认为自己的主意一定是最好的，而其他人的方案都是糟糕的。
技术达人认为，每个开发人员都应该知道得和他一样多。如果你不了解某些内容，他会很高兴地指出你的无知。
技术达人对于应该如何做事情非常僵化，并拒绝自己没有接触过的新想法。当人们抱怨他们构建的系统或批评他们过去的技术决策时，技术达人会感觉受到了极大威胁与侮辱。
当不得不接受自己看不上人的指导时，他们会表现得非常厌恶，且日常贬低非技术角色。
技术达人普遍存在 当工程师首次成为导师时，技术达人的习性常常开始显现。
问问自己：尽管自己拥有很强的技术能力，为什么人们似乎都没有向你寻求帮助。好好想想，你是否正在表现出上文提到的种种迹象。
你是否认为正因为自己是工程师，所以不需要言辞修饰，任何场合都可以直言不讳地表达？
你是否在急切地找茬，寻找别人的错误，不愿承认别人有一个好主意或编写了高质量的代码？
你是否认为绝对的正确比其他任何事物都重要得多，且始终值得为之奋斗？
摆脱技术达人 如果你怀疑自己是个技术达人（贬义方面），那么指导他人可能是摆脱这种习惯的好机会。
如果你将指导对象看做是一个需要接受教学和指导的人，而你的目标是以最适合他的方式帮助他，那么你就可以看到你的“进取”风格使他更难以学习。
练习指导的艺术可以帮助我们学习如何培养和教练（coach）一个人，如何更好的组织语言以便他人乐意倾听。用更好的方法，取代大声吼叫或是言语霸凌（打压控制、PUA之流）。
另一方面，如果你不愿意改变自己的风格来帮助受指导者成功，请不要主动成为一名导师！
技术达人的位置 技术达人造就了绝对糟糕的经理，除非他们能够学会放弃自己在会议室中最聪明的人和团队中技术最牛的人的身份。
具有较高技术经验的管理人员对于小型高级工程师团队是个不错的配置，但是技术达人通常最好不在管理序列，而应让他们更多地关注技术策略和系统设计。
在倾向于技术的初创公司中，你往往会看到技术达人扮演CTO的角色，他们在以执行为重点的工程作业中，都将重点放在设计和开发上。
如果你有晋升提拔的权力，请非常小心地为技术达人提供管理职位，如果这样做了，请密切关注他们对该职位的影响。 技术达人的负面文化可能对合作非常有害，并且会给处于弱势的团队其他人员长久的负面影响。
认为自己的价值来自于比其他人了解更多信息的技术达人，可能会隐藏信息以保持优势（玩信息差），而这会使团队中的每个人都失去效率。</description>
    </item>
    
    <item>
      <title>工程师如何卖轮子</title>
      <link>https://kuhung.me/2021/selling-the-wheel/</link>
      <pubDate>Tue, 25 May 2021 21:53:20 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/selling-the-wheel/</guid>
      <description>在互联网行业，常常听见人说：我有个点子，只是缺少一个程序员，就能颠覆世界。不过遗憾的是，很多组织即使有很多程序员，也未能颠覆世界。无数的点子被证明是无效的，无人买单。用户不关心、客户不掏钱。
上面是普通人的技术产品主张。作为程序员自己，是不是就没有这样的困扰了呢？我们可以做前端、可以做web端、可以开发自己的小程序，是不是就可以吸引无数忠实用户、卖个好价钱、躺平后半生了呢？如果真是这样子，那大概996和秃头就是假的、是拜登打的劳工牌了。
除了技术力，市场的敏锐度以及营销能力，也是决定成败的关键。
在日常工作中，不可避免的，程序开发也会有自己的观点主张：无论是技术方面的、还是日常决策方向的。也有人幻想着，有个赏识的伯乐，能发现自己点子的独特之处，然后悄悄”颠覆世界“。
技术同事能听出哪些点子是不现实的，同样，”伯乐“也能识别出你的技术主张的好坏。这个时候该怎么办呢，产品太超前、主张”非主流“，难道就要放弃了吗？求人不如求己。
推销是一门艺术。作为价值提供者，我们有必要做好自己的营销推广。除非，你想一直当一个工具人下去。我们希望，在合适的推销之下，产品能卖出去、技术方案能得到接纳，观点主张能得到重视。这一切，其实都不难。
近期阅读了一本名为《selling the wheel》（中文名《卖轮子》）的书，该书虚拟架空了一个埃及人卖轮子的故事。讲述从发明轮子，到销售推广，再到竞争市场的各个环节。以及对应市场下，如何构建适合的销售体系。这套方法，不仅可以用来卖产品，完全也可以整合到我们自身的日常生活中来，销售我们的观点、技术与方案。
如果你也想做好自身观点、技术和产品的宣传，那么下面的内容一定不要错过。
市场上没有一套通吃的办法。这是因为随着市场成熟度的不同，受众和他们的认知程度也不一样。但好在在不同阶段，有各自能做的事。我们以产品的发展周期为例，讲述四个时间段我们该做的事情。
一、市场早期 当市场还是蓝海之时，很少有人意识到这是个机会。客户也是同样如此，他不会觉得有你很重要。因为当你没出现时，他已经按某种模式度过了很多年。在轮子出现前，古埃及人一样可以运送货物。他们可以选择用人拉、用动物驮，甚至是用雪橇拉。为什么他们要选择你呢？
在产品的早期，往往是一些尝鲜的用户接纳它们。在四步创业中，我们也可称之为天使用户。在技术接纳生命周期中，他们是技术和产品的尝鲜者。天使用户乐于追逐新鲜事物，是你最好的销售目标。他们聪明、敢于尝鲜，敢冒险，有资本。
销售对象是最高决策者，一般是一次性买卖。如果想要卖给他们，则应该强调某些特质，而这些正是他们所追逐的：领先于人的机会和洞察，一个更高效的、更美好的未来。对于销售者，则是需要极强的人格魅力。相信产品，用华丽的演示征服他人。
新技术、新产品、新观念 这一阶段，是我们最常遇到的阶段，特别是进入新公司和新项目中时。技术人员在公司内拥有较为时髦的技术，知道当下技术发展的潮流。也因为掌握技术，能较为轻易的了解到最新潮的观念。以数据挖掘为例，我们有很多模型方法，已经在顶刊、比赛甚至是其它公司的业务场景中得到应用。
在公司内进行推广时，往往不会一帆风顺。因为当你没出现时，业务方已经熟练的用其它方法解决了问题，尽管它可能没你的好。
这个时候，同上面一样，我们要去识别公司内的那些天使客户，将技术的前景销售给他们，打开应用市场。该阶段，我们常常是单兵作战，将我们的方案推销给有决策权、聪明且有冒险精神的业务方。推销一种概念，而不是一种产品或服务。以理性阐释购买，以情感卖出产品。
二、市场发育 渐渐地，天使用户口碑传播了你的产品（只要你的产品值得他向朋友推荐）。越来越多的用户开始使用你的产品，他们会拿来做不同的用途，甚至有些超乎你意料。轮子是好的交通工具，但同时，两个石头轮子叠在一起，他也可以拿来做磨坊，高效地碾碎玉米。产品被越来越多的高层技术人员使用。他们不再是单一的拿来应用，而是借助产品，实现他们的整体目标。
所以，单纯的轮子已经不够用了。金字塔的建造工程师希望我们给到完成的方案，能够支持他们建设金字塔的工作。我们不再是仅仅销售轮子，更是在于轮子的安装、使用、保养等专业性知识。我们的销售对象，也不再局限于直接最高决策者，而是所有影响决策的人，与团队合作。我们销售的是整体解决方案，而不再是单一的产品，客户需要一整套方案，帮助他们实现美好目标。
在这种背景下，常常需要一个团队来支持。提供产品的售后、服务以及培训等事宜。销售周期也更长。我们就像是向导，不仅需要告诉客户目标在哪里，还要引导和带领他们。销售产品的同时，培训客户，构建良好的合作伙伴关系。
全套解决方案 在公司内也是如此，当我们的方案被更多人接纳时，将会出现不一样的需求和用户。有的可能只是单纯的需要个分类工具，有的开始拿你的产品或技术做其它的事情。我们不再是单打独斗，常常需要一个小团队一起工作，帮助业务方完成整体目标。
这个阶段，业务方需要的也不是单一的技术或工具，他们希望你去培训他们掌握该项技能、或是能提供长久的维护。所以，尽量提供更多的支持，帮助业务方实现共同目标。从目标出发，落地到对方的业务价值，能帮助你做出正确的决策。提供适当指引和培训，构建良好的合作关系，是当下阶段的重点。
这个阶段最大风险是花费资源做没有被接受的技术。为了减少风险，应当适当地多同步进展，寻求业务方的反馈，根据反馈及时进行资源调整。
三、市场竞争 产品是打开了销路，但不可避免的，你会和其它产品产生替代性冲突。更甚至，市面上开始出现仿冒的产品。轮子开始出现木制、出现条幅。他们更灵活、更便宜，技术不再是唯一的壁垒。大家也逐渐熟悉了有你的日子，但不同产品间仍有细微差别。这个时候，你的销售对象，应该是稳定的采购单位。他们在各大组织和机构中，你们在之前应该已经建立了稳固的合作关系。
客户开始有了其它需要满足的诉求，产品在这个阶段开始出现定制化。我们如同建设者，为我们最核心的客户，提供最优质的服务。尽管在第一阶段，天使客户也有可能提出他的各种想法，但真正值得响应的，却是这个阶段。因为在初期阶段，满足少量的额外需求，很可能带来频繁的调整以至于产品走向错误。一般客户只获得一般服务。
这个阶段，产品销售的周期大幅度拉长。产品开始同质化、价格战开始出现，利润下降。树立自己的品牌、扩大生产规模，是维持利润的两种手段。有些市场你已经撼动不了，短时间插足不了。但记得保持关注，竞争对手犯错之时，就是你最好的机会。
定制服务与品牌传播 在公司一段时间之后，只要你平稳度过前面两个阶段，大概率也会到这个阶段。你的技术方案、你的产品很可能同别的团队产生可替代性竞争。同时也被越来越多的人员和团队使用。
这个阶段，我们得针对需求方，提供定制化服务。通过评估核心重要程度和ROI，去满足他们的定制化需求。
树立团队口碑，扩大影响力，是获得需求的来源之一。压缩成本和工期，一味迎合所有业务方，是失败的快速通道。**你的团队伙伴，是你的重要资产和坚实靠山。**对于一些暂时无法接入的业务，维护好和客户的关系，等待机会即可。
四、市场支配 最后阶段，即是红海市场。这也属我们所接触的民用消费市场最典型。产品出现同一标准，轮子有了半径、材质、使用寿命等要求。顾客不再像早期顾客，犹豫徘徊。他们很快做出决策，而他们所依赖的，则是品牌和服务。
这个阶段，利润被进一步摊薄。产品的品牌和服务成为了竞争的主要手段。促销开始越来越常见，连锁经验、标准化服务成为标配。
由销售leader领导的销售团队，提供细致的售前和售后服务。进行充分技术培训，激发员工热情，能妥善应对突发事件。
个人品牌与综合素质 如果你的公司不是toB业务，那么较小概率会到这一步。对于平台、中台类项目，更多的还是在上一步。如果你在此类公司，那么标准化服务可能是你重点关注的东西。
但是换个角度，如果我们抽离产品和公司的框架，我们的观点和主张所处的环境，难道不是在充分竞争的市场中吗？普世价值和道德选择，都有基本的标准。沟通的对象很快做出决策，依赖你的声誉和给人的感受。
过硬的专业素质，热情，同理心，以及移情的能力，就是你的标准化服务。你的个人品牌和综合素质，成为你的竞争利器。
总结 产品阶段组合 以上四种方式可以组合。
1+2 适合小而灵活的创业公司，技术进步，创业不歇。
2+3 能带来高利润增长。新兴技术被发掘，被改善，然后再批量投入市场。
3+4 则是市场支配地位的公司做的事情，缓慢、稳定可预见的增长。通过兼并获得新技术。
一般而言，前者的利润是后者的两倍。
个人营销三部曲 把大象放进冰箱，需要三步。如何推销你的产品、技术与方案，同样也是三步。
判断所处环境
锁定目标客户
提供对应销售方法
掌握以上方法，推销你的观点、技术与产品，将没那么难。
Tips：
营销六问
谁是我们的客户？
谁是我们的竞争对手？
客户为什么需要我们的产品？
什么促使他们更愿意从我们这里购买？
为什么他们愿意从竞争对手处购买？
我们应提供哪些增值服务以达成交易？</description>
    </item>
    
    <item>
      <title>技术领导｜02 Mentoring 如何指导新人</title>
      <link>https://kuhung.me/2021/mentoring-vol-2/</link>
      <pubDate>Sun, 23 May 2021 15:56:41 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/mentoring-vol-2/</guid>
      <description>🌟 合集地址：《The Manager&amp;rsquo;s Path》中文翻译 指导新员工 个人经历 糟糕体验 我（原文作者）大学毕业后的第一份工作，是在太阳微系统公司（Sun Microsystems），开发一个已经开发数年的项目。
经理带我到办公室，让我自己弄清楚需要做什么。我不知道该如何寻求帮助，而且我担心：自己这样做会被视为傻瓜。
所以不出意外的，我感到灰心丧气。而在灰心之余，最好的办法就是去读研究生。所以我做了。
这次大不相同 研究生毕业后的第一份工作，和之前大不相同。我没有被带到办公桌旁呆着，而是给我安排了一位导师。
他鼓励我问问题。我们进行了一些结对编程，以便我可以熟悉代码以及该项目的测试流程。
在几天之内我熟悉了工作流程，并且在工作的最初几个月时间，学到了比在上段工作多多了的知识。
这几乎得归功于刚开始时得到的指导。
指导至关重要 指导新员工至关重要。
指导新人的工作包括入职，帮助此人有效地适应公司的生活，并建立你和他在公司中的人际网。
这是你一个机会，以崭新的视角看待公司和团队。还记得第一个项目是如何完成的吗，有哪些流程和规则让你感觉意外？
提供观察隐晦规则的机会 例如，新人手册中休假政策，但这可能只是表象。有些写得很明白：重大节庆的当周不能休假，因为你从事电子商务，这对企业来说是重要的一周。
而有些没写下来的东西，可能也很重要。例如：在寻求他人帮助之前，自己大约需要探索多长时间。
许多流程，文化和专业术语太过自然，以至于你可能不会意识新人很难理解它们。注意这些事项使你有机会进行澄清。
没摆在明面的规则不仅会使新人难以融入，还会使你的指导工作更难做。因此，请充分利用这次机会，审视组织和团队。
好的入职文档 高效的团队向新员工提供好的新手文档。
对于新员工来说，如何快速上手而又不会遭遇很强的挫败感，对他们至关重要。这些文件应不断修改以适应工作内容本身的变化。
通过帮助新人熟悉文档，并让他修改文档中的过时内容，这会向他传达一种信息：他有能力和义务去学习，并为团队分享他所学到的东西。
创造连结 指导的另一个积极意义在于：帮助新人融入周围。
公司内到处都是可以快速传播知识和讯息的网络。将新人带入某些网络将有助于他加快适应。
长时间待在同一家公司（尤其是大公司）的人们，很大程度上通过非正式网络找到内部合作的机会。
你的指导对象可能在你感兴趣的社团中，或者你可能想将他拉到另一个群聊中。
重视社交网络 即使你对管理完全不感兴趣，也应该重视人际与社交。
在大公司内，横跨多个团队，如果没有值得信任的社交圈来共享信息和想法，想推动一件事将会十分困难。
办公室是在人及其互动的基础上建立的，这些互动（社交）构成了任何职业的基础，无论是做管理还是做技术。
你可能是一个内向的人，或者一个不擅长社交的人，但是去结识新朋友并帮助他们成功，这种有意的选择，终将带来积极的回馈。
你对此的态度将决定成功或失败。不妨这样想：构建良好的人际关系网，是一项值得投入时间和精力的投资行为。
给导师的leader的建议 测量什么，才可以改善什么。作为leader，你可以通过制定清晰、有针对性、可衡量的目标来帮助你的团队取得成功。
找出衡量目标 很多时候，这种智慧很难被运用到导师分配过程中，但是却不得不常这样做。
当你需要为新员工或实习生分配一名指导者时，请找出通过建立关系所希望实现的目标。
然后，找到可以帮助实现这些目标的人。
为什么要建立指导关系 首先，首先弄清楚为什么要建立这种指导关系。在之前讨论的两个案例中，导师关系的存在是为了一个非常特定的目的：帮助团队中的新人，无论是全职新员工还是只待几个月的实习生，帮助他们跟上步伐，富有成效。
当然，这些并不是公司内所有的指导关系。有时，人们会设立培训课程，帮助初级人员与外部的高级人员建立关系，以促进职业或技能的发展。这件事的出发点很好，但除了将人们拉在一起之外，通常不会给导师和受指导者带来任何收获。
如果导师因太忙而无法在此项目上花费任何时间，那么这位导师很可能就不是合适的导师。如果受指导者不知道如何寻求帮助或如何处理指导关系，这会让他感觉自己被强迫参与了这么一个项目，是在浪费双方的时间。
因此，如果你的公司要在新员工和实习生之外建立指导关系，在推进该方案之前，请确保该计划具有一定的指导效果和流程规范。
指导者承担了额外责任 其次要认识到这是导师的本职工作外的事情。如果导师做得好，在指导期间他的生产效率可能会降低。如果你的工程师参与了对时间敏感的项目，那么你可能不希望要求他同时进行指导。寻找一个你认为可以胜任此职位，想要在编码之外做些其他事情的人。
常见的指导上的误区包括：将指导视为意义不大的“情感劳动”。假设指定的导师一定“喜欢”这份指导工作，从而错过了观察团队中潜力人员的机会。
就像之前说过的那样，为之做好计划，并为导师预留充分的时间。
指导的宏观价值 你已在建立这种导师关系上进行了投资，无论是花费数千美元、大量时间在招聘上，还是在协调导师计划上精力的开销。
指导是一项耗时的工作，值得继续进行投资直至取得成果。并且还可通过改善员工关系，缩短新人上手时间和提高实习生留任率等形式获得可观的回报。
导师的匹配度 导师不必为了指导而指导，你不应指望女性仅指导女性，男人仅指导男性，以此类推。
指导计划中涉及很多内容。在考虑建立导师关系时，除非导师计划的目标就是多元化，否则请为人们提供适合其情况的最佳导师。
培训未来领导者 最后，利用这个机会来培训团队中的未来领导者。如你所知，领导力要求人与人之间存在良性的互动。在指导过程中，培养他们的耐心和同理心。
精明，内向的开发人员可能永远都不想做管理，但是鼓励他们参与指导有助于他们建立更强的外部视野，更不用说这也在拓展他们的社交圈。
对话 CTO Q：
我所在的公司曾多次询问我们是否雇用实习生。我们过去没有，但现在想开始这样做以扩大我们的招聘人数。怎么看这个问题？
A：</description>
    </item>
    
    <item>
      <title>技术领导｜02 Mentoring 如何指导实习生</title>
      <link>https://kuhung.me/2021/mentoring-vol-1/</link>
      <pubDate>Fri, 23 Apr 2021 15:56:41 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/mentoring-vol-1/</guid>
      <description>🌟 合集地址：《The Manager&amp;rsquo;s Path》中文翻译 许多人的第一次管理，往往不是正式委任的，而是指导性的工作。
导师制度的价值 导师制度 导师通常被分配给团队中的初级成员，例如应届生或实习生。许多组织，在新员工的入职过程中也使用导师。
导师是谁 有时，导师是团队中的另一位初级同学。可能他自己也只参加工作一两年，可以轻易地与新人建立联系。
导师有时是高级工程师。除了可以帮助新员工加快熟悉工作流程外，还可以充当技术导师。
导师制度作用 在一个健康的组织中，入职指导被看作是双方相互审视的机会。指导者有机会了解对另一个人负责的感觉；而受指导者，则得到一个专注于他的导师指导。
我的第一位导师 我（英文原文作者）很幸运有一位出色的导师，他的名字叫凯文（Kevin）。当时我是太阳微系统公司的一名实习生，所在团队负责 JVM 工具。这是我第一次，构建一个真正的软件项目。
尽管他是我们的高级技术主管，但还是为我分配了大量时间。他没有留下我独自凌乱，而是花时间与我讨论项目。一起在白板写代码，一起做 code review。这让我知道了，我应该做的事情。当我陷入困境时，我可以向他寻求帮助。
那年夏天的实习，对我的软件职业生涯至关重要。在他的指导下，我发现我可以胜任这份工作，而且有能力成为一名高效的员工。
与凯文（Kevin）的合作，是我职业生涯的第一个重要里程碑。
这种经历教会了我导师制度的价值。
导师做得不好会怎么样 如果你发现自己正在负责指导他人，那么祝贺你！这并不是所有人都能获得的经验。这是一个机会，以相当安全的方式，学习管理工作以及对他人负责。
你不太可能，因做指导做得不好而被解雇（当然，除非你举止不当，触碰原则底线）。
最坏情况 对于许多导师而言，可能发生的最坏情况有：
受指导者浪费了大把时间，他们的产出减少。
他们做得非常差，以至于团队不想雇用该人。
受指导者的经历很糟糕，并且没有融入组织。选择了更早地离开组织。
遗憾的是，后面的可能性要比前面大得多。
糟糕的导师 有时，糟糕的导师会浪费大量的才干。
这些导师做的很少，无视受指导者的需求，在琐碎的项目细节上浪费时间。更最糟糕还有，威胁和贬低受指导者的能力。
但是读到这里的朋友，肯定不想这样做。你想成为一名伟大的导师。
也许你已经是一位经理，希望团队在导师关系方面发挥积极作用。
那么，如何建立良好、有效的指导关系，而又不减慢开发速度呢？
如何指导实习生 这里介绍的第一类指导关系，是实习生。
对于大多数高科技公司来说，这通常指的是暑期实习生。许多公司将这种模式，视为应届生招聘的重要渠道。
提供良好实习体验 因此，在指导这些学生时会发现，他们是缺乏实际经验的。
如何确保给他一个良好的的实习体验？
即使公司不需要他，你也要给他留下好的印象。因为，他回去会告诉他所有的朋友：他在贵公司工作的实习体验。
这会影响你在该圈子，招聘应届生的形象。
但是不用担心，让实习生开心，并不是造火箭。
准备项目 你需要做的第一件事，是为该实习生准备项目。
如果你作为导师，没有拘泥项目的形式和内容，那将非常棒。
为什么要准备项目 没有项目，实习生很可能会在整个实习期抓不着重点，且感觉无聊。
对于有经验的员工，弄清楚该做什么都是困难的，更何况是实习生。
如果你确实大脑一片空白，可以看看自己当前项目的一些小功能。这些功能可能需要几天的时间才能完成，就从这里开始。
最初几天多接触 实习生刚来的前几天，与任何新员工的经历都是相似的。入职，适应办公室，认识同事，熟悉系统。
在最初的几天里，尽量与他多接触。让他安装 IDE 并阅读代码。
每天几次与之接触，以确保他不会因大量新信息，而感到迷茫与不知所措。
同时，为他的项目做准备。
项目分解与里程碑设定 有了项目后，就可以将对项目管理的新知识，应用到手头的任务上。
这个项目是否分解了里程碑？如果不是这样，请在实习期间的前几天花点时间进行分解任务。
与你的实习生一起进行详细的分析。这对他有意义吗？向他提问，并倾听他的问题并。
请记住，你正在练习将来成为领导时需要的技能。
这些技能包括：倾听，清晰传达期望以及根据回应调整。
管理的基本技能 倾听 倾听是管理人的第一项，也是最基本的技能。</description>
    </item>
    
    <item>
      <title>思维导图｜《高绩效教练》</title>
      <link>https://kuhung.me/2021/performance-coaching/</link>
      <pubDate>Tue, 16 Mar 2021 00:35:38 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/performance-coaching/</guid>
      <description>核心观点：
让教练对象产生如下感觉
自主 胜任 联结 教练需要做到
察觉 提问 倾听 关于作者</description>
    </item>
    
    <item>
      <title>Xgboost 三种特征重要性计算方法对比与扩展</title>
      <link>https://kuhung.me/2021/three-feature-importances-in-xgb/</link>
      <pubDate>Mon, 08 Mar 2021 21:09:31 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/three-feature-importances-in-xgb/</guid>
      <description>简单描述 实际发布 最后一次修改 xgb 特征重要性计算方法及使用场景 2021-03-08 2021-03-09 特征重要性 作用与来源 特征重要性，我们一般用来观察不同特征的贡献度。排名靠前的，我们自然而然地认为，它是重要的。
这一思路，通常被用来做特征筛选。剔除贡献度不高的尾部特征，增强模型的鲁棒性的同时，起到特征降维的作用。
另一个方面，则是用来做模型的可解释性。我们期望的结果是：重要的特征是符合业务直觉的；符合业务直觉的特征排名靠前。
在实际操作中，我们一般用树模型的分类节点做文章。常用的就是 XGB 和其他一般树模型。
XGB 遇到的问题 XGB 很方便，不仅是比赛的大杀器，甚至贴心的内置了重要性函数。但在实际使用过程中，常常陷入迷思。
有如下几个点的顾虑：
这些特征重要性是如何计算得到的？ 为什么特征重要性不同？ 什么情况下采用何种特征重要性合适？ 今天我们就借这篇文章梳理一下。
XGB 中常用的三种特征重要性计算方法，以及它的使用场景。除此之外，再看两个第三方的特征重要性计算方法，跳出内置函数，思考其中的差异。
最后回到类似的树模型特征计算方法，进行特征重要性的一般方法总结。
以下场景非特殊说明，均针对 python 包体下的 xgb 和sklearn。
XGB 内置的三种特征重要性计算方法1 weight xgb.plot_importance 这是我们常用的绘制特征重要性的函数方法。其背后用到的贡献度计算方法为weight。
‘weight’ - the number of times a feature is used to split the data across all trees. 简单来说，就是在子树模型分裂时，用到的特征次数。这里计算的是所有的树。这个指标在R包里也被称为**frequency**2。
gain model.feature_importances_ 这是我们调用特征重要性数值时，用到的默认函数方法。其背后用到的贡献度计算方法为gain。
‘gain’ - the average gain across all splits the feature is used in.</description>
    </item>
    
    <item>
      <title>从一款小游戏收获的三点思考</title>
      <link>https://kuhung.me/2021/what-i-learned-from-little-game-xiao/</link>
      <pubDate>Sat, 13 Feb 2021 17:13:44 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/what-i-learned-from-little-game-xiao/</guid>
      <description>2月初，我上线了一款小游戏，整活小游戏——合成魈大人（移动端访问）。
这一过程，收到了很多反馈。
同时，也有如下三点思考：
善用营销 早交付 学会写标题 至于为什么是这三点，下面将按时间顺序，一一阐述。
前景提要 品牌与商业化观察 很久以前，小力就有一个想法：将自己的技术能力变现，至少是能变成流量。
在这个过程中，交付客户喜欢的东西，形成自己的名片📇。
这样做的目的：一方面是督促自己不断学习；另一方面也是在构建自己的品牌，争取更高的议价权。
为了实现这一目标，小力学习了很多经管类的资料。同时也在工作中，做一个善于观察的人。观察不同组织，做得好和不好的地方，以及背后的原因。在这个过程中，有一点让小力印象深刻，那就是：微创新的组合。
很多商业上的成功，不是来自于翻天覆地的改变，而是来自于已有项目之间的交叉组合。在利基市场，进一步细分客户群，获得利润；或是发掘完全崭新的市场，占得先机。——Nicolas Gu
几次尝试反响平平 在写代码上，最容易的微创新，那一定是前端跑不了了。其次，则是算法模型。但是后者有一个较大缺点：离普罗大众太远，且消耗计算资源。
基于此，小力一个非专业前端，也写了不少前端小项目。虽然这些都是魔改的，但确实能够交付用户面前。
这其中就包括：
毒鸡汤 点击🔗访问
原神放置小游戏 点击🔗访问
图像搜索（算法类项目，较为吃计算资源，上线一段时间后撤下）
但以上的结果，都反响平平，单个项目的 PV 不超过500。
吃瓜吃到手边 在某个天朗气清的一天，互联网上还在吃郑爽的大瓜，而后又冒出另一个生孩子的事情。吃瓜的事情，以小力的习惯，向来是不会过多关注的（当然，该谴责还是要谴责）。
没过几天，微博热搜由吃瓜变成了合成大西瓜。小力也理所当然，不为所动。直到整活小游戏——合成华中大，出现在朋友圈。
这游戏点进去一看，没啥难度啊，活脱脱一个2048翻版。几天不到，就出现如此多版本，互联网上一定有源码。
一个念头出现在小力脑海中：合成，合成点儿别的东西？顺着组合创新的思维，在垂直细分领域，为何不能合成《原神》游戏中的角色——魈？答案是肯定的。
开发构建 资源整合 说干就干，先去GitHub搜索源码，很容易的，排名靠前的好几个。定睛一看，整体就是一个前端静态页面，服务器资源消耗也不大。
唯一的难点，就在于素材的全面替换。这个不太容易，需要解决两个问题：
有哪些素材，素材的引用路径是怎么样的。 小力不会美术，不会画图，替换的素材从哪里来。 第一个问题，通过前端调试，很快解决。有图片、交互UI、音频以及引流的变现链接。
第二个问题，素材可以直接互联网抠图。最直接的，米游社原神板块和淘宝旗舰店。
大概周六一下午的时间，以上内容基本缕清。又花了一晚上的时间，最重要的素材通过截屏、powerpoint 工具、画图工具，剪裁完毕。
第二天一早，项目借鉴之前个人网站的方式，通过 GitHub 静态部署完毕。部署过程，加入了百度和谷歌的数据埋点，用来监控PV、UV以及访问来源等信息。
潜在风险迭代 周日的中午，项目已经和最终版基本无差，在交付种子用户体验后，收集到了正向的反馈。但是，小力觉得还应该做得更好。于是替换掉了项目中的引流链接，删除了循环玩法流程。
在调试过程中，小力发现，资源加载缓慢，平均首次加载耗时超过2分钟，部分时间甚至出现卡顿。根据亚马逊的实验报告，网站每多加载100ms，将损失巨量的成交。小游戏也是，根据微信的报告，小游戏的加载过程，将会影响至少一半的潜在玩家。总而言之，加载的延迟问题很大。
要解决这个问题，有多种方法。其一，压缩素材。其二，换自建服务器。这些，都是技术人员正常的想法。不过，这里忽略了一个最重要的事情，就是客户：客户关心这个问题吗？后续的结果证明，延迟的负面影响没有预想的大。
又是一个下午的时间，小力尝试压缩图片质量，通过 tinypng 缩小了图片资源到原来的1/4。而加载问题，始终有概率在98%处卡住。这个现象，有两个原因：一个是资源所处位置 GitHub 本身的不稳定性；第二个是，前端代码里对进度条进行了调整，98%时，实际加载的资源只有50%🐶。
交付与反馈收集 当天晚上，小力在米游社发帖，开始曝光自己的游戏。当晚的浏览量在200上下，第一次收到玩家的反馈。其中，正向的居多。而反应加载不出来的，十条大概只有一条。给这个比例加上“沉默螺旋”加成，也就是那些受阻的玩家会直接关闭而不是反馈，估计约有2成玩家受阻。这一数量，在可接受范围。
第二天，周一的中午，小力在NGA发帖，曝光自己的游戏。
随即，浏览量“暴增”，顶峰半小时 UV 在800以上。
后面几天，流量趋于平稳。累计的PV在13000以上，UV在7000+。这个数据单独看没什么概念，但要知道，小力个人网站2020年的 UV 是2890，PV 是3690。而小游戏，不到一天就超过了这个数。
随后，小利在外网 Reddit 社区，也发出了帖子，进行游戏曝光，同样收到正面反馈。
两天后，小力计划采用视频曝光方式。计划延期未交付。
再两天，小力观察到米游社有一个首页推荐贴，合成史莱姆。获得了合成魈的十倍曝光。观察下来有如下特点：
标题符合社区文化，吸引人去点击 素材更改并不多，甚至有些粗糙，交互逻辑沿用的第一版 但是，它获得了更好的流量。</description>
    </item>
    
    <item>
      <title>算法模型的可解释性</title>
      <link>https://kuhung.me/2021/interpretable-machine-learning/</link>
      <pubDate>Fri, 22 Jan 2021 15:24:12 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/interpretable-machine-learning/</guid>
      <description>背景 QQ 的“安全”策略 2021年1月18日，QQ 系被爆出扫描用户的浏览器历史记录，并对特定关键词进行了记录。
QQ 的公关回应说，这是安全策略。但其实，懂的都懂，这里不做过分推演。
某种意义上讲，目前各大互联网企业的竞争，实质上是数据的竞争。
数据越多越好 作为调参从业人员，从算法和模型角度来说，数据确实是越多越好。
数据越多，模型能捕获到的有用特征则更多。从特征状态空间，映射到实际标签的过程，会更顺畅、更准确。
我的数据谁做主 为什么大家会这么关注这个问题？有两方面的原因：
一：采集行为未经用户授权，且数据采集毫不相关。
二：日常生活中，有太多”精准“的推送。
早上刚和同事说想买 PS5，晚上各大 app 就开始展示 PS5 的商品广告。
用户可不管你用的什么方法，你拿了我的无关数据，展示了我心里想的东西。
啪的一下，两件事情就得到了关联。
现象背后的解释 心理的谬误 从心理学来讲，确实存在“孕妇效应”和“幸存者偏差”，会让我们错误地把两件事归因在一起。
即，怀孕的人，会突然发现，大街上怀孕的人变多了。但实际变多了吗？其实并没有，只是之前的注意力没在这里而已。
”幸存者“，则是那些发声的人。广告虽然会尽量投放给潜在顾客，但刚好命中前一秒有需求的，是少数。发声出来，让大家以为这是普遍现象。
算法也有“恐怖谷” 更多的则是，从用户体验层面，无理由的精准，着实会招致抵触。
在数据应用的早期，大家觉得这是个新鲜好玩的东西。但当推荐越来越离谱，仿佛读心术一般的，数据的“恐怖谷”效应也就出现了。
这和仿生人领域一样。当机器人越来越像人，人类感受到的不是亲切，而是害怕。推送太准确了，以至于让人发怵，从生理上抵触。
我模型牛逼，要什么解释性 而在研发层面，在做模型时，往往容易陷入参数狂热。
随着各种模型方法的支持，我们很容易将各类脑洞、各类特征、各类技巧糅合在一起，做出一个看起来还不错的结果。
但其实，我们很难解释，是哪部分带来的效果。是深度学习的网络结构，还是交叉几轮找不着北的特征，抑或是那不起眼的坐标信息？
大多数情况，我们给不了解释。
同行与监管的挑战 为了解决数据滥用、模型黑盒问题，业界正在发生变化：
软件提供者层面 iOS在14的版本更新中，有一个最显著的变化，引起了我的注意：系统在做应用推荐时，会给出推荐的理由。
而这，在此前的版本都是没有的。
例如连上蓝牙耳机时，屏幕的下方会显示：推荐xx音乐，因为连上蓝牙时经常这么做。
监管层面 蚂蚁上市告吹，马已经服。金融时报这样评价：
同时，大数据、人工智能等技术易导致“算法歧视”，严重损害特殊群体利益。相较于传统歧视行为，算法歧视更难约束。
其一，算法歧视维度多元。传统歧视行为通常依据性别、学历等显著外在特征，但算法能挖掘更深层次的隐形特征作为依据。
其二，算法歧视形式隐蔽。基于种族、性别、民族等特征的歧视行为被法律禁止，但自动化决策可利用“算法的不可解释性”规避职责，在不触犯现有法律规定的情况下，侵犯消费者合法权益。
尤其是当某一个大型互联网企业拥有涉及数亿消费者天量数据信息的情况下，即使从个体和逐笔看，其数据来源和使用均获得了消费者授权，但从总体看，可能存在“合成的谬误”，这些数据在总体上具有公共品性质，其管理、运用并非单一消费者授权就能解决其合法性问题。
这说明，监管已经注意到这个层面。且他们的认知很专业，抓住了问题的核心：无法解释的算法，隐藏在超参数背后的歧视，将会侵犯我们每个人的权益。
这次他们没有“喝茶看报打哈哈”。
数据来源需合法合规，模型解释也应该有所依据。
模型的可解释性，必须提上议程。
下面内容比较生涩，我尽量做到深入浅出，小白看了懂大概，同行看了知方法。
我们需要可解释性 可解释的3大必要性 对于用户：用户需要知道，你有没有“偷窥”他的隐私，是否有私底下采集用户数据，用于歧视性定价等。
这会影响用户忠诚度和品牌美誉度。
如果总是很“精准”地推一些东西，用神经网络或者是组合特征、泛人群特征，用户实际是会很懵逼的。
信息不对称的情况下，他会直接联想到最近的行为，从而产生被监视的感觉。
对于监管，监管部门有责任掌握细节，防止信息的滥用与风险的滋生。
就像针对蚂蚁金服的调查：用户的多维度数据被企业用来谋求更大利益，滋生出巨大的金融系统性风险。
对于业务，业务方需要知道每个模型背后的原理，以便更好的做出决策。
一些并不面向前端用户的项目，业务方需要知道手底下发生的事情，以便做到能够响应变化。
模型说：a 变大，则 b 会变小。那么，当 b 变大时，业务就可以通过调大 a，进而控制 b 变小。</description>
    </item>
    
    <item>
      <title>五年十个财务瞬间｜01 2020年财务总结</title>
      <link>https://kuhung.me/2020/ten-financial-moments-in-five-years-1/</link>
      <pubDate>Thu, 31 Dec 2020 09:39:13 +0800</pubDate>
      
      <guid>https://kuhung.me/2020/ten-financial-moments-in-five-years-1/</guid>
      <description>描述 目的 发布时间 最后一次修改 财务管理的第一次笔记 用于回顾财务情况，审视财务决策 2021.01.11 2021.01.12 结论先行 这是第一篇财务总结文章，写于2020年末。本系列计划共计10篇，跨度5年。
为什么会有这篇文章 写这篇文章，是为了审视自己的财务情况，梳理财务观和财务现状，给自己一个交代。
财富，不仅决定了一个人的生活水平，也是其未来的支撑。财富自由不是绝对概念——需要达到多少数额，而是相对的、比较性质的结果。
如果不好好理财，放任钱从左边口袋进、右边口袋出，则永远不可能享受真正意义上的财富自由（包括富二代）。
我不理财，财不理我。
不自由≠单一储蓄 但是真要说，理财，很多人又陷入另一个极端：省钱。
我的上一代人就是这样子的，他们省吃俭用，支撑了我（这里需要感谢他们）。
但是这样的方法，对于我们这一代，是否仍然适用，则需要打个问号。
因为如今，高通胀，其实在变相地剥夺储蓄的财产。财富分配两极化的加剧，是不争的事实。
我的财商启蒙 我的财商基础，是父母的节俭教育。
而后引导我去寻求出路的，则是一次与表哥的对话。
记得一年春节，我对家里人说，我想去广场卖孔明灯，因为我觉得会赚钱。
表哥听说后，跑来问我：你的目标受众是谁，周转资金能有多少，预期产生多大收益？会被城管驱赶、没收掉资料吗？
我当时完全懵逼，并没去考虑这些商业上的问题。竟然傻乎乎地觉得，我购入生产资料，就能产生自由的现金流。
这些问题，驱使我去寻找答案。
后来我发现，答案其实有两种：一种是别人的智慧结晶，另一种则是自身的亲历实践。
智慧结晶，就在华科的东图地下一楼与主图四楼，那批F开头的财经类书籍。
它们告诉我，省钱并不能带来财富增值。合理开支，把钱花对地方，产生正向的现金流，才是正确的做法。
两个爸爸 有的人，有两个爸爸，因而可以通过观察他们，学会分辨哪种方式更高效。
这并非在映射社会现象，而是说的一本书，名叫《穷爸爸，富爸爸》。当然，这本书也属于F开头的经济类书籍。
这本书的核心内容，是关于资产与负债的准确认知，以及对应的操作：减少不必要负债，买入可增值资产。
会走路的钱 钱会走路，这是另一本关于理财的书籍《MONEY WALKS》。核心其实和上文差不多，但多了作者自身的操作实践。
作者写了十年的博客，来记录他的财务变化。这也是这篇文章的萌芽点，模仿他，记录自己的财务情况。
书籍是一份答卷，实践则是另一份答卷。
做得好的地方 关注基金管理费用 这是在阅读中发现的一个盲区。我的基金买的大多是指数型，少部分进取型股票基金。当时买的时候，几乎没看管理费。看着漂亮的历史折线，就跟投了进去。
但长达百年的金融过往告诉我们，指数型基金，能跑赢大多数的策略型基金。而策略型基金，坑就坑在管理费上。别看1-2个点的差异，但长期复利来看，会是巨大差别。
所以检查之后，我停掉了两支年管理费2%以上的基金。有这管理费，都够杠杆买港美股了，盯着头部买，业绩也不会差太多。
接触港美股 说实话，我在2019年底前，并没有接触实盘的股市。因为15年的股市，给我留下的印象太深刻。
当年的公选课《证券投资》堂堂爆满的场景，还历历在目。仿佛座下的每个人，都能如台上的经管学院讲师，获得一年资产翻倍的成就。
人傻钱多速来。但很可惜，景气没持续多久，股灾就来临了。
不过后来，由于好奇+机缘，开通了港美股账号。尝试着买入了几支有接触公司的股票后，获得了25%的年回报（当然也有亏损的）。
资金轮动 资金轮动是在雪球上学到的。大概的道理就是：没有永远涨的市场，也没有永远跌的行情。
我觉得这句话有道理。虽然会让自身错失“暴富”机会，但也能减少本金折损的风险。
根据市场的波动，在半年或者是一年的时间节点，对仓位进行再平衡调整。
这招用在 BTC 上，很管用。
做得不好的地方 在模拟盘口嗨 用后视镜观察，无论是网易、英伟达的股票、还是数字货币，如果毕业就开始定投，收益至少比现在高50%。
而且这些东西，都是自己比较熟悉，没有脱离能力范围的。
京东、迪斯尼这类公司，其经营基本面，大家也都是有数的。
不过可惜，前面一年多，资金躺朝朝盈里面了&amp;hellip;
做空大趋势 没错，我在蔚来汽车6块钱的时候，买了做空。
这可是如日中天的新能源汽车领域，虽然2019年底，还有到过2块钱的地步，但是6块钱，其实也不值得做空。
做空的钱，不如拿去买基金定投。
过早卖出 38卖出顺丰科技，今日92；
29卖出中国人寿，今日40；</description>
    </item>
    
    <item>
      <title>技术领导｜01 技术管理入门 （下）</title>
      <link>https://kuhung.me/2020/management-101-vol-2/</link>
      <pubDate>Wed, 30 Dec 2020 00:04:13 +0800</pubDate>
      
      <guid>https://kuhung.me/2020/management-101-vol-2/</guid>
      <description>🌟 合集地址：《The Manager&amp;rsquo;s Path》中文翻译 在上半部分，我们描述了一个好的管理者画像。以及我们所期待的，从管理者身上获得的东西。
下半部分，我们集中注意力在自身，即：如何被管理，做一个称职的下属（打工人）。
被管理者视角 弄清楚如何被管理，也是管理者需掌握的东西。这和向上管理不太一样，虽然它们有相关性。
它的核心在于三点：
在工作中，发展主人翁意识
培养对所做工作内容的权威感
不去依仗上级设定关系的基调
这对于掌握职业生涯，提升工作幸福度，十分重要。
花些时间想想，你到底想要什么 认识自身，责任在己 你的上级，可能会指出增长的机会。他能给你提供项目，能给你的学习、成长提供反馈。
但是他并不会读心术；他也不能告诉你，什么会让你快乐。
无论你是个职场新手，还是一个有二十年阅历的职场老鸟，这一切的责任都在你自己身上：你想要做什么，你想学什么；以及什么会让你幸福快乐。
职业生涯充满不确定性 你很可能正在经历，职业生涯的不确定期。很多人，在他们刚出社会的头2-5年，都会感觉非常焦虑。
当我刚离开学校的时候，也是这样的感觉。我迫切想逃离这颇有难度的工作，想回到熟悉的大学学术研究。
在我成为公司的技术负责人之后，不确定的感觉再次来袭。而且我能确定，每5-10年，便会经历一次不确定感。
当你经历过职业生涯的不同阶段，你将会意识到：这个世界充满了不确定。
快乐会消失，理想很现实 但其中，也有一条不变的真理：一旦获得了想要的工作，工作的光环便开始褪色。快乐开始减弱，你又开始追寻新的东西。
你想去一个很酷的创业公司，入职后却发现内部一团糟。你希望成为一位经理，到头来却发现这个工作非常困难，并且它的回报并不如你所愿。
在以上的所有情况中，你能依赖的，只有你自己。你的领导并不能取代你的地位。
因为，借助你的领导，你可以发现能到的地方；但只有理解了你自己，才能弄清楚想去的地方是哪里。
为自己承担责任 认识你自己是第一步。第二步，是知道你想要什么。
主动争取 当你想做某个项目，就去争取它，推荐自己。
当你的领导并不那么管用时，从其他地方获得支持。
寻求反馈，包括负面的、需要改善的地方。当收到反馈时，好好重视，即使你并不认同它。
当你长期都不开心时，说出来。
当你遇到障碍时，寻求帮助。
当你需要支持时，提出来。
当你想要被提拔时，弄清楚怎样才能获得晋升。
付出更多 如果你想要回家，找找什么方法能让你完成工作，然后回家。
有些时候，你不得不对抗整个组织文化，以此来设定自己的边际。这种感觉并不舒服。
另一面，如果你想承担更大的责任，你可能需要更多时间来肩负它。
不是每件事都能如愿 你并不能获得想要的每件事情。去争取也不是一件有趣、舒服的事情。但它却是最快的方式。
如果你的领导足够坦诚，他会感谢你的直爽。但他也可能不太敏感，或者他想你少说多做。那你就需要考虑清楚自己的处境。
我无法保证，这对你百分之百有用。但一旦你设定了自己的目标，你就有责任去做点事情，让它成为现实。
理解上级，换位思考 这只是份工作。
上级的工作职责 你的上级，可能因为其他事情而焦头烂额。
他不是完美的。他也会说很多消极的话，或者是做一些让你感觉不公平、有伤害你的事情。
他可能会分配，你并不想做的工作，并且无视你对于这件事的抱怨。
他的责任，是对整个公司、整个团队，做整体最优的事情；而不是一些让你时刻开心的事。
同上级的人际关系 你同你上级的关系，和其他人际关系没有两样。
你能改变的只有你自己。
你有责任提供足够多的反馈给到上级。
但也需要认识到，他可能并不想听，或者听了也不想做出改变。
什么时候该换工作 如果你发现开始对上级积累怨恨，很可能，你需要去新的团队或者找新的工作。
如果遇到的每一个上级都不爽，那就要想想：问题是出在他们身上，还是自己身上。
也许你在一个没有上下级的工作环境，会更开心。
寻求建议，而不是完全依赖 特别当你变得越来越资深，要记住：上级希望你带来解决方案，而不是问题。
不要让每场谈话都变成你需要什么，以及某些事是多么的糟糕。
当你遇到困难，找你的上级解决掉它之前，试着寻求建议，学习他处理问题的思路和方法。
寻求建议，永远是表达尊重和真诚的最好方式。
选择你的理想上级 你的上级会对你的职业生涯产生巨大的影响。</description>
    </item>
    
    <item>
      <title>游戏机制设计，以剧本杀为例剖析可玩性的来源</title>
      <link>https://kuhung.me/2020/game-design-summary/</link>
      <pubDate>Thu, 24 Dec 2020 09:33:23 +0800</pubDate>
      
      <guid>https://kuhung.me/2020/game-design-summary/</guid>
      <description>标题 创建时间 发布时间 最后一次修改 备注 游戏机制设计 2020.11.11 2020.12.24 2020.12.24 拖更文🐶 写作背景 一款游戏，挨骂最多的是谁 一个游戏中，挨骂最多的，策划排第二，没人敢排第一。按理说，一个游戏的美术好、音乐好，确实值得夸赞；
但我们将各个部分拆开，一定会发现，单一的”美好“的元素，并不足以撑起整体的评价。
最后游戏的评价，一定是多方面，1+1&amp;gt;2的结果。
美术很重要，它带来了独特的美的享受；
程序很重要，它保证了基本功能和丰富玩法的实现。
这样算来，策划确实不算啥，动动嘴皮子就行。
事实并非如此。
抛开营销、渠道不谈，其实，恰恰是策划所构造的游戏机制，将好玩的游戏带到我们身边。
想一想，你是否有接触过音乐一般、美术一般，但极度耐玩的游戏？
。。。
。。。
。。。
不用绞尽脑汁想，象棋、跳棋、五子棋都是经典的耐玩游戏，打弹珠、扇卡片仍在代代相传。
为什么他们耐玩，究其原因，还是因为游戏机制设计，带来了丰富的可玩性。
这是一篇给策划的洗地文？ 本文不是谈论单独某款游戏的策划，而是探究他们做的事情之一——游戏机制设计，是如何带来游戏可玩性的。
以下内容，参照《游戏机制——高级游戏设计技术》、《通关 游戏设计之道》、《我在美国学游戏设计》等资料。
以剧本杀《情辞白帝》《青楼》等作为迁移剖析的对象。分析游戏机制在其中扮演的角色，以及如何进一步改进剧本杀游戏体验。
所以，该骂策划继续骂。但不妨碍我们思考，游戏机制如何影响我们的生活。以及在每一次版本发布后，试着理解，内容调整的动机。
游戏是什么 在开始之前，我们先定义游戏的概念。什么是游戏？游戏是在规则的约束下，参与模拟的冲突，产生可量化结果的系统。
游戏不可预测 游戏的最大特点，是不可预测性。这里的不可预测，不等于100%随机。
好游戏的不可预测性，是少量的随机+简单的规则+充分的互动的结果。
为了强化不可预测性，常常会让玩家在游戏中做出选择。
这个选择，可能是操作上的、也可能是策略上的。
试着思考以下游戏，你做出过的选择：
《超级马里奥》、《俄罗斯方块》、《贪吃蛇》，《王者荣耀》、《PUBGM》。
在剧本杀中，同样充满了不可预测性。每个玩家手中的剧本，都是局部的，需要策略伪装，以达成最后的任务。
机制的存在，影响了游戏运作。其作为核心，是游戏可玩性的来源。
什么是机制 机制是穿插在游戏内，最有影响力的东西。
例如，马里奥的跳跃。通过简单的跳跃，玩家可以实现攻击、闪躲、跨越障碍等几乎所有事情。
虽然玩家也可以左右移动，但左右移动，服务于跳跃。所以，跳跃是超级马里奥的核心机制。
五类机制 机制，一般可分为5个大类，分别是：
物理机制 内部经济 战术动机 社交互动 渐进 其中，前四者又可以概括为突现。
物理机制
物理机制，典型如愤怒的小鸟：小鸟发射、碰撞、滚落，遵循了真实世界的物理规则。
内部经济
内部经济，则包括元素的收集、消费以及交易。常见的资源有：金钱、能源或是武器弹药。
同时，不同于现实世界，抽象的资源也是内部经济的一部分。
抽象资源如：声望、健康、好感度和技能点等。
战术动机
战术动机，其典型代表则是象棋。战术的核心是资源的分配，例如象棋棋子的位置。
社交互动
社交互动，就是字面上的意思。国内的腾讯，把这部分发挥到了极致。
国外的 coin master，也背靠 Facebook 等社交公司，长期挤占付费榜前十。</description>
    </item>
    
    <item>
      <title>技术领导｜01 技术管理入门 （上）</title>
      <link>https://kuhung.me/2020/management-101-vol-1/</link>
      <pubDate>Sat, 19 Dec 2020 15:32:37 +0800</pubDate>
      
      <guid>https://kuhung.me/2020/management-101-vol-1/</guid>
      <description>🌟 合集地址：《The Manager&amp;rsquo;s Path》中文翻译 管理的秘诀就在于：让那些讨厌你的人，远离那些还没有形成主见的人。 ——卡西·史丹格尔
你阅读这篇文章，是因为你想成为一个好的管理者。但在这之前，你其实并不知道，一个好的管理者是什么样子。
你之前有遇到过一位好的经理吗？如果一个人让你告诉他，你想从一位好经理身上获得什么，你能够回答这个问题吗？
从管理者那里，期望获得什么 每个人在管理之路的第一站，总是在桌子的另一边，即：被管理者。这些被管理的经历，成了你构建自己管理哲学的基础。
不幸的是，我已经看到很多人，在他们的职业生涯中，并从未遇见过一位好的领导。
好的管理特质 散养（benign neglect）——这是我的朋友谈论他们遇到的，最好的管理者的特质时，常常会提到一个词。
工程师知道他们该做什么，领导则完全放权给他们做。在一个极端的案例里，一个人在六个月的项目时间里，仅仅同他的领导会面了两次。其中一次还是因为获得提拔。
良性的忽视（散养）并没有那么糟糕，特别是当你看到它的反面的时候。
散养的反面之一 这里有另外一种领导，当你需要帮助的时候，他会无视你：不顾你的疑惑，同时避免与你会谈。
更甚至，他们从来不给你反馈。只有当绩效回顾到来时，他才会告诉突然地告诉你：你并不胜任这份工作，或者是并不值得被提拔。
散养的反面二 而另一方面，又会有另外一种：极端的、事无巨细的管理方式。
他总是过问每件事的细节，并拒绝让你做任何的决策。他们会无视你的建议。只有当他们想找人背锅时，才会找上门来。
散养没那么糟糕 遗憾的是：以上反面类型的管理者，总是存在于各大公司的角落，影响着团队的精神健康。
所以，当你看见了以上的案例，你会意识到：散养，也没那么糟糕。
理想的管理者 与此同时，也有其他的类型的管理者：他们把你当成一个真正的人，并乐意帮助你成长。
他们会教你一些重要的技能技巧，给你有价值的反馈。
会帮你分析目前的困境，在困难中给你指引。帮助你弄清楚，哪些东西需要学习。
会想着某一天，你能胜任他们的工作。
总结起来一句话：他们帮助你明白，什么是需要重点关注的；同时，让你具备关注的能力。
但话说回来，为了你和你的团队走上正轨，管理者的关注点在方方面面。所以，指望他们事无巨细皆满足，也是不现实的。
在谈论想获得什么时，也应该问问自己：你想要的是什么。
一对一谈话 同你的直属领导，进行一对一的谈话是非常重要的。这有助于构造一个好的工作氛围。
然而，很多管理者忽视了这些会谈，或者他感觉是在浪费你的时间。
一对一谈话是为了两个目的。
一对一谈话目的之一 其一，它创造了你同你领导的联结。
这并不意味着：你花大把的时间，去谈论你的兴趣爱好、或者是周末的活动。而是让你的管理者进入你的生活。
这非常重要的。因为当有压力的事情发生时，比如：家人的去世，新生命的诞生或者是房屋修缮，会更容易请假。
你需要更多的帮助时，也会更加容易。
好的领导者，会注意到你的精神面貌的变化，并且希望能够真诚地帮助到你。
虽然我们可能是很内向，或者我们根本不想在工作中交朋友。你可能会认为，我是一个很喜欢交朋友的人，所以我不能理解你的感受。但是我向你保证，我能理解你坐在桌子的另一端的感受。
内向并不是借口，也不是无礼待人的托词。
强大团队的基础，是人与人间的联结。只有充分的联结，才能够引起足够的信任。
所以好的领导会希望：你在工作之外能有生活，同时也乐于交流你们的业余生活。
一对一谈话目的之二 一对一谈话的另一个目的，是提供了一个私密谈话的机会。尤其是，有一些必须谈的话题。
你应当把你的一对一谈话，安排的到日程表里。以便这个会面能被排期。掌控谈话节奏的职责，并不完全在领导侧。如果在谈话前，能有议事的章程，将会是非常好的。
如果你的领导并不经常和你会谈，或者是经常取消或者改变谈话时间，这将有点难办。
你可能并不需要高频的一对一谈话，那也没问题。当你需要它们的时候，就请告知管理者。
一对一谈话的更多作用 对于大多数人来说，好的一对一谈话，并不等同于进度同步会议。
如果你是一个管理者，汇报给更高的管理者。你可能会用一对一谈话，来澄清项目状态；亦或者是，讨论那些还没立项的项目。
如果你是个独立的开发者，一对一谈话可能是重复或者是无聊的。如果是这样，尝试用邮件或者是企业聊天工具去做这个事情。并且记住，尽量在会谈中明确你的中心主题。
我鼓励你去承担责任，承担营造更好会谈的责任。
起草一个议事的章程；为会谈做好时间准备。如果他取消，或者是重新排了日程，推动他去找一个固定的时间。如果这个时间不现实，那就找一个感兴趣的话题切入，让他知道你想进行一个会谈。
反馈和工作指引 反馈，应当是值得期待的第二件事情。
这里说的反馈，并不是指绩效回顾。虽然绩效回顾是其中的一部分，但它的频次并不高。
一般而言，你极有可能在项目初期，搞砸了某事。如果你的管理者称职，你会很快接收到反馈。
这可能会让你感觉不舒服，尤其是对于还没有适应工作压力的人。
接收其他人的反馈，可能会让你感觉迷失方向。
但是要记住，比接收反馈更糟糕的是：没有反馈；或者是到绩效评估时，才得到反馈。
持续追踪、记录反馈 从领导那里获得早期的、持续的反馈，非常重要。
发现越早，坏习惯就越容易修正。
这对于表扬也是同样的道理。一个好的管理者，会注意到你日常生活的点点滴滴，并从中认识你。</description>
    </item>
    
    <item>
      <title>为度过原神长草期，我写了个原神放置类单机小游戏</title>
      <link>https://kuhung.me/2020/yuanshen-idle-feedback/</link>
      <pubDate>Mon, 16 Nov 2020 00:37:39 +0800</pubDate>
      
      <guid>https://kuhung.me/2020/yuanshen-idle-feedback/</guid>
      <description>游戏地址：https://kuhung.me/yuanshen-idle/
很高兴能和大家分享这款小游戏。如果恰好你也喜欢原神这款游戏，想在长草期放松放松，那么这款放置类游戏一定不要错过。
游戏模板来源于 Couy69 的 vue-idle-game，副本填充内容来自原神米游社等公开社区。所有内容均来自公开互联网，业余时间打造，非内鬼，不py。
对这款放置挂类游戏的任何建议，欢迎通过以下三种方式联系。
拥有 GitHub 账号，可直接下方留言。
关注我的微信公众号【谷粒说数】，留言反馈。
发送电子邮件至 kuhung#foxmail.com(@替换#)，进行反馈。
请选择你最方便的形式。
为答谢各位的支持，将于12月1号，送出三份原神周边。抽取三位提出宝贵建议的同学，快递上门。
另寻前端高手，优化移动端布局，以及迭代整体交互逻辑。
目前的更新计划：
项目 预计耗时 预期上线时间 实际上线时间 备注 最后一次修改时间 原神放置类小游戏 7x10h 已上线 2020.11 项目整体概况 2020.12.10 完成全部副本的文字描述替换 4h 2020.12.13 1116 完成蒙德区副本文字描述 2020.11.16 增加新手引导 1h 已上线 2020.11 增加文字描述引导 2020.11.19 调整增益道具UI 增加道具洗练，将摩拉进行消耗 调整暴击逻辑，增加随机性 游戏 Tip：
点击保存，保存的游戏进度在本地，离开再回来，仍能继续。 ◀返回游戏</description>
    </item>
    
    <item>
      <title>不可不知的项目推进与团队建设之道</title>
      <link>https://kuhung.me/2020/pmp/</link>
      <pubDate>Mon, 26 Oct 2020 23:21:09 +0800</pubDate>
      
      <guid>https://kuhung.me/2020/pmp/</guid>
      <description>项目管理好坏，决定了项目的成败。无论做什么工作，项目地企划、执行、效果评估、复盘，总是必不可少的。
我们可能遇到过如下场景：
业务方提出需求，扑哧扑哧做个几周后，却发现并不是他们想要的。这样的后果就是： 项目结果被搁置
几周的开发时间浪费
业务和开发其乐融融，第一版也顺利交付，而后由于老板或者更高一级负责人的要求，要做的功能点越来越多，以至于现有功能延误。 需求的企划，项目的推进、以及团队的建设，对于结果的影响，是强相关的。做好以上三点，有两个好处。一来，可以减缓项目的失败风险，二来，也有助于团队更高效地产出。
以下内容，框架节选自书籍《程序员修炼之道》，根据理解有部分删改。《程序员修炼之道》，是软件开发的经典之作。对于软件行业的原则性问题，进行了详细而又到位的探讨，出版二十余年。第二版添加了最新的潮流趋势，由云风翻译，质量上乘，值得推荐给大家。
一般做阅读，都是带着问题来的，为了解决对应问题。项目管理方面，也有经典之作 PMBOK，不过那本书蛮厚的，还没消化完全。以下内容，解答了我对于需求、项目以及团队建设的部分迷思。大部分摘录自《程序员修炼之道》，穿插工作中的心得体会。希望给读者朋友带来帮助。也希望自己，能常读常新，在工作中实践、反馈、进步。
项目启动前 需求——没有人知道自己想要什么 在每个项目启动前，往往是需求的对接。
业务部门想要的是什么？是大老板拍脑袋的需求，还是确切有利于业务问题的解决？
之前的职业经历中，遇到的很多需求，都是大老板拍脑袋，然后层层传递下来。到了执行层，基本无法判断其真实的目的。最后只能和末端的需求人员对接，成了单一的传声筒。
这种情况，十分危险。
根据乔老爷定律：没有人能确切描述自己的需求，直到你把产品摆在他面前。
这样的后果就是，为了缓解高层的焦虑，做了很多脱离实际的功能。而一线，最熟悉用户的人，许多业务中的改进点，却只能搁置。
灯塔——开发人员的职责 作为开发人员，尤其是作为数据开发、数据挖掘人员，我们的职责之一，便是帮助他人了解想要什么。因为，产品数据、模型效果等最直观的感受者，还是我们。只有我们才知道：什么能做、能做到的程度。这也是区分初级和高级工程师的因素之一。
在帮助他人澄清需求时，常见的错误，便是照单全收。这往往会为后续开发，埋下隐患。人们的日常沟通，尚存在许多误解，更别说涉及开发建模的活。
正确的做法，是复述一遍，将自己理解的程度反馈出去，并明确问题的边界。如果，刚好对业务领域了解不深，则更应该通过沉浸体验业务、复述需求等方式，寻求反馈。
什么需求是好需求 与此同时，在需求澄清过程中，应当区分需求与策略。需求，是指功能上的开发，以期望实现某种功能。策略，则是一连串的活动，保证达到某种效果。一般而言，策略抽象自需求。关注更高层面的抽象，为底层需求做好准备，DRY（Do Not Repeat Yourself）。
抽象的，且能简单直接反应业务需求的，才是好需求。
另外，做好需求的文档化。需求文档化，不是说要去交付它；而是说，将其作为开发过程的记录。这种方式，能较为清晰的记录，软件开发过程中的 Eureka 高光。这些点子，兴许是下个需求来源，或是创新的突破口。
为什么项目会失败 查理·芒格说过：如果知道，我会死在哪里，那我就永远不会去那里。
一般而言，项目失败有两个因素导致。一个是：功能的不断膨胀。也许一开始，只是添加了一个小功能，最后却成了臃肿的庞然大物。
另一方面，则是需求的变化。昨天需要的事物，在今天可能就没那么适用。
如何破解该难题：其核心便还是，持续的反馈。
项目进行时 项目难点的处理 项目中的直接阻碍，来源于项目本身需解决的问题。除了自然界的熵增，可自发的进行。逆熵行为，无一例外都会遇到困难。所以，问题并不可怕，特别是当你知道，如何处理时。
那么，如何处理项目中的难点呢？
第一，先检查约束条件。约束条件是指，项目的边界。诸如：时间、资源配给，期望的效果等。审视，项目一开始的条件，和当下条件的差异。时刻检查，条件是否发生了改变。
第二，反问自己。为什么需要解决这个问题，为什么你需要解决这个问题。问题的收益和付出，在不同层面，是都成正比的吗？如果是边界的问题，你能消除边界吗？最后，再问问自己，类似的问题，其解决方案是什么。
处理难题过程中，值得推荐的是：新建一个文档，记录思考和开发的过程。现实生活中，不同于考试做题，没有明确的对与错。记录开发过程，有助于养成主动思考的习惯。
用户共建，敏捷开发 在项目进行时，很重要的一点是：不能脱离用户，而是和用户共建。与直接的用户，形成良好的互动关系。不断提问，不断澄清。决策、实施、演示、反馈。
传统的工作模式，是瀑布流式的工作方式。一切都规划好，然后按部就班实施。瀑布流的好处是，能看到一个大的愿景。但其坏处，也很明显：不够灵活，容易需求延期、特性膨胀。
敏捷方式，则克服了瀑布流的缺点。整个是一个三步走流程。首先，评估当前的处境。然后，朝着预期的方向，做一次最小化的改进。最后，明确事情的边界，让事情先运转起来。敏捷也有其缺点：变更频繁；难以全局最优，常常陷入局部最优。
最后，在项目进行时，不要一个人埋头进去代码。参加代码评审等活动，了解和学习别人的代码优点，也能让自己的代码更鲁棒。同时，也别忘了，遇到问题，求助他人，也是一个解决问题的中上之道。
项目交付 项目的最终目标 项目交付，不是一锤子买卖。这项活动，是类服务业：其最终目的，是解决用户的需求，让用户愉悦。
要记住，用户需求的并不是代码，而是代码逻辑后的解决方案。
所以，过程可能并非那么重要。如何挖掘用户的期望，让用户满意，才更为重要。
以终为始，挖掘期望 如何挖掘期望，不如看看《高效能人士的七个习惯》之二——以终为始。让我们从项目结束的角度，思考和评判如何叫做成功。
一旦我们记住了从期望出发，项目交付就会容易很多。以期望出发，需要确保项目中的每个人都清楚该期望。在做决策时，也尽量选择靠近该期望的路径。根据现有期望，去分析用户的需求。如果有更好的方案，能满足用户期望，则大胆的提出需求变更。最后，随着项目的进行，不断地审视期望。
在项目交付时，签上你的名字。程序创造是一门艺术，留下签名，不仅是责任，同样也是自豪感的体现。
团队建设 以上活动，离不开团队。一个好的的团队，会让事情做起来事半功倍。如何打造优秀团队，使其成为项目的牢固支撑，也是项目推进的重要一环。
优秀团队的定义 首先看，优秀团队的画像。对内，成员及时沟通。DRY 不做重复的工作。对外交流，团队成员是个性独特、心情愉悦的。外界听到的声音，是一致的。这要求团队氛围活跃，同时也要求项目文档清晰、准确、一致。且在会晤前进行了充分的准备。
曳光弹开发 项目采用曳光弹的开发模式。
曳光弹，和敏捷的概念类似。在夜晚作战时，先打出一发曳光弹，照亮目标区域，以期后续能精准命中目标。曳光弹开发，要求：个体互动高于流程工具；软件支撑高于详细文档；客户合作高于合同谈判；响应变化高于遵循计划。
建设务实的团队 另外，建设一个务实的团队，也十分重要。务实不务虚。Talk is cheap, show me your code.</description>
    </item>
    
    <item>
      <title>数据开发在2020年应当是什么样子的</title>
      <link>https://kuhung.me/2020/data-engineering-in-2020/</link>
      <pubDate>Thu, 17 Sep 2020 21:51:46 +0800</pubDate>
      
      <guid>https://kuhung.me/2020/data-engineering-in-2020/</guid>
      <description>我的工作是数据挖掘，很大程度依仗数据开发。如果说数据挖掘是在烹饪美食，数据开发就是选食材、清洗食材的过程。没有好的数据开发，就没有好的数据洞察。 恰好，我自身也经历了两家不同规模的公司。由于起点的先后，前者的历史包袱严重。基于惯性，数据挖掘的任何数据，都得从原始log中提取。没有数据治理、数据分层的概念。这不仅增多了重复性的劳动，也增加了服务器集群的压力。数十款 top 游戏，每一款、每个人都这样搞，浪费时间、浪费算力。 目前这家，则大不相同。技术债不多，数据治理做得还不错。没有大谈特谈数据中台，数据开发的每一行代码，都是为下游，而不是晋升服务。数据挖掘也很少碰原始 log，这节约了大量时间，让下游有更多时间集中在业务上。
同样是数据开发，却产生不一样的结果。这让我对该工作的定位，产生了兴趣。也这篇文章的由来。
言归正传。本文翻译自：https://towardsdatascience.com/data-engineering-in-2020-e46910786eda 结合实际工作，有较大幅度删改。
随着数据体量的进一步增大，数据处理工具和技术的发展也日新月异。数据开发的工作性质也发生了巨大变化。如今所使用的工具，同十年前已大不相同。
虽然技术在发展变化，但还是存在延续性。除开大数据开发相关技能，一些更基础的技能，也值得学习。例如：版本控制（git，svn），测试驱动（TDD），继续集成和部署（CI，CD）。而这，常常容易被初学者忽略。数据开发与软件开发常常呈现割裂状态。事实上，软件开发的工作流，对数据开发是一种补足。
早期的 ETL 工程师 大数据热潮之前，数据团队常常由 BI 和 ETL 开发组成。
典型的 ETL 开发，就是将数据集从位置 A 移动到位置 B，并使用该数据构建部署到 Web 的仪表板（BI）。除此之外，BI 和 ETL 的开发与软件工程无关，该学科在本世纪初已日趋成熟。（事实上，很多公司这一步都没做好。就开始吹捧数据中台概念，为晋升找噱头。）
随着数据量的增长，以及数据分析需求的增加，在过去十年中，出现了新趋势。更现代的 BI 工具（如付费的 Tableau，免费的 D3.js 等），允许以最小成本创建仪表盘。数据开发已成为一门新学科，它使用一套新工具将软件工程原理应用于 ETL 开发。
如今的数据开发工程师 一般来说，为了使流程更加顺滑，会创建数据管道（data pipeline）。在大规模数据上，这意味着将十多种不同的技术（甚至更多）融合在一起。数据工程师必须深入了解各种技术，选择合适的工具来完成工作。并用 Scala，Java 或 Python 编写代码，才能创建弹性和可扩展的解决方案。数据工程师必须了解他们的数据，才能创建合适的分布式处理作业。数据工程师必须了解基础架构，才能确定作业失败的原因。
从概念上讲，这和典型的 ETL 作业没有区别。都是从许多数据源收集数据，将它们放入集中的数据仓库中以备分析。接着，将其转换为BI报表或机器学习模型。但是，他们之间的唯一区别，就在于数据体量的不同。后者在大规模数据下，面临更多挑战。
数据开发产业现状 在很多文章中，建议数据工程师应具备如下工具使用经验：如Hadoop，Spark，Kafka，Hive，HBase，Cassandra，MongoDB，Oozie，Flink，Zookeeper 等。
了解它们的使用，是最基础的。知其然，更要知其所以然。不仅需要掌握他们的使用，更应该明了：它们旨在解决哪些特定问题，应该或不应该在哪里使用。如果不能使用，还有什么替代方案。
近年来，快速发展的云技术，已经产生了各种各样的云原生应用程序和服务。就像几年前现代 BI 工具的应用，更多的业务可以便捷的进行数据分析。现代的云原生数据技术栈，简化了数据的提取和转换任务。
像 Apache Spark 这样的技术在未来几年仍将流行，因为它们非常适合复杂的数据转换。
尽管如此，Snowflake 和 Google BigQuery 等云数据工具的使用率很高，因为他们简化了数据提取的过程。
而Spark，则需要一定门槛的专业化的技能。
目前来看，国内的类似产品 MaxCompute，市场接受度似乎还不高？snowflake 前两天上市了，投资人挺喜欢它的故事，巴菲特也跟投了。
数据开发技能清单（补充） 除开基本的数据开发技能，如 Hadoop 那套生态外，还建议掌握如下技能：</description>
    </item>
    
    <item>
      <title>2020高考志愿填报中的数据误导与价值机会</title>
      <link>https://kuhung.me/2020/statistics-tell-lies/</link>
      <pubDate>Sat, 25 Jul 2020 20:43:52 +0800</pubDate>
      
      <guid>https://kuhung.me/2020/statistics-tell-lies/</guid>
      <description>高考发榜，已经有几日。这篇文章姗姗来迟。还是希望，给各位考生朋友，补充有价值的信息。2020，迟到的高考，落下帷幕。紧接着，就是志愿填报环节。
想起自己当年，突然要选择自己的专业，那是慌得不行。草草的根据自己分数，划了几条线，填了武大、华科、同济、天大。然后又在最后一刻，决定学门手艺。将华科调到了最前面，并且选择了目前的专业，一个名字听起来很酷的专业。于是，就这样来到了华科机械大类下的测控专业。
但是，在度过四年时光后，却没有选择机械，而是选择了互联网。一方面，是原专业的就业环境，与志愿填报时的预期不符；相信每一位机械同学，都是想着做酷炫的机器人、或者是参与“大国重器”的建设中来；但实际上，即使是华科，机械全国前三，可选择的余地也不多。另一方面，是薪资成长性，传统机械，十年磨一剑，适合耐得住寂寞，有家底的同学。而就在刚刚，在专业大群里，惊闻自己这个专业，今年不再招生。
以上，足以见得：志愿填报，和投胎一样，也是个技术活。个人努力，行业趋势，两者不可相悖。选择，某种程度上，比努力重要。有效决策，能放大努力的价值；浮于表面的选择，则会冲淡寒窗苦读的日夜。
志愿填报，就是个决策问题。决策过程，一般是多方面因素的聚合，最终反应决策体的综合认知。一般来说，会是感性的认知+理性的数据。但是，并不是所有人，都能做出好的决策。即使是年长的父辈，虽然在其他方面，做出了很棒的决策。但受限于其人生经历，在志愿填报上，也可能会做出次优的决策。
好在，人类的长处，就是从别人那里吸取教训。他山之石，可以攻玉。
让我们抽丝剥茧，从不同角度，挖掘志愿填报中的“天坑”与机遇。
第一个“坑”，获得性偏差。
获得性偏差，是一类感性偏差。通俗来讲，就是：在没看到黑天鹅之前，以为所有天鹅都是白色的。
想自己填报志愿那年，家父说：隔壁村老李的儿子，填了重大（重庆大学）的土木，12年毕业，没两年就重庆买房了。所以，你也去填土木吧。
咱先不说，乡里乡亲的习惯性夸大。看看现在的房价，似乎有道理。但别忘了，中间15年也有一波下挫。回望08年次贷危机，为提振经济，国家拨了大量资金，流向基础建设。那几年，土木着实赚钱。但产能逐渐加码，没有宏观调控，势必过剩。没过几年，商品房库存开始堆积。家父肯定没那么神机妙算，能猜到后面的货币化安置。那么，我看到了当时的产能风险了？也不是，单纯想往机械钻&amp;hellip;
而我想往机械钻的念头，也不是无中生有。来自于众多宣传片的鼓舞。这其中，少不了一只飞虫拍三集的《走近科学》；以及鼓舞人心的《大国工匠》。这些片子的出发点是好的，激发国民的好奇心，弘扬钻研精神。也要感谢他们，社会才不至于太浮躁。但是，同样的，行业的枯燥、重资产轻人工，却没能显露出来。这些问题不暴露，不是说无关轻重，而是默认，每个人都知道。但是对于一个学生，如果没有高人指点，他知道的，只能是他看到的。
上面两个例子，说的就是获得性偏差。这样的例子，不仅出现在志愿填报。想想看，我们的日常决策、企业决策，是不是也有很多？
第二个“坑”，数据误导。
首先是，用有限的小样本，代替整体样本。最有代表性的，就是各类软件培训机构。如今，大家都知道，搞互联网IT，表面上比其他行业挣钱。这催生了大量培训机构。在招生简章中，可以看到：某某学员，以xx万入职xx公司。这一听，好像几个月工资就能回本。但他玩的就是有限样本的把戏。尚且不说，这某某学员是否真实存在；即使他存在，也不能代表真实的期望。数学中的期望，不是拿最好的来说事。一般人，正态分布到两端的概率，十分之小。
其次是，用各种不一的口径，暗示自己很强。没错，这里说的就是各类大学排行榜。今天你出个排行榜，说自己很强；明天xx机构，又出个排行榜，排名一下发生巨大变化。大学排名，可以参考，但也不能全信。评级机构的公信力，很多都无法考证。最近还流行，将各个排名取平均，显得很客观，但实际，其中的加权怎么定，重合的指标有无剔除，混合排名的人，可能自己都不知道。相较而言，各榜水平稳定的高校，买榜的概率更小。比如：清华和北大，稳居前二。如果你不能识别，那就最好不要花太多时间在上面。
第三个“坑”，暗示因果。
暗示因果的最强例子，就是分数了。一般来说，大伙儿都会参考去前年的录取分数、最低录取位次，以此来判断这所学校的价值。这里有一个假设：即分数高的学校，是好学校。分数高的专业，是好专业。其中深层次的假设是，分数高的人，所作的决策是明智的、充分掌握信息的。还有一个，是分数充分反应市场热度。但其实，这几个假设，有相关性、但没有强因果性。因为，分数高的人，他的信息也不全面。他在这场博弈中，掌握的只是先手机会。而与此同时，操作最低录取分数，已经成为了潜规则。冷门专业放提前批，或者换个紧跟潮流的名字，都能大幅提高最低录取分数。
还有暗示因果的，就是名字。这样的情况，多出现于xx大学xx学院，或者是xx大学合作办学。虽然这样的情况，在最近几年有所收敛，但打着其他学校幌子招生，还大有人在。对于这样的学校，其实名字中就已经存在溢价。除非你对该院校很熟悉，做过充分调研，可以选择报考。尽量避免望文生义，根据一些名字上的关联，联想出一些不存在的关联。
最后，说了这么多，上面是一些坑点。而与此同时，也存在价值机会。其实，不同大学，在不同地区，其录取排名并非一致。这说明，不同地区人，对该大学认知程度不一。在综合考虑地域远近，以及投放招生指标的前提下，寻找在当地被低估的外地学校，是一种值得尝试的方法。因为，据观察，留在大学所在地工作的，占比很小。除了北上广，其余地区的大学，都是给一线输送人才。选大学，不等于选择了后半生的定居地。
另一个方面，建议在自由度上多花功夫。这里的自由，并不是指自由逃课、管理松散。自由度，在机械机构中，往往指机构可能的运行的空间。在机械设计中，越多的自由度，代表能做越多的事情。在选择专业上，我的看法类似：应当保证充分的自由度。原因如下：
学生对于专业的认知，多源于综合信息，本身的匹配程度不可知。 充分的专业自由，学习自由，有助于帮助学生认识自我。 自由度在专业上的体现，就在于：提供机会转专业、能够跨专业大类选择。可能有些高分考生不认同这点，认为：考这么高，还去选择通识大类，不是浪费机会吗？确实如此。但如果选的专业，不是理想的那样，再高的分数，也只是过去式。
其实，自由度还在其他方面有体现。北上广的火热，究其原因，还是提供了视野的自由度。更前沿的市场环境、更多的就业机会。这些都是在提供自由度。与此同时，综合类院校、大力发展文科的理工科院校，也是在保证思想的自由度。巴菲特的得力投资伙伴，查理曾说过，跨学科的思维，帮助他赢得了投资的成功。
最后，无论填报结果如何，这都不是一锤子的买卖。进入好的大学、好的专业，不代表后半生就安稳了。进入不理想的专业，也不代表，后半生就玩完。没有永远的避风港，坚持刻意练习，积累职场竞争力，才是最优方案。</description>
    </item>
    
    <item>
      <title>云游戏，会是反作弊的银弹吗？</title>
      <link>https://kuhung.me/2020/game_anti-cheat/</link>
      <pubDate>Thu, 18 Jun 2020 23:18:26 +0800</pubDate>
      
      <guid>https://kuhung.me/2020/game_anti-cheat/</guid>
      <description>游戏反作弊，一直是各大游戏厂商头疼的问题。究其根本，游戏，本身是一种软件产品。交付到用户侧时，你永远无法穷举，玩家会怎么使用它。只要有利可图，就会有人去钻空子。
为了反作弊，各大厂商，也是用尽各种手段。除了内部的反作弊团队，还有法务团队的律师函警告，甚至直接招安外挂开发者。说到底，游戏反作弊，有没有一个终极方案呢？
数据挖掘，说是近5年的火热技术，没得跑的，甚至连电视剧里，都开始出现这个职业的主配角。
这个职业，被寄希望于做炫酷的事：**在庞杂的用户数据中，找到其特有的规律，找到导致现状的原因、预测未来的发展。**数据挖掘，在游戏反作弊，可以做些什么吗？
数据挖掘 整体行业概况 数据挖掘行业，如今有如下两个趋势：一个是计算广告，及其相关的推荐系统。这套东西，是信息流产品的核心。扩展开来，包括用户画像、用户生命周期等内容。
另一个，集中在敏感内容、反欺诈的识别上。这个方向，只要用户生产内容，就不可避免。换而言之，是 UGC 内容平台、活动平台的刚需。同时他又是一个劳动密集型工作，很适合用机器节省人力。
游戏中的数据挖掘 在游戏领域，数据挖掘又分为两个大方向。各个公司的AI lab，会去研究一些前沿技术。诸如强化学习、或者是迁移学习的事。满足玩家个性化的需求。其特点是：前瞻性强，复用性高，但落地困难。
而在业务侧，围绕玩家生命周期展开：渠道转化预估，异常渠道的识别、高潜玩家发现、流失的预测等。其特点：复杂多样、垂直性强，常需要单独建模。
游戏内，对于一个用户的刻画，十分具体。从基本的在线、消费；到玩法偏好、好友关系，都会有专门的标签画像。这些画像，帮助企业更好理解玩家，提供更细致的服务，达到 win-win 的目的。
对于多产品的公司（如：网易），数据互通，是其最迫切的需求。各产品数据独立，制约了它的社交属性，虽然在“洗用户”上表现克制，但数据资源白白浪费。如果是一家正在扩张业务线的公司，需提早防范：数据壁垒的出现。
如果把游戏反作弊抽象，实际也是风险控制的一个环节。风险控制有哪些注意事项？它的核心是什么，又该如何去应对挑战呢？理解风控的这些知识，有助于我们做好反作弊。
近现代风控，起源于二战后。而后迅速发展，形成以：金融业风控为代表的垂直学科。而随着80年代互联网的发展壮大，各类风险，也随之而至。
如今，互联网上的羊毛党，垃圾信息、黑产随处可见。和正常内容，争夺着用户的注意力。同时也影响着业务安全。在业务侧，安全业务可分为两类：一类是静态的账号、内容安全；另一类则是动态的行为安全，诸如活动安全等。
风控领域浅析 风控的核心 谈起金融的核心，大家的第一个念头，一定是风控。而风控的核心，则是成本控制。而成本，则不是简单的金钱成本。除了财力、物力、人力，这样的企业端成本，还应该注意，用户侧的成本。比如：用户体验的成本。
如今，互联网上，打开app前10s流失的用户，其数量之大，很可能超乎你的想象。如果为了风险控制，而过分牺牲用户体验，其实是得不偿失的。如12306的验证码，它的本意是防范刷票风险，若图库的区分度小到极端，则是过分牺牲了用户体验。
除了资源成本和用户体验成本，还有一个容易忽视的，是企业的信用成本。虽然互联网的记忆，只有短短7天；玩弄话术，运用公关手段，能够消除一时的风险。但对企业长期的公信力，其实是一种消磨。
产品出问题了，还可以修补。信用丢了，那就找不回了。
风控的挑战与应对 风控，显著性地，不同于其他业务。其他业务，存在的业务逻辑失效，是来自场景、数据、时间的漂移。即，随着时间、事态的发展，运用场景、数据表现产生了分布上的改变。而风控，则来自于强烈的对抗。道高一尺，魔高一丈。
传统意义上，为了应对风险，衍生出4种模式：
回避风险 控制风险 转移风险 承受风险 一般来说，企业主要精力，花在控制风险上。不是所有风险，都可以回避。在控制风险的同时，也可转移部分风险，最后准备承受风险。这部分，在之前的文章《浅谈互联网风控——从策略到技术》有详细介绍。
策略上，分为前中后。前：打标签，标记风险用户、风险内容。中：拦截风险，对高危操作进行干预。后：回顾每个环节，堵住漏洞。同时辅以核心指标的监控，在所有措施失效时，留一手兜底措施。
技术上，给用户准备丰富的画像，从自然人、设备、账号等角度，刻画用户。用以支持风险的识别，策略的实施。
最后，别忘了它的对抗特性。这要求我们，持续不断的演进技术、策略和手段。
游戏作弊，其实就是游戏内的风险。它不仅会影响游戏产品的体验，使产品走向，偏离策划的初衷。更会影响玩家间的平衡，进而影响产品的营收。更进一步的，让游戏失去吸引力，导致产品失败。
游戏反作弊 作弊的形式及手法 谈到作弊的形式，不妨从一个玩家的角度出发。为了获得碾压感，满足感，玩家会从以下方面入手：
为了获得满足感，玩家会修改道具获取逻辑，不付费、或者修改货币值，获得道具和服饰。
为了获得数值上的优势，调高伤害、减轻承伤。诸如“无敌”或者“锁血”，可属于这一类。
而对于时间换物资的“肝”玩法，则通过修改产出逻辑、或改变游戏内的时间节奏获取。
而在信息不对称玩法中，则通过读取数据，以此获得优势。例如：吃鸡游戏中的透视。
上述的种种作弊，其核心在于数值，其次在于程序逻辑。因此，在客户端，玩家可通过注入代码、读取内存实现。在客户端与服务端通信过程中，还可伪造中间人，截取、修改数据。更甚至，反编译游戏包体，生成一个看似一样的安装包。修改内在逻辑，重新打包。
游戏反作弊的业务逻辑 反作弊业务逻辑中，最重要的一环，是误判的处理。在作弊识别上，我们可以达到99.99%的准确率。但那万分之一，也是一个鲜活的玩家。如果误判了玩家，怎么办？除了提高准确率外，还应健全机制，预留申诉、回旋的空间。不至于，因为莫须有的判罚，让忠实玩家流失。
在技术层面，游戏开发时，会有两个地方进行校验——客户端与服务端。客户端，通过基本的签名校验，保证不被篡改。服务端，则对发回的数据，再次校验，综合其它数据，进行判断。数据挖掘起的作用，则是发现、总结作弊模式。在进行业务处罚的同时，反馈到开发过程中。
效果检查方面，游戏反作弊，又有其特殊性——不可证伪。不同于广告的点击，有明确的反馈。如果一个玩家，模型说他作弊，但他声称自己没作弊。那到底，是谁有问题？
在其它业务，会用客户投诉率，作为服务质量的考核。但客诉率在这里，不是一个好指标。因为，对作弊的处罚，势必引起玩家的不瞒，投诉中真假参合。
真正应当关心的，是核心指标的变化。比如，作弊让游戏内某项资源，产出大幅加倍，我们的效果指标，则应该是该资源的产出率。
而对于实锤作弊玩家，作弊的处罚，也不仅仅局限于封禁。在强社交游戏中，封禁他的社交行为，也是一种惩罚——即能警示其它玩家，又不至于影响正常游戏行为。除此之外，对于对抗类游戏，play with cheater，也是可行的思路。
最终目的与终极方案 游戏反作弊，更像是电子世界里的警察——打击罪犯，惩恶扬善。反作弊系统，能发现并打击作弊，但想彻底根除，只有一条路：关闭服务器。所以，反作弊的终极目的，不应当是：根除所有作弊；而是，赢得玩家信任。用各种手段，减弱不平衡，保障正常玩家权益，建立玩家对系统的信心。
前段时间，云游戏出现在大家视线。除了不受终端限制的便利外，媒体更是惊呼：“这是作弊者的末日！”。因为，客户端和服务端都不在玩家侧。但仔细想想，云游戏，真的是反作弊的终极方案吗？替考是作弊，AI 替打游戏呢？物理外挂，算不算作弊呢？
所以说，反作弊就是个开放世界游戏，当你以为快通关时，又会有新的冒险，等着你出发。
关于作者</description>
    </item>
    
    <item>
      <title>我为何离开网易游戏</title>
      <link>https://kuhung.me/2020/why-i-left-netease-games/</link>
      <pubDate>Wed, 13 May 2020 00:41:54 +0800</pubDate>
      
      <guid>https://kuhung.me/2020/why-i-left-netease-games/</guid>
      <description>前言 网易游戏是我毕业后的第一家公司，说没有感情，那是不可能的。当然，这感情主要针对那里的同事和朋友。
网易又叫猪场，猪场曾一度有最好吃的免费食堂，一度给名校毕业生开最高的工资。
在数年前，大话西游2帮助公司起死回生。
而后开发的梦幻西游，成了公司最强的现金流来源。
2016年阴阳师爆款，几乎成了全民游戏。
2018年，加入网易游戏，带着自豪感。因为它说：用心做游戏。
2020年，离开网易游戏，矛盾夹杂着解脱。
当知道我离开网易游戏时，许久没联系的朋友，都感到十分吃惊：这可是头部互联网公司，好多学校的人根本没资格进入；但熟悉我的朋友都知道，这件事已经“蓄谋已久”。
这其实源于一些观念的冲突。
我本人关于工作的信念是：个人以一定价钱出售其劳动产出。个体与组织的关系，是合作而不是卖身。
正如《软技能》一书所言，改变打工心态，把自己当公司经营，现在的公司是个大客户，仅此而已。
下面，从商业模式，特别是个人角度，来谈谈离开网易游戏的原因。
商业模式个人篇 核心资源 商业模式中，很重要的一点便是：核心资源。即我是谁，我拥有什么。这个问题颇有——我是谁，我从哪里来，我要到哪里去的意味。
一般年轻人认为，我拥有用不完的精力，因而相较于更年长的员工，我的核心竞争力在于可以加班。
这样的想法大错特错。年轻是试错的机会，而不是让人无故内卷。没错，这样的“一般年轻人”便是两年前的我。
什么是核心资源呢？稀缺的是核心资源。人无我有、人有我精的，才是核心资源。
从这个角度想下去，所具备的技术技能、行业积累，以及对新事物的热情，才是真正的核心资源。
关键业务 关键业务，简单来说，就是每天所从事的事情。
但这里，根据28定律，20%的工作，产生80%的绩效；所以这里的关键业务并非指剩下80%的工作。
什么是80%的工作呢？在数据挖掘这个领域，80%的时间是在产出数据，保证数据的及时响应。
每天的取数工作，这个岗位的从业者有了新的绰号——取数男孩（茶树菇）。
剩下20%的工作，在提供数据的洞察。关于数据的过去与未来，溯因与预测，提供基于数据模型的决策方向，才是岗位的关键业务。
而80%的非关键业务，应当想方法标准化、自动化，以提高效率。而不是每天用 excel 做各种变换，洋洋洒洒写一份无人执行的分析报告。
客户群体 客户群体，是商业模式中的概念。正如一开始所言：公司，其实就是我们的大客户。
公司内的直接上级、boss、或者其它部门的人，都可以是我们的客户群体。
在这些客户群中，有人认为，向上管理是第一位的。即：做好上级和上上级的需求，服务好他们，才是升职加薪的正确之道。
这点上，我只同意一半。哪一半，后一半。即服务好我们的客户，才能赢得信任，才能得到更高的回报。
向上管理没问题，但向上管理很多时候成了唯上。我们的客户，是上级、是团队、更是整个公司。服务好每个部分，同等重要。
价值服务 这个概念是商业模式中，最重要的，因为它决定了你的定价区间。
简单来讲，我给客户提供的服务，帮助客户完成事情，其背后的价值，才是真正的价值服务。
价值服务和关键业务容易混淆。关键业务是干的活，而价值服务则是干的活所产生的价值意义。
同样的，有人认为，公司招聘我，就是买断了我的时间。而不去进行更深层次的思考。
实际上，买断一天8小时的时间，只是表象。客户期望的是能产出有价值的东西。如果这样想，就会明白，时间不是关键，给公司带来的价值才是。
渠道通路 渠道通路，简单来讲就是，如何宣传自己、以及如何交付服务。让别人知道自己能做的事情，且能够交付服务。
这里关键的问题在于，潜在客户如何知道你能帮助他们、是如何下定决心的、是如何购买的；以及如何交付及售后。
酒香不怕巷子深，这是很多技术型同事的想法。会觉得有了自己的东西，才能更好让客户接纳自己。
这个观点没错，是一种踏实务实的想法。但仔细想想，宣传服务和打造服务之间互斥吗，并不互斥。
只有找准自己的价值服务，并进行宣传，才会有买家认账。不管这个买家是领导或是别的团队。只有卖出去了，才会有实际的回报。
客户关系 客户关系讲的是如何和客户打交道。
是直接沟通，还是远程服务。
是一锤子买卖，还是长期性的维护。
是拓展新客户，还是维系老客户。
一般来说，公司招聘员工，希望的是能做持续性的项目。
但某些考核标准下，如按项目分成模式，持续性项目就少有生存空间。
自上而下，希望立足够多的项目，借此来分得一杯羹，因而出现了炒冷饭的情况。
最后面向晋升编程，晋升过后无人维护、一地鸡毛。n年过后，该项目又被下一个人立项。
项目失败不可怕，因为可以从失败中总结教训。可怕的是不断的立项，在公司内做一锤子买卖，造成无端的资源浪费。
重要合作 合作一般基于交换，这里的合作，指的是谁可以帮我。
他们可以是家人、同事、是导师、也可以是同一职业的其他人。他们提供帮助、建议和成长机会；提供必要的资源。
作为互联网新生代，信息不像之前闭塞。虽然信息茧房确实存在，但互联网确实是重要的合作对象。
而在公司中，提供资源和方向的一般是直接上级。
收入来源 简单来讲，大伙儿的收入来源是工资；其次，少部分收入可能来自于股票、基金或者房屋出租。
打工的主要收入来源便是工资。这里存在两个问题：
一是，工资奖金上涨带来的愉悦，存在边际递减效应。即同样的涨幅，越到后面越没感觉。更别说大部分人薪水几乎无变化。
其次，单一的收入来源伴随着风险。不管和领导关系多么密切，公司现金流多么充沛。小概率事件必然发生。
破解这两个问题的方法在于：
工资到了一定水平后，需要关注精神的满足。工作的成就感和社会贡献，就显得尤为重要。
其次，发展多重收入。可以是被动收入，也可以是主动收入。</description>
    </item>
    
    <item>
      <title>思维导图｜数据分析</title>
      <link>https://kuhung.me/2020/data_analytics_mindmap/</link>
      <pubDate>Wed, 06 May 2020 22:18:50 +0800</pubDate>
      
      <guid>https://kuhung.me/2020/data_analytics_mindmap/</guid>
      <description>思维导图获取 .xmind .pdf .png 关于作者</description>
    </item>
    
    <item>
      <title>思维导图｜15份结构化知识整理</title>
      <link>https://kuhung.me/2020/mindmap_2020/</link>
      <pubDate>Sat, 25 Apr 2020 17:22:57 +0800</pubDate>
      
      <guid>https://kuhung.me/2020/mindmap_2020/</guid>
      <description>思维导图，是结构化思维的具体表现形式。最鲜明的例子，就是当你和一个人聊天时，可以很明确的感觉到，拥有结构化思维的人，他的语言组织能力很强，且很有层次感。简单来说，就是和他沟通，简单高效、有收获，有层次感。
在过去几年里，也整理了一些场景的思维导图。大约是从15年，上大学的第二年，第一次接触到这个东西。不过略微遗憾的是，早期是一些手绘的内容，没能保存在身边。以下是电子化的内容，分享给到大家。
这里，不仅有思维导图 png 格式，同时也有其 xmind 源文件。授人以鱼不如授人以渔嘛，可以参照之前的文件进行修改（xmind 公司，看到后请给我打钱）。
免费获取思维导图 沟通与整理 沟通的艺术 要说人类在哪一点优于其它物种，当属语言沟通。但沟通也不是与生俱来的本能，不然就不会有这么多的冲突了。沟通是一门艺术。
沟通的艺术，是一本15年在图书馆看的书。这里就不得不夸奖一下华科的图书馆，人文社科和财经类的很齐全，F开头的书基本都能找到。
沟通的艺术从理论层面，给出了沟通的原理，同时也指出了很多解决办法。类似的《非暴力沟通》也是一本不错的书。
超整理术 超整理术也是一本在图书馆看的书，书的设计感很强，贴合了他的标题。
整理对象分为了三个部分：包括物理空间的整理，交流思绪的整理以及信息的整理。
整理的过程，也是思维重建的过程，这和思维导图的建立相得益彰。
思维与学习 批判性思维指南 了解这个领域的动机是，大学参加的数场讲座。在讲座过程中，都会有提问环节。
但是这个环节，明显可以感觉出不同的人有不同的思维敏锐度。有的人提问水平非常高，有的就是复读机，问的问题不痛不痒。
学会提问，个人认为是现代人比较稀缺的技能，特别是高等教育的大学校园。
金字塔原理 麦肯锡都在用的金字塔原理。简单来说，就是独立穷举（MECE）的分组、层次化的表达。
其实实不相瞒，咱们高中的议论文写作也是这个套路。
在工作中，这也是一项极大的加成。利用金字塔原理，让你的观点更容易推销出去。
学习之道 学习之道（the way to learn）是 Coursera 上的著名课程，广受喜爱。如果能更早看到，也许北大清华就不是梦了。
学习的方式因人而异，但其背后的原理却差不多。对知识点重构组块，反复练习，是学习绕不过的弯子。
经过思维导图整理后，学习之道被应用到了学习之道的理解上面（无限套娃）。
写作与演说 演说之禅 演说之禅，略微带些哲学意味。别看展开了这么多，实际是为了方便理解。
演讲是每个人在人生阶段都必经的道路，无论是做面试推销、还是追求异性，都是某种形式的演说。
千言万语归为一句，演讲要关心的是：想推销的核心观念是什么，如果只能用一句描述，该会是什么？
文案写作 写文章，最头疼的还不是素材，不是写什么的问题，而是怎么写。
素材随处可见，再不济跟热点也行。但不是每个人都能写出好的文案。
写文案也是有套路可言的。例如：以情感卖出产品，以理性阐述购买。
时评写作十讲 时评写作是被新闻学院的一个朋友带入门的，曾经的我也是个网络喷子兼键盘侠——“意见不合就是干”。
和他交锋几次后，发现自己简直就是菜鸡。于是他顺势给我推荐了这本书。
在大环境作用下，加上推荐引擎的加持，你所见的，未必是真实全面的。所以，下次就时事开喷前，不妨看看《时评写作十讲》。
技术体系 机器学习 如果问最近5年什么概念最火，机器学习肯定得有一个席位。本人也在15-16年左右，借猫狗分类比赛进入该领域。
随着这一行的火爆，进入的人越来越多，竞争加剧的同时，越来越多的项目也得到落地。
落地越多，成体系的方法经验也得到了总结。机器学习系统设计，梳理了机器学习项目的整个生命周期。
计算广告 谷歌是一个科技公司，但反垄断调查时，它会说自己是家广告公司，以此来逃避反垄断调查。
它能得逞的原因在于，广告占据了谷歌的大部分收入。而广告商又确实不止谷歌一家独大。
计算广告和推荐系统一样，可以说是机器学习的主要应用，对其有一个整体的了解还是很有必要。
测试驱动 TTD 测试驱动，之前被用在软件开发领域。
随着机器学习的工程化推进，测试驱动机器学习也值得关注。
简单来说，测试驱动就类似于：“先出考纲再教学”，让软件开发更有效率。
互联网风控 人类从诞生之初，就一直面临着各式各样的风险。而上世纪80年代兴起的互联网，当下也面临各式各样的风险。
羊毛党、黑产肆虐，一不小心可能老本都被薅没。同时在PUGC平台，用户上传的内容也有各种风险。
但好在，其它领域的风控经验，对于互联网同样有借鉴意义。通过多种策略手段，能在一定程度上控制风险。
其它 敏捷 敏捷（Scrum），简单的来说就是赶紧上，先跑通流程，再去迭代。</description>
    </item>
    
    <item>
      <title>自制以图搜图引擎，居家学习必备</title>
      <link>https://kuhung.me/2020/simple-image-search/</link>
      <pubDate>Mon, 13 Apr 2020 21:17:08 +0800</pubDate>
      
      <guid>https://kuhung.me/2020/simple-image-search/</guid>
      <description>最近宅在家，消遣时间之际，总会遇到一个让我困扰的事情。比如随手刷到的一个GIF，总想找到它的原片。
各位绅士可别想歪，我说的是动漫。
这个问题本质是一个相似度的检索问题。
说到视频找视频，其实可以分解为以图搜图。以图搜图这项技术，已经十分成熟，且已产品化。尤其在主流搜索引擎，很难找到一个不能搜图的引擎。连淘宝都有自己的时尚搜图功能。
但是当你满怀期待上传一张图时，你会发现，他返回的结果要么是同风格作品，要么是图片的描述。摔，我不是让你做抽象阅读理解哇。
这样的现象，实际是个性化需求与规模化需求的矛盾。对于公司，能规模化的，成本越低；定制带来存储成本，远高于能带来的回报。
这样的问题难不倒我们广大的人民群众，如果没有现成的，那我们就造一个。
以图搜图，可以理解为图像的检索，图像和其它信息一样，是可以被索引，被检索的。
于是乎，可以将整个工程抽象为3个部分。
图像预处理 图像特征表征 图像检索 图像预处理，一般是尺寸、色调的调整、以及去除明显的噪声。
索引建立有很多种方法，其核心是构造图像的特征表征。
这里先用简单的，构建一个 MVP（最小可行性产品），就采用谷歌的 MobileNet 啦。
该模型尺寸仅数十M，放在服务器或是部署到手机移动端，完全绰绰有余。（实不相瞒，其实一开始上的VGG16，但是模型太大了，服务器放不下。）
最后，图像检索，当一张新图来到时，对其进行特征提取，然后去索引库中查询，返回特征表征最近的 TopN，一个简单的以图搜图就完成了。
迫不及待想尝试了，但是发现一个大问题，咱们的索引图从哪儿来？总不能凭空捏造噻。
嗯，这也不是什么大问题，之前浏览某P开头，哦不对是G开头的学习网站，发现了知乎问题的爬虫。
这可是个好东西，恰好知乎时间线上，总有一个问题干扰学习——#什么样的腿才叫好看的腿#
就拿这个问题为例，将图片在离线创建索引，随后通过服务端部署。（服务端部署也可以讲一集，但不在这里，别挡住我看腿。）
当当当，随着周末两天的操作，舍弃了俺在的 pubg mobile 战友，谷粒粒的第一个搜图app上线咯。喜大普奔。
让我们赶紧试试，
嗯，还不错
再来一张，
原图秒匹配好吗，还给配上了类似风格的照片。
到这里，咱们的以图搜图小应用，就算开发上线完毕啦。
学习效率上升N个档次有没有⬆
链接地址：以图搜图之#什么样的腿才叫好看的腿# http://img-search.kuhung.cn/
相关文章：
谷粒：机器学习模型部署&amp;ndash;打通前后端任督二脉
谷粒：机器学习落地需攻破的9个难题
声明：该应用仅供学习，禁止用于其它用途。</description>
    </item>
    
    <item>
      <title>思维导图｜《计算广告》</title>
      <link>https://kuhung.me/2020/computational-advertising/</link>
      <pubDate>Sun, 05 Apr 2020 17:42:17 +0800</pubDate>
      
      <guid>https://kuhung.me/2020/computational-advertising/</guid>
      <description>
思维导图获取 .xmind .pdf .png 关于作者 </description>
    </item>
    
    <item>
      <title>思维导图｜互联网风控</title>
      <link>https://kuhung.me/2020/risk_management_mind_map/</link>
      <pubDate>Wed, 25 Mar 2020 00:12:28 +0800</pubDate>
      
      <guid>https://kuhung.me/2020/risk_management_mind_map/</guid>
      <description>关于作者</description>
    </item>
    
    <item>
      <title>浅谈互联网风控--从策略到技术</title>
      <link>https://kuhung.me/2020/risk_management/</link>
      <pubDate>Sun, 22 Mar 2020 14:34:33 +0800</pubDate>
      
      <guid>https://kuhung.me/2020/risk_management/</guid>
      <description>风控，全称风险控制，英文名 risk management。风控的研究起于二战结束后，主要集中在个人或企业的商业保险领域，用于减少突发事物带来的损失。金融行业的核心，乃是风险控制。
但今天，我们这里不谈金融的风控。金融风控已经演化了多年，众多顶尖学者已对其进行了研究，各种模型层出不穷，自有人去分析。我们这里说一说，互联网的风控。
风控的核心 如果你在网上检索，一定会发现很多人，谈到风控，必加智能，似乎不智能就不风控了一般。有人说，风控的核心是智能；也有人说，风控的核心是数据。这些老生常谈，将数据智能看成了银弹，看成了哆啦A梦的百宝袋，能解决一切问题，但其实这种说法忽略了现实。
那现实是什么呢？如果你问，风控的核心是什么。很多人可能回答不上。但你问，为什么你要买保险，很多人的回答会是，不怕一万、就怕万一，保险能够兜底未来可能的大额支出。用小额保费对冲小概率但大支出的以外，换而言之，就是一场成本核算。
成本控制的两个方面 风控对于成本的控制，在互联网主要体现在两个方面。一个是资金成本。搞活动，不能被薅羊毛的搞破产了。或者搞个特牛的模型，能识别所有的风险，有且只有一个缺点，要用上全球一半的计算机（费钱）。另一方面，是体验成本。互联网风控，免不了嵌入业务，但如果过于突兀，很可能影响用户体验。这方面的典型，极端就是恶搞的12306验证码识别。
风控与信息安全的异同 风控这个业务，和信息安全中的加密很像。当破译的难度大于潜在的收益时，加密方式其实就安全了。没有不计成本的密码破译，也没有不计成本的风险控制。风控要做的，也是某种程度的平衡。
但同时，风控和信息安全也有不同之处。
在互联网业务中，风控的对象一般会有两种形式存在。一类是静态的账号，比如恶意的初始号，或者是盗用、冒用的他人账号。另一类，是其动态的活动。具体表现为账号主题生产的内容，或是其参与的活动。而信息安全，主要是软硬件的漏洞，再加上社会工程中人性的漏洞。
风控的挑战与应对 最明显的挑战在于，敌在明我在暗，同时由于对抗手段的加码，对方会找到规避的手段，或是找到风控的系统漏洞。
风控策略与技术 在传统风控中，应对风险有4种基本思路。
回避风险。即如果我知道你有风险，我就回避掉你。这会带来一定的损失，俗话说，风险伴随着收益，回避风险，在互联网业务中，有些能回避，有些则不能。对于政策风险，法律风险，该回避的则回避。对于不能回避的风险，我们采取下面的措施。 控制风险。这是互联网风控的主要内容。如果控制风险，从风险的酝酿、到风险的暴露，再到风险的控制，每一个环节都有可为。 转移风险。这个措施更靠近业务。通过将风险转嫁，或是共摊，来实现风险的控制。举个例子：平台将风险分散到平台与商家之间，或是将风险在声明中转移到UGC内容的用户上。 风险承受。最后这个措施，是风险的兜底措施。即承担风险带来的损失。这一般要求有资金的预留或是退路的预留。 策略 互联网的风控策略，可分为两部分。一部分是业务侧，通过一系列手段，去削弱风险。另一方面，则是宏观侧，通过数据监控整体的业务情况，进行风险的宏观判断。
在嵌入业务的一侧，可按风险行为分为前、中、后三个阶段进行。
风险发生前：通过技术手段或用户引导，完善用户资料。同时对用户的基本信息进行分析，将明显特征的账号进行标记。该部分，成本和复杂度都较低，适合作为风控策略的主要部分。同时，可通过关联分析，将问题范围缩小，从账号、自然人、到工作室，集中处理。 风险进行中：这部分一般和用户的行为有关，也常常嵌入业务中。常见的如 UGC 的违规内容，色情、暴恐信息等。这部分，像豆瓣，在检测到关键词后，会进行先审在放行。另一个例子则是，12306的验证码，通过人机验证，规避机器人。 风险已发生：尽管手段丰富，但仍有“漏网之鱼”。一旦风险成为既定事实，则需要采取措施应对。一方面，是做好风险的应对，另一方面，则是及时复盘，对现有体系进行审视，避免机制上再出问题。 最后的，无论无论风控做得多好，总会有黑天鹅发生。做好应急预案，有兜底的策略，都十分重要。小概率事件必然发生。风险的发生是常态，无风险其实才是少有的异常状态。要做的就是，在风险发生后，减少风险造成的损失，让系统及时重上线。
技术 策略看起来很简单，但实际操作起来，困难重重。很重要的一个原因是，信息不对等。举个例子，知道该对问题账号处理，但是不知道哪些是问题账号。这里就需要技术来消除信息不对等。
这里就要请出用户画像。一般的，用户画像被用来理解用户，做更好（更上瘾）的视频推荐，做更精准的广告投放。而在风控领域，用户画像的作用，同样显著。
用户画像背后的技术，除了实打实的工程技术外，产品引导也十分重要。对于冷启动策略，通过引导，完善用户信息。更一般的，则是通过标签规则，通过一系列 if else 判断，生成用户标签。同时，对于社交产品，还会有好友关系链，通过社交图网络的挖掘，也可得到有用的信息。
在风险进行中，采用嵌入业务的干预手段，需要实时流计算，这方面有很多好的开源软件，或者是采用像 Prometheus 一类的开源监控软件。如果资源允许，还可做一些时序上的预测。对未来一段时间的数据，给出预测的上下区间，一旦超过，即调起报警。
在风险发生后，对样本的复盘，实际是异常检测。异常检测一般分为两类，孤立状态的点或块异常，或者是上下文相关的时序异常。其核心，是不平衡样本下的分类。这里的检测可以是对用户行为数据的检测，也可以是用户产出内容的检测，如图片检测、文本检测，这方面的技术已经很成熟，数据量足够，质量够高，即可保证高的准确率和召回率。
最后，在泛化能力外，技术还应注意其可解释性，以及可更新的能力。即模型越简单越好，如奥卡姆剃刀所言：“如无必要，勿增实体”。同时，减少数据中的噪声。在上模型或规则前，探索数据、剔除常变量、剔除离群点，通过xgboost等获得特征有效性、对关键有效特征进行筛选。
总结 互联网风控，是风控的一处延申。除风控的基本特点外，也带有其自身的特点。策略上，需要嵌入整个业务流程，同时准备兜底策略。技术上，有数据挖掘的手段，增加风控的效力。
以上总结来自于工作实践和阅读思考，难免受自身局限，如有疏漏，还请读者批判指正。
互联网风控思维导图
关于作者
参考资料：
QCon 阿里毫秒级实时风控引擎
Risk Management: History, Definition, and Critique &amp;ndash; Georges Dionne
风控算法大赛解决方案&amp;ndash;不得仰视本王</description>
    </item>
    
    <item>
      <title>更高效的远程工作之道--REMOTE 手册精要</title>
      <link>https://kuhung.me/2020/remote/</link>
      <pubDate>Sat, 07 Mar 2020 17:43:44 +0800</pubDate>
      
      <guid>https://kuhung.me/2020/remote/</guid>
      <description>大规模远程工作实践 远程工作，一个之前都没怎么考虑的事情，在2020年的春节过后，中国大陆进行了一次大规模实验。WFH（work from home），一个在外企很常见的操作，在国内却鲜有生存环境。
虽然朋友圈已经有人发帖，渴望在办公室中办公，但是，也不能因此，就放弃思考远程工作的这么个事物。一成不变往往很简单，但变化之中，才有契机。
远程工作契机 什么阻挡了远程工作的推行，我们无从说起。但何不把这次当作一种契机，去学习其中的脉络。
关于远程工作，找到了一本小册子《Remote》，专门介绍远程工作的。作者也写过另一本书《Rework》，中文名重来 。写书虽说门槛不高，但是写出有说服力的书，具备条件的人往往很少。作者以其自己的公司 Basecamp 为例，说明了远程工作的优点，也向我们介绍了远程工作的注意事项。读懂它，你的远程工作事半功倍。
远程工作迷思 在书中，你可能看到自己的影子，也可以看到老板的影子。无论你是老板，还是打工者，其中的内容都值得细细理解。
拒绝远程工作的理由 只有在办公室，办公时间才是有限的 远程工作，不是一个新鲜事物。至少在作者这个书出版之时，到2020年，已经过去了7年。远程工作改变了集中式办公的缺点，时间被切割，无穷无尽的会议。但其自身也有适用范围，比如写作、编程、设计和客户支持等工作。像制造业，可能就不太现实。很多人对远程工作嗤之以鼻，常抱着努力干活，等我退休了，再来享受生活的态度。老板们顾及远程工作，很可能是担心没了约束，员工的拖延症很可能无限放大，毕竟谁都有拖延的时候。做好工作，而不是死守工作时间。
如果我能看见他，我才能控制他 远程工作，在2020春节之前，一定是有很多反对声音的。比如，缺乏讨论的氛围，公司没有源源不断的点子，这怎么行。没准下一个点子就能颠覆乔布斯。但实际上，我们知道，很多人还在执行几个月甚至几年前的一个点子。有员工认为，家里的干扰太多，琐事不断打扰。但实际上一份有成就感的工作，不会让你轻易被打断。而管理者，会觉得，没有盯着他们，怎么知道他们是在干活，还是躺在床上玩手机。但实际上，就在眼皮子底下，员工也有无数种方法摸鱼。如果不信任他，一开始就不该雇佣他。
别的公司都没这样做，我为什么要做 在团队内部，一个组这样做了，另一个组会嫉妒。但跳出这个逻辑，整个组织目标一致，效率最高才是最终的赢家。再一个，业务部门或者上级会觉得，我现在就要答案，现场能有更高的压迫感。但实际上，并不是所有事情同等重要。再一个，中小型企业会认为，BAT 大公司都没远程工作，肯定有他的不好，马某人都是聪明人，不可能没调研过。但实际上，你跟着大公司的脚步，永远成不了第二个马某人。远程工作能不受地域限制，网罗到世界各地的人才；有些时候，性价比更高。
远程工作精要 远程工作，在2020春节之后，大伙儿已经有了足够多体会。作者的公司长期远程且稳定盈利，他总结了以下内容。
及时同步进度 重要资料公开，而不是让人到处询问，让被询问人工作量加倍。展现工作进度，以成果导向。及时向团队内部公开。承诺往往有更高的约束力，而且，同行肯定比非技术领导更懂所需的工作时长。于此同时，做防灾的准备，诸如数据备份等工作。如果工作需要同客户合作，还需注意，及时将进度同步给客户。
打造良好团队氛围 对于团队内部，保持正向的氛围，阻止消极负面的情绪在团队内部蔓延。聪明且及完成任务，才是合适的好员工。用当地最好的薪水留住他们，而不是因地施策。关心员工的身心健康，担心过度劳累，而不是懒惰，因为可持续才能走更远。最后，保持一个强劲的动力，鼓励员工从事自己喜欢的事物。
员工如何出众 而对于员工，如果你想在团队内出众，往往有两种方法。一个是在保持活跃，另一个就是高质量的交付任务。
关于作者</description>
    </item>
    
    <item>
      <title>人声提取两大步骤：分离音频背景声&#43;过滤空白</title>
      <link>https://kuhung.me/2020/audio_progress/</link>
      <pubDate>Sun, 12 Jan 2020 23:52:45 +0800</pubDate>
      
      <guid>https://kuhung.me/2020/audio_progress/</guid>
      <description>背景需求 在处理音频中，我们可能会有这样的场景：随着语音设备的能力越来越强，音频数据越来越大。但实际上，音频中的有效部分却很少，抑或是音频的背景声过大，非目标声音。在这样的场景下，我们希望得到人声，去掉噪声，提高信噪比。
问题界定 这里将问题进行界定，进行子任务拆分：
将音频的背景声音去除， 去除“无声”阶段。 解决方案 要提高信噪比，这需求在很多场景中有见：比如课堂录音的提取，或者是录音笔的数据存储。
在使用本领域“高深”的技术前，一定要思考，切莫手上有锤子，就看啥都像钉子。想想该领域的专家会怎么做，如何从专业角度看待该问题；其次想想普通人会怎么做，防止落入经验主义陷阱。
背景声音的剥离，最简单的其实是音轨分离。其前提是两种声音存为了不同的音轨，在一些场景很合适。比如电话录音。
背景声分离 但是若只有一个音轨呢？别担心，机器学习来帮助你。spleeter 基于 tensorflow，训练了一套音乐检索系统，能够有效的分离人声和背景音乐声。
该工具已经进行封装，对于简单的人声分离，采用直接调取的方式即可。代码如下
# Use audio loader explicitly for loading audio waveform : from spleeter.audio.adapter import get_default_audio_adapter audio_loader = get_default_audio_adapter() sample_rate = 44100 waveform, _ = audio_loader.load(&amp;#39;/path/to/audio/file&amp;#39;, sample_rate=sample_rate) # Perform the separation : prediction = separator.separate(waveform) 空白切割 在分离之后，得到人声和背景声。人声分离后，仔细听，就会发现里面有很多空白。对于空白部分，进行切割分离。
这里参考 stackoverflow 的代码
from pydub import AudioSegment from pydub.utils import db_to_float # Let&amp;#39;s load up the audio we need... podcast = AudioSegment.</description>
    </item>
    
    <item>
      <title>如何计算用户生命周期价值（CLV）</title>
      <link>https://kuhung.me/2019/lifetimes/</link>
      <pubDate>Wed, 25 Dec 2019 23:28:09 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/lifetimes/</guid>
      <description>在用户关系管理中，常会遇到些直击灵魂的问题：
这批用户到底价值几何？
为什么要用这种措施去干预用户，而不是另一种方式。
为什么干预这类用户，而不去干预另一类，他们的划分标准是什么。
有这些问题，实质是因为对客户价值不够了解，缺乏行之有效的划分方式。
用户精细化运营价值巨大 随着人口红利的消失，增长逐渐见顶，急需在现有用户池做学问。过去粗放式的买量策略已经不再生效，一是买量成本逐渐高企，二是买量带来的用户忠诚度极低。对现有客户群体的划分和互相倒流，成为重中之重。行业中的黑话“洗用户”，即是讲的这一策略。
对于如何划分用户，不用的职能会有不同的看法。产品有产品的看法，可能基于某项功能偏好；运营有运营的看法，是各种活动玩法的定义；甚至领导还有他的一套看法。但是，无论怎么切入，商业的核心拿捏住，才会八九不离十。
什么是商业的本质：商业的本质是获利。因此，我们从用户的货币价值切入，评估和划分用户的生命周期。
用户生命周期价值，这并不是学界的新鲜产物，该理论在上世纪80年代就已经提出。但对于互联网，网上可搜寻到的资料少之又少。可能的原因有两个：一是互联网在过去20年快速爆发，风口上躺着也能赚钱；二是各家的策略内部不统一，无法形成统一的口径。
但这些都不是不去应用他的理由，反而说明其中价值巨大。这里，我们剥离开复杂的商业逻辑，仅从交易入手，分析用户的生命周期价值，以及用户所处的状态。
用户生命周期价值（CLV） 随着精细化运营的铺开，过去粗放式的、买量用户已经不再买账。每个用户所能接受的最低服务各不相同。如何根据用户价值，进行资源的有效利用。最大化杠杆的使用，成为企业生死的关键。
过去，没有统一的理论出现在互联网应用或是游戏中。但是，运用跨学科的思维，就可以发现：市场营销领域已进行过研究，并给出了精度极高、可解释性强的模型方法。
这种方法，就叫做用户生命周期价值，英文名称 Customer Life Time Value，简称 CLV 或者 LTV。
CLV 是什么 用户生命周期，是一种刻画用户的方法。一般用来解决两类问题：
用户还有多少价值、用以衡量投入产出比 在干预用户后，根据用户生命周期价值的变化，优化资源的投放。 即用户管理的两个核心问题：用户所具备的价值以及策略的有效性。
需要注意的是，CLV 的产品形态要求非合约。合约在国内最有代表的是合约手机。一般互联网产品，合约形态较为少见。
CLV 的用户群体需已经产生交易，未付费用户不纳入考量。当然，概念迁移，将付费换成活跃或内容消费，该模型也能处理。
CLV 回答哪些问题 用户活跃还是流失，用户还有多少付费潜力，用户在未来某段时间会否再次购买。这三个问题，是用户生命周期价值能够回答的。
如何在自家产品中引入 CLV 应用场景 判断用户所处生命周期阶段 预测用户指定周期内购买概率 预测用户的生命周期价值 通过历史付费数据，预测未来付费 活跃与流失的定义 定义：
用户有交互为活跃
用户一段时间不交互，即为流失
lifetims 工具包引入 安装 python 的工具包：
pip install lifetimes CLV 数据挖掘 用户生命周期判定，需要三个指标
frequency 用户登录的频率，这里为周期内的天数 recency 用户的最大周期，即第一次活跃到最后一次活跃 T 用户所处阶段，第一次活跃到观察周期结束 对于付费预测，还需要用户的平均付费金额。
数据获取 从数据库获取 SELECT customer_id, COUNT(distinct date(transaction_at)) - 1 as frequency, datediff(&amp;#39;day&amp;#39;, MIN(transaction_at), MAX(transaction_at)) as recency, AVG(total_price) as monetary_value, datediff(&amp;#39;day&amp;#39;, CURRENT_DATE, MIN(transaction_at)) as T FROM orders GROUP BY customer_id python 处理 from lifetimes.</description>
    </item>
    
    <item>
      <title>机器学习系统设计 Machine learning system design</title>
      <link>https://kuhung.me/2019/machine_learning_system_design/</link>
      <pubDate>Sun, 01 Dec 2019 18:26:43 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/machine_learning_system_design/</guid>
      <description>导读 Web app：https://kuhung.me/machine-learning-systems-design/
机器学习系统设计 系统设计题，顾名思义，就是考察一个人设计系统的能力。它是一种国外很喜欢的题型，特别是中高级职位，在算法手撕结束后，一般就是系统设计题。
国外的算法工程师，被称之为 Machine Learning Engineer。国内的名头比较多，算法工程师、数据挖掘工程师、机器学习工程师、深度学习工程师都指的这个。
这一岗位同开发岗位，SDE 一样，也需要足够的系统设计经验。
国外的大佬 github.com/chiphuyen 总结了一份机器学习设计的资料，我在这里做本地化整理，同时增加一些自己的从业体会。
内容分为3个部分，分别是：
机器学习的系统设计部分，这里做了核心概念的摘录；
系统设计的案例，由于众所周知的原因，很多文章看不了，我这里将其整理放入了 github，同时笔记标注版的放在了公众号：谷粒说数。
练习部分，作者列了27道系统设计题。我这里将其布置在了网页上，方便自查，后续会上评论进行答案收集。
系统设计应关注的点 系统设计题，如果没有完整的方案也没关系，主要看表现的思想，着重从以下三个方面考察：
项目有哪些约束条件，哪些能做，哪些不能做。
方案的利弊，选择方案时，思考方案利弊的过程。
主要的功能，最后达成什么样的效果。
系统设计往往很难，这是因为两方面的原因。1. 缺乏有效的评估手段。2. 问题往往模棱两可。面试中的理想候选人应该是这样子的：1. 能够有效的拆解问题，将复杂问题简单化。2. 能够区分该场景是否需要机器学习方案。第二点很重要，因为在当下，受媒体大环境影响，很多人会选择无脑上机器学习，殊不知某些场景简单的方法更有效。
Machine learning methods change every year, solving problems stays the same.
生产环境不同于学术环境 学术研究的一般有以下两个特点：
想法设法比上一代模型效果更好，而不用思考怎么落地使用它。 由于效果是第一要务，所以算力没有限制，加钱堆机器即可。 而生产环境不同，它的特点如下：
效果并非越好才好 算力资源常常有限 作为开发者，要始终牢记生产环境是我们的目标。
需着重关注的4类问题 如何采集数据、如何处理数据。
怎么选择的模型、为什么。
如何评估你的模型。
如果再来一次，哪些地方会做得不一样。
设计机器学习系统 系统设计方面，作者将其分为了4个层次，我这里也按她的逻辑进行。 项目准备 项目准备阶段，一般从三个角度思考。如同写程序一样，首先思考需要达成什么样的目标；其次是有哪些限制条件；最后是特殊例子的考虑。
展开来讲，需要达成什么样的目标：即最后用户怎么使用你的系统，你的系统吞吐多块、响应多快。
项目的限制条件包括：项目周期多长，有多少算力，需要何种能力，有哪些可用资源。
特殊例子即：是否需要结合用户做特殊化处理，例如千人千面。
最后，如同老师设计考试一样，需要考虑如何评估你的系统性能。
数据流 Machine learning is driven more by data than by algorithms</description>
    </item>
    
    <item>
      <title>Dataops 数据化运维实践</title>
      <link>https://kuhung.me/2019/dataops/</link>
      <pubDate>Sat, 19 Oct 2019 11:33:09 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/dataops/</guid>
      <description>翻译自：《What is DataOps? Everything You Need to Know》 From Oracle Data Science Blog
图片自：《DataOps is Not Just DevOps for Data》By DataKitchen in Medium
DataOps, 看到它的第一眼，大多数人会觉得陌生。但是提到另一个词——DevOps，做开发的同学可能会有些熟悉。DataOps 的理念与 DevOps 类似：将开发或者说是数据，与运维、测试相结合，自动化业务的交付以及架构的变更，使得构建、测试和发布能够更加快捷、频繁且可靠。
DataOps，全称 Data Operations，是一种敏捷运维方法，无感知地将IT基础设施和大数据分析技术结合起来。它的目的是通过结合数据管理的目标与过程，加快分析的速度与准确度。而这一过程，通常会涉及数据的多个流程：数据获取、数据质量检查、自动化、集成，以及最终的模型部署与管理。
最核心的，DataOps 是为了方便管理数据、特别是当你有了一个特定的数据目标的时候。举个例子：为了降低客户的流失率，可以通过利用客户数据构建一个推荐引擎，推荐客户相关的东西，以此来减少浏览到下单的时间，减少客户流失。
这是一个很自然的想法，但是却并不是一件容易的事情。上面的设想需要以下条件：
你的数据科学团队能够获取到他们需要的数据，同时能够有工具去部署模型。 除此之外，还需要能够将模型集成到你的网站中去，在新数据上训练以持续的改进。 最后，需要一套报表系统来监控其表现。 现在比较流行的做法，做好上面的事情，需要多个部门的合作，包括工程师、IT运维人员以及业务团队。
谁能从 DataOps 中获利？ 总的来说，几乎所有人都会从 DataOps 中获利。
更好的数据管理将会带来更多可利用的数据； 越好的数据质量会有更准确的分析，与之相伴的就是更好的 insights、商业策略以及更高的利润。 DataOps 起一个润滑剂的作用，使数据团队、工程师团队和技术专家之间的工作更加紧密、更加自动化，以此来充分发掘数据价值、减少时间。
Ashish Thusoo，Qubole 的联合创始人曾在书籍《Creating a Data-Driven Enterprise with DataOps》写道：我在2007年的夏天加入 FaceBook 的数据团队。像平常一样，公司里的任何人想获取无论多小的数据，都不得不找到数据团队，并发起流程。我们的数据团队很优秀，但是他们的精力也有上限。很明显，这是一个瓶颈。
DataOps 这一概念从何而来？ DataOps 起源于 DevOps 这一概念。据了解，财富1000强的公司里，80%的公司已经采用了 DevOps 这一方法。DevOps 的成功主要仰仗于：它把之前独立的两个部门联合在了一起——开发和运维。在 DevOps 的世界里，软件的发布是迅速且持续的，因为整个团队都被整合在了一起，用来检查并处理当下的问题。</description>
    </item>
    
    <item>
      <title>思维导图｜《学习之道》</title>
      <link>https://kuhung.me/2019/the_way_to_learn/</link>
      <pubDate>Wed, 16 Oct 2019 07:56:13 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/the_way_to_learn/</guid>
      <description>关于作者</description>
    </item>
    
    <item>
      <title>机器学习实践--测试驱动开发</title>
      <link>https://kuhung.me/2019/tdd_drive_ml/</link>
      <pubDate>Sun, 25 Aug 2019 00:22:07 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/tdd_drive_ml/</guid>
      <description>机器学习现状与问题 2012年，数据科学击败生命科学，成为”21世界最性感的职业“。2016年，AlphaGo 战胜人类顶尖围棋手，深度学习、人工智能一度占领新闻头版头条，并引起一股机器学习新热潮。
这一效应，一直持续到今年：在2019这一年，高考志愿填报金融遇冷，计算机一跃成为抢手专业，在各大工科院校中，有取代传统电气、机械之势；各学院的研究生院，纷纷开始往人工智能、深度学习上贴近。
这从一个侧面，反应了民众对于计算机、人工智能、机器学习的就业预期。但是，随着原来越多的从业者涌入，项目落地越来越多，机器学习这一领域的问题也开始暴露，亟需解决。
机器学习中的常见问题 机器学习的问题，由其特性所致。众所周知，机器学习的发展，离不开大数据技术。海量数据的收集、存储，让算法有了更强大的生命力。通过对大量数据的挖掘、学习，机器学习能够猜你所想，提升购物网站的转化率；能够识别障碍，让自动驾驶成为可能；能够识别风险，扩大业务同时减轻坏账。
由此，针对模型和数据的关系，大致可以分为三类问题。第一种：数据量不足，模型过拟合。算法学习的过程就犹如考前刷题，过拟合相当于只刷一套题，这样的后果就是上一套不同的卷子，算法就懵逼了。第二种：数据量充足，模型欠拟合。欠拟合的算法就像是心思不在学习上的孩子，报再多的补习班，结果也不会太好。最后一种：数据不稳定。算法前期可能很好的学到精髓，但是随着数据的变化，时间的流逝，模型很可能将变得不可预测。
测试驱动开发的解决之道 机器学习的实现方式还是通过软件工程、代码实现，既然是代码，那就存在应对范式。这里，就不得不提 Test Driven Development（测试驱动开发），简称 TDD。TDD 是一种很朴实的想法，在编码开始前，评估需要交付的功能点并写测试用例，一开始的时候测试会失败，接着编写代码修复测试，最后测试通过，修复代码。这里的方式，通俗来讲就是：目标导向，先成事，再迭代。
测试驱动有一个明显的好处就是，能够加快产品发布速度。以往的项目，需求讨论会占据很大时间，讨论完之后，开发方案一旦定下来，后续变更就很难。而现实却是需求常常变更，这往往会导致产品发布的延期。而在机器学习上，测试驱动好处更多体现在保证模型质量上。具体来讲，常通过以下办法：
交叉验证 通过交叉验证来验证拟合效果 运行速度测试 根据奥卡姆剃刀原则：”如无必要，勿增实体“；简单模型胜过复杂模型 衔接测试 对数据的输入输入进行检测，以防止数据异常波动对模型影响 指标追踪 监控关键指标，不断追踪模型的性能，防止失效模型继续运行 机器学习的债务危机 测试驱动开发一定程度上能减轻机器学习中的问题，但是它只是一种表象。测试通过了，不代表算法模型就没有问题了。魔鬼藏在细节中。机器学习目前仍存在一些技术债务，仍需按特定原则对代码修复，迭代演进。
什么是技术债务 技术债务是一个比方，类比的金融领域的债务。一般指为了加快软件开发速度，折中妥协，选择易于实现的方式，结果是短期加速了软件开发，但长期来讲，开发负担累计，发布逐渐停滞。债务不都是有害的。在业务扩张，市场抢占时期，适当的债务有助于公司扩张。但是若一直不管不顾，最后只能花更大的成本去维护它，直至无法维护。
机器学习中的技术债务 机器学习项目中同样存在债务危机，Google 还就此写了篇文章 《Machine Learning: The High interest Credit Card of Technical Debt》。总结起来有三种：一、边界模糊，数据之间彼此依赖关联。二、没有系统级别代码分离，胶水代码处理一切。三、机器学习系统随着外部世界的改变而彻底改变。
偿还债务 代码重构，就犹如对你的资产进行一次清点盘算：清除不良资产、偿还债务、进行资产上的重新配置。重构能够有效减缓技术债务带来的负面影响。
面向对象的 SOLID 原则 SOLID 原则由罗伯特·C·马丁提出，是五项原则&amp;ndash;单一职责、开闭原则、替换原则、接口隔离、依赖倒置的缩写，是面向对象设计与开发的五个基本原则。通过这五项原则，写出来的程序可读性、可扩展性都大大提高，软件维护和系统扩展变得更加容易。
SRP 单一职责原则：一片代码只做一件事，及一块代码只实现某一特定功能，尽量减少逻辑的交叉堆叠。 OCP 开闭原则：对象对于扩展开放，对于修改关闭。即保持最小单元，写完后不去修改它，而是通过扩展或者配置的方式补充功能。 LSP 替换原则：任何的子类应该轻松由同一对象树的其它对象替代。 ISP 接口隔离原则：不同的接口做不同的事，软件开发没有银弹，接口也是。解耦能解决掉开发过程中“牵一发而动全身”的情况。 DIP 依赖倒置原则：抽象来自于细节、来自于底层，开发依赖抽象。 机器学习与 SOLID 原则 将 SOLID 原则应用于机器学习，会发现：机器学习与 SOLID 原则相互交织。诸如机器学习中的降维，是在减少耦合；胶水代码、数据依赖又与 SOLID 原则相抵触。
单一职责 机器学习中的数据相互依赖，更有利用 GBDT 生成特征，这一情况与单一职责冲突。所幸可通过降维、正则化的手段减轻影响。 数据获取、数据处理、特征工程、模型训练、模型预测、数据监控，各模块无系统级代码分离，胶水代码处理一切。开发时应小心谨慎。 开闭原则 代码上可以做到开闭，但机器学习会作用于真实世界，引起的反馈将传导至模型内部。如模型预测出一批”潜在犯罪“，于是加大警力盯住这些人，最后发现他们的犯罪率果然高于常人。但他们就真的比别人更”坏“吗？这里有一个”预测、实施、证实“的偏差存在，算法无形中放大了偏见。 替换原则 机器学习的模型效果常由强特征决定，且特征众多。应用尽可能少的特征和数据，取得稳定结果。 接口隔离 模型的数据上游，可能会多个部门共用，数据源的人为变化，可能会导致模型的突然失效。因而需要对数据输入进行监控。 依赖倒置 测试代码、中间数据大量堆积，各个部分相互依赖。应定时对遗留代码和中间数据进行清理。 总结 机器学习、人工智能在经历这几年的爆发之后，出现了很多病症。测试驱动开发、SOLID 原则重构能够有效的缓解病症，还系统健康。如果你的项目已经落地，用 SOLID原则进行一次检查；如果项目还未实施，不妨尝试下测试驱动开发。系统更好的可读性、可维护性，不仅是程序员的责任，更是评判机器学习从业者的一把尺子。</description>
    </item>
    
    <item>
      <title>思维导图｜测试驱动的机器学习</title>
      <link>https://kuhung.me/2019/tdd_with_ml/</link>
      <pubDate>Thu, 22 Aug 2019 00:56:13 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/tdd_with_ml/</guid>
      <description>关于作者</description>
    </item>
    
    <item>
      <title>思维导图｜《金字塔原理》</title>
      <link>https://kuhung.me/2019/pyramid/</link>
      <pubDate>Thu, 15 Aug 2019 00:47:36 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/pyramid/</guid>
      <description>关于作者</description>
    </item>
    
    <item>
      <title>思维导图｜《敏捷革命》</title>
      <link>https://kuhung.me/2019/scrum/</link>
      <pubDate>Sat, 10 Aug 2019 00:54:34 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/scrum/</guid>
      <description>关于作者</description>
    </item>
    
    <item>
      <title>系统思考与卓有成效的管理者</title>
      <link>https://kuhung.me/2019/manadement/</link>
      <pubDate>Wed, 17 Jul 2019 17:02:56 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/manadement/</guid>
      <description>在老一辈的眼中，学而优则仕。学习好了就去当官从政，去服务别人。而在父母这一辈人的眼中，不论你干啥，当“老实人”被人管是不行的，他们的观点有一定的时代背景，但仍然在潜移默化影响着每个人。
而对于初入职场的新人来说，虽然暂时当不上管理者，但被管理时却也会思考：“如果是自己，将会怎样去做管理？” 对于这一批新的90后甚至00后来说，管理并不再是一场服从性测试，权威性的组织管理方法或不再有效。
什么是这些年轻人喜欢的管理风格呢？ 如果稍微读过一些管理学的书籍，就会发现，管理其实在近现代发生了较大的变化。厚黑学受人推崇，有它的一定意义，但是小年轻们对里面的技巧似乎并不买账。这点在酒桌或者聚餐时就可以看得出来。这批年轻人有自己的想法，有独立的意识，甚至有些“不懂”人情世故。
回顾历史，近现代企业管理做得比较好的，要当属日本。日本凭借其精益管理思路，在汽车制造业一举占领美国市场，打得美国的传统汽车巨头没有还手之力。在大学里，作为机械大类的学生，一定多少接触过精益生产。
这套理念，帮助日本一跃成为制造业强国。而反观国内，作为一个机械大类出身的同学，你一定知道国内的“中国制造”现状是什么。而作为一个跨行的 IT 向工程师，在实践中，也发现，以信息互联标榜自己的互联网，除了开源的代码复制粘贴得挺快，管理模式其实并没有跟上节奏。
今天，在当下环境中，还有很多管理者是靠着本能在管理，而不是一套系统科学的方法。一个程序员，或者是 IT 企业的中层管理，有时间去研究业务，却少有时间去研究管理。项目短平快上线、管理粗糙莽随意。像极了早期国内自然资源开采，先污染后治理的样子。
IT 工程师眼中的现代管理究竟应该是什么样的呢？ 我们接着从上面的日本制造业说起。在当时，他们推崇一种见 kanban 的工作法。即在看板上列出工作事项，工作流公开透明。而在当下，国内头条、国外谷歌都在推崇 OKR。这里两者的本质是相通的，即：公开透明公司的业务流，每个人都能参与到目标设定里面来。
低效的管理者 在执行这套的同学可能会说，这其实只是形式主义，到头来还是 KPI 导向，面向 PPT 晋升。这在企业中确实存在，而其中的缘由，有以下5点：
管理者不能良好的安排自己的时间，自己的时间属于别人&amp;ndash;无尽的会议、向上汇报、向下沟通 眼光受限于岗位，注意力集中在流程、规范与控制上，而不是贡献 没能充分发挥人的长处，无论是自己、上司抑或是下属。总认为下属不能很好地完成工作。从职位出发去设定一个人能做什么、不能做什么。不能容忍人之短。 零碎容易完成的优先做，根据和需求方的亲疏远近安排优先级，而不是要事优先 无法有效决策，没有流程，不愿放权。决策没有边界，不设立反馈机制，任由自己的“偏见”主导决策 做好了上面的5点，企业就能蒸蒸日上了吗？其实也不是，如果没有一个学习型的组织，单靠个人也是难以推动的。千里马常有，而伯乐不常有。运气好，遇到一个放权给你的领导，做起来是运气，做不起来是常态。企业中的死海效应，“劣币驱逐良币”也同样常见。
螺旋沉默的组织团队 也就是说，还需要一个良好的组织氛围。而变成一个死海的组织氛围常有以下特征：
安于现状，封闭思想。更愿以主观的视角观察现实，而不是客观。 心智模式不成熟。对已有的成功盲目崇拜模仿，而忽视掉其潜在的天时地利人和背景。 各自有各自的小算盘，没有共同的愿景。 团队内部给自为战，几乎不存在团队学习。 局部思考而不是系统思考。认为危机的主因是人或事，而不是系统机制的问题。从未留意过系统如何塑造自己的行为。不清楚系统的边界、增长极限、反馈回路以及压力是如何转移的 。 如果是想做一个失败的管理者，营造一种糟糕的团队氛围，按照上面做准没错。
短期利益驱动的变革 学校教育告诉我们：永远不能承认我们不知道的答案。而大多数公司还在强化这种训练，奖励善于推销自己观点的人，却忽视对复杂问题的探寻。（还记得上一次你的组织给对公司现行政策提出难题的人——而不是解决某个紧迫问题的人——颁发奖励是什么时候吗？）&amp;ndash; 《第五项修炼》
别急，是不是准备收藏，并在组织中逆向推行以上措施呢？那你可能又陷入了组织变革中的另一个陷阱：在变革过程中，我们不仅难以看到整片森林；甚至，我们还会挑出一两棵我们认为最看好的树，然后就全神贯注在它们身上，为它们而倾注全部的变革努力。
为什么目前还有很多的 IT 企业管理者，在靠着本能管理呢？一个字：利。 无利不起早。 概念发明以后，还要在有实用价值的成本范围内，以一定的规模进行可靠的复制，它才能够真正落地。
为什么大家都觉得修正以上的问题是不符合利益的呢？因为很多时候，都是想短期梭哈一波，先用着后面再说，先这样管理出问题了再说。即忽视了系统性的东西，而仅专注于眼前的事物。
系统思考 如果想在组织中构建学习型组织，成为一个卓有成效的管理者，那肯定不是忽视系统思考的力量。
关注长期的行为和系统内部的结构，而不是表象和短期事件；世界非线性，不要用线性的思维思考；恰当的划分系统的边界；充分考虑多方的限制因素及相对强弱。
通过实际行为来推断系统目标，而不能只看表面的言辞或其标榜的目标。时间延迟无所不在，当下的干预很可能一段时间后才会产生影响。没有人能做到充分理性，每个人的理性都是有限的。
总结 在最近和实习生同事的合作过程中，深切的感受到信息差带来的权力膨胀感。实际上，管理也是一门实践课程。一开始可能会走偏，但只要有回顾、有反思，也终究会上正轨。系统思考、长远为重。不仅要问这些年轻人想要什么、也要问自己想要什么。</description>
    </item>
    
    <item>
      <title>A/B test 评价指标的选择</title>
      <link>https://kuhung.me/2019/abtest-2/</link>
      <pubDate>Sat, 22 Jun 2019 15:28:01 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/abtest-2/</guid>
      <description>如何定义一个评价指标 这是上一篇文章什么是 A/B test的续集，上一篇主要讲述 A/B 测试的历史，这里接着讲如何选择指标。
从本人的经验来看，一个指标怎么选择确实重要，但更重要的是需要自上而下理解且落实科学实验。而不是拍脑袋想指标，中途随意更换指标，汇报时仅罗列有利的指标。
如果要用一句话解释，如何定义一个评价指标，那一定是“以始为终”。在定义一个指标的时候，要想一想为什么要定义这个指标，这个指标的定义是为了说明什么情况，如果这个指标发生变化，将需要怎么去解释它。
指标定义的两种情况 在这里，定义指标的时候有两类：一是不变量，即变量组和对照组的都应该相同；另一个是变量，即需要观察改变的量。
对于不变量，需要注意两者的总量是否相同，数据的分布是否相同。以上保证实验的正常进行。对于变量，首先思考高层次的商业指标。诸如收益、市场份额、用户量等。接下来就是细节的指标，如用户体验，网页停留时长。
例如，在游戏中，新手教程没完成的玩家，虽然不能直接知道原因，但根据经验，可能是引导时间太长、网络卡顿或者是别的原因。类似这样的情况，是用户体验上的问题。后面也会有一些方法提到如何去评估它。
在实验中，可能得到的不是想要的信息、或者实验时间太短，得到的结果不准确。甚至有些东西无法衡量，这种情况又该如何去评估它呢。别急，下面的内容会给你回答。
自顶向下设计评价指标 如何确定指标
高层次的指标（如：活跃用户数、点击转化率 CTR） 指标细节（如：如何定义用户活跃） 使用一组指标，并将他们整合为一个单一指标（如：总体评价指标（OEC）） 对于评估，可以选择一个指标或一套指标。如果是使用一套指标，可以把他们聚合成一个指标，比如构造一个目标函数，或者是简单的加权指标。
最后一点需要考虑的是：指标的普适性有多少。如果你在运用 A/B 测试，最好能有一个指标能够贯穿整个体系。
举个例子：用户漏斗。
它表示用户通过站点执行的一系列步骤。 之所以被称为漏斗，是因为每个后续阶段的用户数都少于上面的阶段。 每个阶段都是一个指标——总数，比率和概率。
数据不足怎么办 有些数据可能难以获得，主要原因如下：
没有数据的权限 需要较长时间去收集数据 使用外部数据 其它数据收集的技巧：3种公司常用的方法
数据中间商 调研公司 学术文章 以上能够帮助你依照整个行业设定指标。
额外的内部数据 额外的内部数据也可被使用，例如：
回溯性分析：查看历史数据以找寻改变并进行评估 调研与用户研究：这个帮助你找到你想研究的点 以上办法的缺点是它只告诉了你相关性、没有告诉你因果性，而实验一定程度上可以解释因果。
最后，别忘了与你的同事交换意见，看看他们认为重要的指标有哪些。
附：[其它获得额外数据的方法](&amp;lt;https://s3-us-west-2.amazonaws.com/gae-supplemental-media/additional-techniquespdf/additional_techniques.pdf)：
用户体验研究（UER）——高深度少用户。这也适用于头脑风暴，在 UER 中也可以使用诸如眼动相机的设备，同时回溯历史进行分析。 焦点小组——中等深度中等规模用户。能够在一些假设上获得反馈，但也容易陷入集体思想的情况（即真正的个人意见难以获得表达） 调研报告——深度较低但用户规模大。对于一些难以直接衡量的指标很有用。不能用于直接和其它指标比较，因为调研的对象和指标很可能与大盘不同。 指标的实际例子 高层次指标：点击率
定义一：Cookie 的总点击次数除以 Cookie 去重后的总数 定义二：被点击的页面数除以总页面数 定义三：总的页面点击次数除以总页面数 可能还需要过滤爬虫、牟利等行为以消除数据偏差。通过切片来判断数据是需要偏置还是过分偏置。在过滤掉数据后，计算每个切片的评价指标表现。如果数据表现有偏差，那说明数据里可能还需要调整。
为了消除数据周期带来的周末效应，最好按周或者按年进行数据的划分。
指标的特性 指标的敏感性和鲁棒性 敏感性和鲁棒性：敏感性是指指标对所关系的事物是否足够敏感，而鲁棒性性是指对不关心的事物是否足够不敏感。这可以通过预先小规模实验，来验证指标是否符合直觉。另一个方法是使用 A/A 测试，也就是什么都不改变，以此来排除一些伪关系。 分布：通过对历史数据的分析得到。 指标的分类 4类指标
计数或者求和（如：访问页面的用户数） 指标的分布-平均数、中位数和百分位 概率与比率（rates） 比例（ratios） 绝对指标与相对指标的选取 比较测试组和控制组的最简单方法是做差。</description>
    </item>
    
    <item>
      <title>HIVE 技巧积累之合并重叠日期</title>
      <link>https://kuhung.me/2019/merge_overlapping_date/</link>
      <pubDate>Sun, 09 Jun 2019 00:17:05 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/merge_overlapping_date/</guid>
      <description>目前网上流传着一个段子，说算法工程师实际上就是 SQL boy，数据分析师是 PPT boy。艺术来源于现实，实际上的我们真的有很多时间在写 SQL 出数据，或者是针对 bad case 做数据的进一步分析。
这不，近期这边接到的一个需求就是对玩家的某项行为进行统计。一般来讲，掌握基本 SQL 的技巧，这些需求的难度都不大。但是这个需求需要将玩家用户的多个重叠日期进行拉伸去重。这一下可难到大伙儿。在自个儿思考无果，团队讨论之后也没啥直接的办法。
在网上搜索一番后，很多都不是很对应。不过好在几轮筛选，找到了一个类似的需求。原文链接在这里：🔗。为了方便后来的人，在这里做个分析记录，以及后面举一反三该怎么做。毕竟这些东西很少出现在教程和课本里，但是当业务方有这个需求的时候，常常又很紧急，容不得细思慢想。
问题定义： 在解决一个问题之前，我们需要先明确定义问题。这里的问题是对多个重叠日期，用 SQL 将其进行去重，并在 HIVE 环境中使用。
对于日期情况的定义 这里采用穷举法，可以得出以下13类情况：
问题简化 解决问题的核心是简化问题。这个问题看起来情况众多，实际上，对于我们的任务，只有两种情况：一个是两个日期有重叠；一个是两个日期没有重叠。
对于不同的情况，要做不同的处理。重叠日期取最大最小日期即可，非重叠的分段取。剩下的即是通过工具去实现逻辑。
数据准备 这里采用原作的方式定义数据，创建出上面的13中情况。实际上，如果你的格式和下面的类似，做出对应的调整即可。
drop table t purge; create table t ( test_case varchar2(32) not null, start_date date not null, end_date date not null ); Insert into t values (&amp;#39;01:precedes&amp;#39;,to_date(&amp;#39;01&amp;#39;,&amp;#39;DD&amp;#39;),to_date(&amp;#39;02&amp;#39;,&amp;#39;DD&amp;#39;)); Insert into t values (&amp;#39;01:precedes&amp;#39;,to_date(&amp;#39;03&amp;#39;,&amp;#39;DD&amp;#39;),to_date(&amp;#39;04&amp;#39;,&amp;#39;DD&amp;#39;)); Insert into t values (&amp;#39;02:meets&amp;#39;,to_date(&amp;#39;01&amp;#39;,&amp;#39;DD&amp;#39;),to_date(&amp;#39;02&amp;#39;,&amp;#39;DD&amp;#39;)); Insert into t values (&amp;#39;02:meets&amp;#39;,to_date(&amp;#39;02&amp;#39;,&amp;#39;DD&amp;#39;),to_date(&amp;#39;03&amp;#39;,&amp;#39;DD&amp;#39;)); Insert into t values (&amp;#39;03:overlaps&amp;#39;,to_date(&amp;#39;01&amp;#39;,&amp;#39;DD&amp;#39;),to_date(&amp;#39;03&amp;#39;,&amp;#39;DD&amp;#39;)); Insert into t values (&amp;#39;03:overlaps&amp;#39;,to_date(&amp;#39;02&amp;#39;,&amp;#39;DD&amp;#39;),to_date(&amp;#39;04&amp;#39;,&amp;#39;DD&amp;#39;)); Insert into t values (&amp;#39;04:finished by&amp;#39;,to_date(&amp;#39;01&amp;#39;,&amp;#39;DD&amp;#39;),to_date(&amp;#39;03&amp;#39;,&amp;#39;DD&amp;#39;)); Insert into t values (&amp;#39;04:finished by&amp;#39;,to_date(&amp;#39;02&amp;#39;,&amp;#39;DD&amp;#39;),to_date(&amp;#39;03&amp;#39;,&amp;#39;DD&amp;#39;)); Insert into t values (&amp;#39;05:contains&amp;#39;,to_date(&amp;#39;01&amp;#39;,&amp;#39;DD&amp;#39;),to_date(&amp;#39;04&amp;#39;,&amp;#39;DD&amp;#39;)); Insert into t values (&amp;#39;05:contains&amp;#39;,to_date(&amp;#39;02&amp;#39;,&amp;#39;DD&amp;#39;),to_date(&amp;#39;03&amp;#39;,&amp;#39;DD&amp;#39;)); Insert into t values (&amp;#39;06:starts&amp;#39;,to_date(&amp;#39;01&amp;#39;,&amp;#39;DD&amp;#39;),to_date(&amp;#39;02&amp;#39;,&amp;#39;DD&amp;#39;)); Insert into t values (&amp;#39;06:starts&amp;#39;,to_date(&amp;#39;01&amp;#39;,&amp;#39;DD&amp;#39;),to_date(&amp;#39;03&amp;#39;,&amp;#39;DD&amp;#39;)); Insert into t values (&amp;#39;07:equals&amp;#39;,to_date(&amp;#39;01&amp;#39;,&amp;#39;DD&amp;#39;),to_date(&amp;#39;02&amp;#39;,&amp;#39;DD&amp;#39;)); Insert into t values (&amp;#39;07:equals&amp;#39;,to_date(&amp;#39;01&amp;#39;,&amp;#39;DD&amp;#39;),to_date(&amp;#39;02&amp;#39;,&amp;#39;DD&amp;#39;)); Insert into t values (&amp;#39;08:started by&amp;#39;,to_date(&amp;#39;01&amp;#39;,&amp;#39;DD&amp;#39;),to_date(&amp;#39;03&amp;#39;,&amp;#39;DD&amp;#39;)); Insert into t values (&amp;#39;08:started by&amp;#39;,to_date(&amp;#39;01&amp;#39;,&amp;#39;DD&amp;#39;),to_date(&amp;#39;02&amp;#39;,&amp;#39;DD&amp;#39;)); Insert into t values (&amp;#39;09:during&amp;#39;,to_date(&amp;#39;02&amp;#39;,&amp;#39;DD&amp;#39;),to_date(&amp;#39;03&amp;#39;,&amp;#39;DD&amp;#39;)); Insert into t values (&amp;#39;09:during&amp;#39;,to_date(&amp;#39;01&amp;#39;,&amp;#39;DD&amp;#39;),to_date(&amp;#39;04&amp;#39;,&amp;#39;DD&amp;#39;)); Insert into t values (&amp;#39;10:finishes&amp;#39;,to_date(&amp;#39;02&amp;#39;,&amp;#39;DD&amp;#39;),to_date(&amp;#39;03&amp;#39;,&amp;#39;DD&amp;#39;)); Insert into t values (&amp;#39;10:finishes&amp;#39;,to_date(&amp;#39;01&amp;#39;,&amp;#39;DD&amp;#39;),to_date(&amp;#39;03&amp;#39;,&amp;#39;DD&amp;#39;)); Insert into t values (&amp;#39;11:overlapped by&amp;#39;,to_date(&amp;#39;02&amp;#39;,&amp;#39;DD&amp;#39;),to_date(&amp;#39;04&amp;#39;,&amp;#39;DD&amp;#39;)); Insert into t values (&amp;#39;11:overlapped by&amp;#39;,to_date(&amp;#39;01&amp;#39;,&amp;#39;DD&amp;#39;),to_date(&amp;#39;03&amp;#39;,&amp;#39;DD&amp;#39;)); Insert into t values (&amp;#39;12:met by&amp;#39;,to_date(&amp;#39;02&amp;#39;,&amp;#39;DD&amp;#39;),to_date(&amp;#39;03&amp;#39;,&amp;#39;DD&amp;#39;)); Insert into t values (&amp;#39;12:met by&amp;#39;,to_date(&amp;#39;01&amp;#39;,&amp;#39;DD&amp;#39;),to_date(&amp;#39;02&amp;#39;,&amp;#39;DD&amp;#39;)); Insert into t values (&amp;#39;13:preceded by&amp;#39;,to_date(&amp;#39;03&amp;#39;,&amp;#39;DD&amp;#39;),to_date(&amp;#39;04&amp;#39;,&amp;#39;DD&amp;#39;)); Insert into t values (&amp;#39;13:preceded by&amp;#39;,to_date(&amp;#39;01&amp;#39;,&amp;#39;DD&amp;#39;),to_date(&amp;#39;02&amp;#39;,&amp;#39;DD&amp;#39;)); commit; 定义出来的数据如下</description>
    </item>
    
    <item>
      <title>A/B test 揭秘之什么是 A/B test</title>
      <link>https://kuhung.me/2019/abtest/</link>
      <pubDate>Fri, 24 May 2019 09:02:00 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/abtest/</guid>
      <description>此文总结自 Udacity 的课程：A/B test，详细而系统地讲述了 Google，Amazon 以及 Netflix 等公司是如何在商业问题中设计 A/B test 并评估效果的，对于国内的业务也有很强的参考意义。这里是总结的的一部分：什么是 A/B test，讲述 A/B Test 的定义、适用范围以及和传统方法的异同。指标选择、实验设计与评估将在后面陆续放出。
A/B 概览 Q：什么是 A/B test？ A：A/B test 是一种用来测试新产品或新功能的在线测试常规方法。一般分为两组用户，一组对照组，一组实验组。对照组采用已有的产品或功能，实验组采用新功能。要做的是找到他们的不同反应，并以此确定哪个版本更好。
Q：A/B test 是否有适用范围，还是说所有情况都适用？ A：A/B test 能帮助你爬上前面的山峰，但如果想弄清楚是爬这座还是另一座，A/B test 可能不太有效。A/B test 能对很大范围的事情进行测试。
例如： 亚马逊个性化推荐的 A/B test，发现个推能显著提升收益。 领英对首页流排序的测试，谷歌的搜索广告排名。 此外还可以对用户难以察觉的东西进行测试，如网站响应速度。亚马逊在07年发现：页面每增加100ms延迟，收入将会下降1个百分点。 Q：A/B test 不能做什么事情？ A：上线新的版本，带来完全不同的交互体验；或是低频长周期的产品；以及 A/B test 并不能发现被遗漏了什么。
测试新的交互体验时，A/B test 可能不太奏效。原因有两个：一、厌恶改变，不是每个人都喜欢改变，这可能导致用户的厌恶和抵触情绪。二、新奇效应，对于新鲜事物，用户可能会挨个尝试所有东西。
于此同时，这里会有两个问题，一个是你的比较基准是什么？另一个是需要花多少时间得出结论？举个例子：像低频的房屋租赁，在测试推荐流的时候，很难确定用户是为啥回来的。因为这要花的时间太长了，也许是半年，甚至是更久。
A/B test 无法告诉你是否有遗漏。当我们在某个产品测试信息推荐流时，仅凭 A/B test，无法知道是否该给这个用户推荐地理信息的资讯。于此同时，也无法确定别的产品是否需要推荐流。
Q：对于 A/B test 难以胜任的事情，该如何解决？ A：通过其它数据源来补充，对日志进行分析假设验证。或是通过其它技术，如用户研究来定性分析。
Q：A/B test 的历史是什么样的？ A：最先使用 A/B test 的，可能是农业领域。人们将土地分为不同部分，测试哪块地适合哪种作物作物或是作物如何生长。在科研领域。假设检验是确定创新的关键方法。医学上的 A/B test 被称为临床试验，通过此种方法来确定新的治疗方法是否有效。</description>
    </item>
    
    <item>
      <title>数据从业者必读的7本书 Booklist for DE</title>
      <link>https://kuhung.me/2019/book-list-for-ds/</link>
      <pubDate>Tue, 07 May 2019 23:34:54 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/book-list-for-ds/</guid>
      <description>之前逛论坛，或者学习网站，看到很多人喜欢推荐书。自己早些时候也是这样，但是只 mark，却很少去看。如今作为一名社会人，虽说工作之余时间少了很多，但业余仍在坚持阅读。其中，支撑学习动力的一本书便是：《穷查理宝典》。书中查理·芒格提到的多学科思维，以及复利思维，一直在影响我的交友、做事和看问题的方式。
有关注某校友的公众号，他是做爬虫和可视乎的。某天在推荐 Python 学习资料。封面看着挺美，点开一看，书单质量实属一般。倒像是接的推广，很多估计他自己都没有看过，不太负责任。于是乎，便萌生了出一期书单的想法。而定位，便是数据科学家、数据挖掘工程师、算法工程师的书单。
首先声明，这份书单不是单纯的技术向书籍，不会有什么西瓜书或是算法导论之类的。他们也是好书，但不会出现在这里。因为在工作中大家就会发现，技术只是工具，好的工匠 != 熟练使用工具的熟练工。看见大局，同时有跨学科的思维，能够从事物的本质去出发，理解和思考它，也很重要。
作为一个数据挖掘工程师，以下是推荐的核心7本书单。为什么是7本呢？因为人一下子能记住的东西是有限的，记不住就忍不住收藏。收藏了就几乎等于很少看了。收藏一时爽，一直收藏一直爽。所以，书单从原来的二十几本变为了现在的7本。
这7本书的逻辑是从底层到高层。底层是构成我们一部分的东西，是我们的认知。中间则是我们的技能。而高层，则是我们的自我实现。最终又回到我们的认知。简单来说，就是从软技能到硬实力，再到软实力。
通识与概念 Top 7 通识趣味读本&amp;ndash;《赤裸裸的统计学》
该书讲了很多身边的例子，让人对统计学的应用有一个初步认识。且是一个检验兴趣点的很好方式。如果你对这些东西都不是很感冒，那么可能这行除了薪水，没有别的能吸引你。后面的内容也就没有读的必要了。
除了例子以外，本书也有很多反常识反直觉的东西。诸如统计数字会撒谎、因果关系与相关关系的混淆。黑天鹅、三门问题等地很考验一个人的智商。看完之后有醍醐灌顶的感觉。
与之类似的书还有《大教堂与旧集市》、《编码》等。
Top 6 大而全&amp;ndash;《信息论、推理与学习算法》
如果你对第一本书的内容感兴趣，想要深入了解背后的原理，那么这本书不容错过。这本书更像是一本大百科全书，涵盖了传统信息论到最新算法的大部分内容。从熵、到编码、再到概率与推理，最后到常见的模型和神经网络。是一本适合高年级学生或者专人人员的查阅宝典。
这本书说实话有些厚重，限于版面，如果只推荐一本，会推荐它。当然如果想看更多元的内容，附加的书籍📚可不容错过。由于本身的专业偏传统工科，编码、信息压缩也有接触，因而过渡起来不会很困难。
与之互补的书还有《推荐系统实战》、《信息检索导论》、《集异壁》等。
工具与思想 top 5 吃饭工具&amp;ndash;《SQL 必知必会》
作为一个工程师，常自嘲自己是 sql boy。那是因为，在实际生产环境中，数据处理花了很大事件。大部分时间都是和sql 打交道。做过比赛的同学可能知道，数据处理、特征提取是很关键的一步。
在企业中，这一情况越发突出。有时候原始数据分散在各个地方，连规整的数据都没有。因而需要掌握一定的 sql 技能。虽然有些专业会学习数据库这一门课程，但这本书可以起到一个梳理作用，同时也有一些小的注意点。
掌握了这本书的同学，推荐《 SQL 反模式》，讲 sql 范式更进一步。虽说是给数据库开发人员看的，但是知其然并知其所以然，也是很好的。
如果想看到更大的图景，那么 ddia 一定不容错过。ddia 在一年前就很火，网上也有他的公开中文翻译。讲解整个数据系统很透彻。适合各类程序开发人员阅读。
top 4 《利用 python 进行数据分析》
这本书也算是启蒙书。涉及的内容基本面很广，该有的都有了。介绍了 python 在数据科学领域的基础知识，同时也有案例解析。
读完这本书，参加小型的数据挖掘、机器学习类的比赛不会存在门槛了。与此类似的书还有《集体智慧编程》，以及近期比较火的 hands on ml。
思考与呈现 前面都是技术向、原理向的内容。是不是掌握了以上内容，就可以美滋滋的享受生活了呢？其实这是很多软件从业人员、甚至是工科同学的一个共同误区。觉得把我的技术学好了，就万事大吉，酒香不怕巷子深了。在这里千万不要忽略掉你的软实力。
在某些头部公司、ppt 文化盛行。虽然有些走极端，这其实也是一种现状。从原则上来讲，只讲 PPT 画大饼而不做事是不对的，所以他们被放在最后讲。与此同时要记住，硬币的反面也是不对的，只埋头苦干，而不去扩大影响力，事情的价值就很可能被低估。
top 3 《金字塔原理》
主要是逻辑性思维的呈现原则，以及最核心的一点站在对方的角度看问题。书中罗列了很多报告撰写、演讲呈现的方法技巧。比如自上而下思考，自下而上表达，横向概括、纵向分类，独立穷尽。这些机巧用在你的日常生活中的表达和演讲，将会大大加分。
与之类似的书还有《演说之禅》，以及稍微和职业更靠近的《数据可视化之美》。
top 2 《咨询的奥秘》</description>
    </item>
    
    <item>
      <title>深度强化学习技巧 hacks for training deep RL</title>
      <link>https://kuhung.me/2019/training_rl_systems_hacks/</link>
      <pubDate>Thu, 02 May 2019 11:59:48 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/training_rl_systems_hacks/</guid>
      <description>深度强化学习技巧 hacks for training deep RL 这是一篇旧文，John Schulman 《深度增强学习研究基础》演讲(Aug 2017)中记录的 tricks。近日重看，发现有些东西在工程中是通用的，值得一读。 测试新算法的技巧 简化问题，使用低维变量。 使用类似只有角度和速度两个变量的 Pendulum problem 问题。 这样做方便将目标函数、算法的最终状态以及算法的迭代情况可视化出来。 当出现问题时，更容易将出问题的点直观的表达（比如目标函数是否够平滑等问题）。 构造一个 demo 来测试你的算法 比如：对于一个分层强化学习算法，你应该构造一个算法可以直观学习到分层的问题。 这样能够轻易地发现那里出了问题。 注意：不要在这样的小问题上过分的尝试。 在熟悉的场景中测试 随着时间的推移，你将能预估训练所需的时间。 明白你的奖赏是如何变化的。 能够设定一个基线，以便让你知道相对过去改进了多少。 作者使用他的 hpper robot，因为他知道算法应该学多块，以及哪些行为是异常的。 快速上手新任务的技巧 简化问题 从简单的开始，直到回到问题。 途径1： 简化特征空间 举例来说，如果你是想从图片（高维空间）中学习，那么你可能先需要处理特征。举个例子：如果你的算法是想标定某个事物的位置，一开始，使用单一的x，y坐标可能会更好。 一旦起步，逐步还原问题直到解决问题。 途径2：简化奖赏函数 简化奖赏函数，这样可以有一个更快的反馈，帮助你知道是不是走偏了。 比如：击中时给 robot 记一分。这种情况很难学习，因为在开始于奖赏之前有太多的可能。将击中得分改为距离，这样将提升学习速率、更快迭代。 将一个问题转化为强化学习的技巧 可能现实是并不清楚特征是什么，也不清楚奖赏该是什么。或者，问题是什么都还不清楚。
第一步：将这个问题使用随机策略可视化出来。 看看那些部分吸引了你。
如果这个随机策略在某些情况下做了正确的事，那么很大概率，强化学习也可以做到。
策略的更新将会发现这里面的行为，并促使稳定下来。 如果随机策略永远都做不到，那么强化学习也不可能。 确保可观测 确保你能够掌控系统，且给 agent 的也是同样的系统环境。 举个例子： 亲自查看处理过图片，以确保你没有移出掉关键信息或者是在某种程度上阻碍算法。 确保所有的事物都在合理的尺度 经验法则： 观测环境： 确保均值为0，方差为1。 奖赏： 如果你能控制它，就把他缩放到一个合理的维度。 在所有的数据上都做同样的处理。 检查所有的观测环境以及奖赏，以确保没有特别离奇的异常值。 建立一个好的基线 一开始并不清楚哪些算法会起作用，所以设定一系列的基线（从其他方法）。 交叉熵 策略更新 一些类型的 Q-learning 算法: OpenAI Baselines 或者 RLLab 复现论文 某些时候（经常的事），复现论文结果特别困难。有如下一些技巧：</description>
    </item>
    
    <item>
      <title>机器学习建模与部署--以垃圾消息识别为例</title>
      <link>https://kuhung.me/2019/flask_vue_ml/</link>
      <pubDate>Sat, 20 Apr 2019 14:31:26 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/flask_vue_ml/</guid>
      <description>前言 学历与定位 近日在某论坛，有网友提问道：搞机器学习是不是要博士或是硕士学历，是不是要求很高，顶会论文？本科生或者更低学历的，是不是就没有机会了？从最近公司的招聘来看，算法工程师的 bar 确实有在提高。但在某些事业部，仍需要很大的人力来做落地场景。每个人都要找准自己的定位，公司也有它的部门定位。
如果是发论文、要在学术界站稳脚跟，给投资人“我们很重视最新技术”的信心，那博士确实很重要。另一个角度，从实用角度来说，研究生和本科生可能性价比更高。当然，作为一个本科就业的人，如果没有较为丰富的实战经验；有机会的话，还是拿到硕士及更高学历比较好。这里的实战经验就比如：搭建一个完整的、涉及算法模型、后端及前端的系统。
模型算法的实用主义 机器学习的实用主义，不是在论文多少，而是用正确的方法去解决正确的问题。而作为背后的工程师，除了调参、除了写 sql，做调包侠、做 sql boy、报表 boy 以外，在之前的文章也提到过，要学会做正确的展示，做全套的工程化实施。毕竟，等排期很难受；有些情况前后端资源不够，或者优先级很低，那就需要自己动手了。以下以上面的垃圾邮件分类为例子，说明该如何搭建一个前后端完整的机器学习系统。
这里将本次的任务拆解，分为三个部分来讲。后端 flask、前端 Vue、ML 模型采用 flair，项目地址 kuhung/flask_vue_ML
后端 flask 相关依赖的安装 pip install -r requirements.txt
核心函数 导入函数包 from flask import Flask, jsonify, request from flask_cors import CORS # 做跨域的准备 from flask import session # 追踪客户端会话 from flair.models import TextClassifier # 模型导入，采用前不久开源的 flair 做文本分类 from flair.data import Sentence 准备工作 app = Flask(__name__) # 声明准备 app.secret_key = &amp;#34;super_secret_key&amp;#34; CORS(app) classifier = TextClassifier.</description>
    </item>
    
    <item>
      <title>如何设计一套类似视觉中国“鹰眼”的技术</title>
      <link>https://kuhung.me/2019/vgc-it/</link>
      <pubDate>Sun, 14 Apr 2019 11:51:09 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/vgc-it/</guid>
      <description>这两天除了马总的 996， 互联网上最火的莫属被黑洞绊倒的视觉中国了。视觉中国因黑洞图的版权争端，被卷入更大的争端。一时间舆论哗然，其股票连续跌停。他是如何一步步壮大，又是为何跌倒的呢？往前看几年，起底其历史：公开资料显示，“视觉中国凭借其‘鹰眼技术’，有力的打击了“盗版”并成功形成了自己的商业模式。”
2016年初公司开发图像追踪系统，通过人工智能、图像比对、爬虫技术，能够追踪公司拥有代理权的图片在网络上的使用情况，一方面大幅降低版权保护的成本，更为有价值的是，公司因此大大降低了客户获取成本以及通过大数据获取客户的内容需求数据。
![](/images/vgc/vgc 不敢配图.jpg)
“鹰眼技术”对于公司商业模式中的维权部分，起到了极其重要的作用。说到这里，大家其实可能会很好奇，这个“鹰眼”到底是个啥技术。在一番搜寻后，找到了一些资料：“鹰眼技术”在其公司的年报里，正式名称是“互联网图片深度标引及侵权追踪技术”。在检索更多细节无果之后，数据挖掘、机器学习工程师尝试从以往经验出发，给大伙儿构建一套自己的“鹰眼系统”。
爬虫技术网上有很多，这里不展开讲。基础的爬虫通过一些浏览器插件即可实现，高级一些的用 python 包也能实现，当然这里面也是一门很大的学问，深钻起来可以写很多。本文主要讲讲这套图像检索对比系统，试图重构它。
首先要复习一下基础知识。在大学课程中，有一门课叫《机器视觉》。这门课将机器视觉相关的内容分为了三个层次：图像处理、图像分析及图像理解。图像处理主要是对图像的基础信息进行调节，不涉及高层抽象的东西。主要是均衡化、时域空域的各种滤波、图像编码等内容。目的是得到想要的图片。通俗来来讲就是用各种操作，到达类似 PS 的效果。第二个层次是图像分析，图像分析和图像处理有部分重叠。通过一些算子公式，对图像进行提取分析，以得到想要的数据。而第三个层次的图像理解，则是针对高层的抽象，基于图像处理的结果和图像分析的数据，进行内容的理解提取。
![](/images/vgc/vgc 图像工程与相关学科领域的联系与区别.jpg)
基于此，可以从两个维度进行建模。一个是传统的图像视觉；另一个则是新兴的模式识别、深度学习算法。
首先思考下，如果是一个人，他会如何判断两张图相似。从构图元素，从色彩出发？不，我会右键，单击属性进行查看，对比两者的基本信息。大伙儿不要以为图片就是单纯的图，其中可以存储很多信息。创建时间、创建者、修改时间这些大部分都会存储下来。前段时间还流行在图片后门存种子文件，都是类似的道理。
从图片的基础信息提取，是一个不可忽略的角度。很多时候，会忘记从问题的原始目的出发，转而用些花哨的解法，其实是不划算的。还记得那个用电风扇吹空肥皂壳的故事吗？这样的事情在模型领域也有不少。但也要知道，在这个问题上，图片的基础信息，也不是最完备的解法，仍需要一些更高级的手段。
第一个角度，从传统手法出发，对图像信息进行提取。学过这个的朋友，可能会知道冈萨雷斯的 Matlab 机器视觉，抑或是 OpenCV 处理图像。最简单的是对图像的颜色直方图📊进行对比。但是也样会带来较大偏差。抑或是两幅大小相同的图相减。但这样也会因为变换而产生偏差。比较高级的、常用的手法是提取算子，角点特征去提取他。提取后再进行对比。但这个方案也会有问题🤨，效率比较低。要拿库里的数万张图去匹配互联网上新上传的200万张图，计算量巨大。没准这也给部分群众，公司在“放长线钓大鱼”的错觉。也许只是系统真的太慢了而已。
而更近一步的，可以考虑用模式识别的方式去处理它。通过现有成熟的技术，将图像转化成向量，做向量之前的计算。这样的好处是可以利用 GPU 释放算力，同时对于图片的二次加工，如旋转、剪裁、翻转、加滤镜等可以起到很好的识别作用。为了提高计算速度，可以考虑对向量表征进行编码，然后利用文本检索的技术，去做一个倒排索引。更进一步的，可以通过识别图片的意思，讲图片的主体描述出来。这样的图片一般都是描述重大社会事件的，具有较好的识别度。这里可以参考之前写的文章：教 AI 学会看图说话：Image Caption。
总体来说，实际的架构可以是以上的综合。爬取公开互联网上的图片，并存下原始链接和页面快照，以便日后确认。讲爬下来的数据进行处理，将之与库中的图片对比（当然库中的图片也可能是爬下来先收录再谈）。对比返回一个相似度，100%重的那就是的了，接下来就是法务维权。
这套系统的核心，其实不是人工智能，人工智能只是一个技术手段。你用“人工”去对比互联网上的每一条资讯的图片，也能达到这样的目的。当然，也不可否认其助推作用。其中最让股民喜欢，潜在合作方厌恶的，以至于这次反应这么大，大概是其稳固的维权式商业模式。
最后需要重申一点：以上资料均为历史经验积累，绝无视觉中国的半点内部资料，如有雷同，纯属巧合。
附录 视觉中国图片侵权追踪系统曝光：鹰眼系统
2018年度市科委第四季度项目(课题)验收公开清单
视觉（中国）文化发展股份有限公司 2016 年年度报告
《数字信号与图像处理》 &amp;ndash; 郑方， 章毓晋
《基于内容的图象和视频检索》</description>
    </item>
    
    <item>
      <title>机器学习项目的完整生命周期 Hands On Machine Learning in Industry </title>
      <link>https://kuhung.me/2019/hands-on_machine_learning_in_industry/</link>
      <pubDate>Mon, 01 Apr 2019 19:28:32 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/hands-on_machine_learning_in_industry/</guid>
      <description>机器学习这东西，在学术界产出颇多，但在工业界，却很少落地。究其原因，是理念落地不够彻底，很多从业者和相关上下游不理解所致。这次就这这个机会，梳理下一个机器学习，从立项到落地再到结束，他的完整生命周期该是什么样子的。这里参考了《Hands-On Machine Learning with Scikit-Learn and Tensorflow》，值得一提的是这本书写的很不错，和《集体智慧编程》有一拼，建议阅读英文原著或东南大学出的影印版。
机器学习项目的生命周期 问题定义 定义问题，并关注大局 数据处理
获取数据 探索性的数据分析 清洗数据，为接下来的模型做准备 模型方案
探索不同的模型并挑选合适的模型 对模型进行微调，并集成为更好的模型 解决方案呈现 部署维护
部署、监控并维护系统 定义问题，从大局出发 和业务团队一起定义问题目标 我们的解决方案将会如何发挥作用 现在的解决方案是什么样的（如果有） 你将如何定义这个问题（有监督、无监督，在线还是离线） 结果该如何衡量 衡量方法是否和商业目标一致 要达成这一目标，至少的表现该是什么样子的 类似的问题是什么？有无可复用的经验与工具 我们有专家知识吗 你将如何着手解决这个问题 列出你或者别人目前所作的努力 如果可能，对假说进行验证 获取数据 建议：尽量自动化以更容易地方式获取最新的数据
列出你所需的数据以及体量 找寻并记录下获取数据的方式 检查数据将占据多少空间 检查是否有法律风险，如有必要请获得许可 获取许可 创建工作空间，确保存储足够大 获取数据 转换数据的格式以便能够方便操作（不需要改变数据本身） 确保敏感信息被删除或保护加密（匿名） 检查数据的大小和类型（时间序列、采样、地理信息等） 划分测试集，把他放一边，并且不再去动他（防止数据泄露） 探索数据 建议：在该阶段尽量获取领域专家的意见
创建数据的副本以便做数据探索（如果数据量太大，做降采样处理） 创建 Jupyter notebook 以便保存探索记录 研究每个属性及其特征 名称 类型（类别，整型/浮点，有无上下界，文本，结构化等） 缺失值 噪声数据（随机数，异常值，四舍五入的误差） 对本任务可能有用的数据 分布类型（高斯分布，均匀分布，指数分布） 对于有监督问题：确定目标对象 可视化数据 研究变量间的相关性 研究你将如何着手解决此问题 确认比较有希望的解决方案 确认有用的外部数据 将以上信息存档记录下来 准备数据 建议：
在数据的副本上操作（保持原始数据不被影响） 将你所作的数据变换写成函数，有以下5个原因 便于在本项目的新数据上复用 便于在别的项目中复用 快速清洗和准备测试集 在立项后，能够及时对数据进行处理 让数据变换过程也能作为超参数的一份子，进行调参 数据清洗 调整或移除异常值（可选） 填补缺失值（0，平均数、中位数），或者简单的去掉缺失的样本或特征 特征选择（可选） 去掉对本任务无用的信息 特征工程，适度 连续数值离散化 特征分解（分类特征、时间特征等） 特征变换（log(x),sqrt(x),x^2等） 特征组合 特征尺度变换：标准化或归一化 挑选合适的模型 建议：</description>
    </item>
    
    <item>
      <title>GPT2 模型生成假正经文稿 Slack gpt2 Bot </title>
      <link>https://kuhung.me/2019/slack-gpt2-bot/</link>
      <pubDate>Mon, 25 Mar 2019 22:36:06 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/slack-gpt2-bot/</guid>
      <description>slack app：slack workspace
记得在校的时候，冰岩作坊做过一个app，讲接龙故事的。类似于我写一段，另一个人写接下来的一段，最后凑成一个完整的故事。当时，可产生了不少有意思的段子。最近，GPT2 模型的发布，让人不禁想到，有没有可能让机器来完成这个任务呢？机器写十四行诗、机器写莎士比亚风格的文章，机器写对联，这些都已经成为了现实。人工智能虽然没有带来突飞猛进的质变，但着实催生了很多有意思的小玩意儿。对于GPT2，一个字概括来说就是：壕——数据量大，算力能够 cover 住。这套算法模型网罗了几乎现有的所有文本数据，成功“过拟合“地屠榜，刷新多个 NLP 任务榜单排行。作者为了预防滥用模型、同时让别的研究者能够有个初步地认识，开源了一个小一些地模型。该模型的能力之一，就是我们今天的主题：接着别人地话写故事。今天我们要通过算法来实现。
虽然作者有在尽力简化复现难度，但对于很多不是这行的人，让他去敲命令行来走完整个流程，还是困难重重。能够将深奥的原理讲给普通人听，并且简单易懂，是一项科学传播的必备能力。做为技术向的工程师，在产品处于雏形阶段时，能够通过一个 MVP 最小价值产品，实现核心功能，也是一项大大的加分项。对于今天的任务，我们选取容易上手，接口丰富的 slack 作为我们的前端交互窗口。
如何构建一个 MVP 产品；或者具体的来讲，在我们的这个任务中，如何将数据挖掘工程师的模型成果，转化为可落地、可感知的产品或服务呢。操起斧子直接开干，依葫芦画瓢撸个前后端出来吗？这，其实是很多技术人员的一个误区——认为什么都可以从技术层面解决，”少废话别bb，bb is cheap，show me the code“。但从一个商业产品或服务商的角度来看，客户与渠道是前台，我们的客户是谁、如何触达客户以及选用何种渠道维系客户，是一个一开始就要考虑的事情。
以这个 GPT2 bot 为例，我希望的客户是对 GPT感兴趣，但又没基础去折腾的学生或是其他领域的人士，抑或是没时间去跑 demo 的专业同行。如何触达客户：你看的这篇文章的平台，就是我的触达媒介。我最后选择用 slack 交付我的服务，而不是 qq 或 微信，是因为他成本更低，虽然阻挡了部分潜在客户，但权衡后是可以接受的。最后的工作才是依葫芦画瓢，照撸一个出来。本文参照了EdwardHuCS,并在其基础上做了部分改动。
虽然这波 AI 热潮，让很多像我这样的非科班得以上车。但在实际生产环境中，我们还是暴露了诸多问题。其中之一，便是工程能力薄弱。会写 SQL 、会手推算法、会调包，但是就是不会写能跑的整个小系统。在业务变化快的公司中，这可能不是一个好事情。你的模型也许还在细调参数，但突然整个业务就没了。如果你能拿出一个能跑的马儿，兴许能影响这个业务。这就是前面提到的加分项。
言归正传，我们回到在slack上面。我们的核心就以下代码：
核心代码解读 导入一些基础配置
import os import time import re from slackclient import SlackClient import sys from gpt2.src import generate_unconditional_samples # instantiate Slackk client slack_client = SlackClient(&amp;#39;&amp;#39;) # 认证口令 # starterbot&amp;#39;s user ID in Slack: value is ssigned after the bot starts up starterbot_id = None 延迟配置以及样例和匹配模式</description>
    </item>
    
    <item>
      <title>凭什么打败竞争对手？基于数据、基于分析的商业竞争 Competing on Analytics </title>
      <link>https://kuhung.me/2019/competing-on-analytics/</link>
      <pubDate>Tue, 12 Mar 2019 10:48:59 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/competing-on-analytics/</guid>
      <description>数据科学家这个职位，随着12年的哈佛商业评论的一篇文章，成为了21世纪“最性感的职业”。这年头，越来越多的年轻人开始往这个方向奔，市场几近饱和。但是，很少有听见企业家说：“是的，我们很需要数据工程师，因为以下原因&amp;hellip;“对于看此文的老板们，你们是否不止一次听到媒体鼓吹大数据、鼓吹机器学习、鼓吹人工智能，却很少有听到说这些东西，对于企业来说，实实在在带来了什么。如果你的答案是“Yes”，那么这篇文章将解答你的疑惑。
本文论点主要取自 Thomas H. Davenport 文章 《Competing on Analytics》，试图从企业管理的角度，阐述为什么我们需要数据科学家（或者说广义的数据相关人员）；他们能给企业带来哪些切实的好处；以及作为企业家，我们该如何转型，如何拥有更强的竞争力。
同质化的市场危机 在当下，想依靠某个新奇的点子或者是产品服务，已经不大可能再和其他竞争者区分开来。作为一个人类组织，底子里仍保留有人类的天性。人类天生就爱模仿，从一出生模仿吃东西，到后面通过模仿习得语言，再到后面的学习。人类的本质可能就是个复读机。模仿可以说保证了我们人类种族的存在与延续。对于企业来说，也大抵相同。
尽管我们知道，从道德原则上讲，大企业模仿别的东西是不对的。但是，从商业利益角度，无数的事实告诉我们，模仿，对于企业来说真的是一个大概率稳赚不亏的事情。把市面稳定的产品拿来微创新，再加持自己的人力或渠道优势，很快就能回本。保不齐也能把竞争对手耗死。现实即是如此。
比你更有利的竞争对手 越来越多的产品、服务开始同质化。无论互联网、游戏、手机或是制造业、服装业，越成熟的领域这个现象越明显。与此同时，我们的竞争对手可能在东南亚，拥有更低的人工成本；可能在不规矩的私营企业，拥有更多免费加班的程序员；也可能是腾讯头条这样的大厂，控制着大部分渠道。那么，你的产品服务，凭什么脱颖而出？
答案就是成为分析型竞争者
数据分析竞争者在干什么 数据分析型竞争者会做以下几个事情。
用户 通过分析，去洞察客户的需求，以及他们所愿支付的价格，找到他们保持忠诚度的原因。在商业模式中，客户是我们的直接服务对象，也是收入来源。那么，势必需要搞清楚客户的数据情况。
在当下，比较流行的技术是通过用户画像技术，去刻画我们的用户群体。用户的分布地域、用户的性别以及年龄，用户的偏好。只有这些东西都搞清楚，我们才能清楚的知道我们的客户是谁，为什么他们需要我们的服务或产品。
渠道 与此同时，也要分析我们触达用户的渠道。不得不说，发明电视黄金档广告的人，一定是个商业奇才。曾几何时，电视广告和路标广告曾是众多老板的竞相争夺的资源，屡屡出现标王，一次次刷新记录。在那个时代，只要你砸钱，拿到黄金时间的广告，就是稳赚不赔。但现在不一样了，各种互联网渠道，在抢占着人们的注意力。楼宇电梯广告、站台路牌广告各种花样层出不穷。
但是，你就真的清楚该投哪一个了吗？还是听信对方销售人员一阵天花乱坠的吹嘘，就乖乖交了钱，却得不到想要的转化效果？通过适当的分析，我们可以知道用户在哪些渠道对我们的响应度最高，知道哪些渠道可以带来更高的转化，从而优化我们的渠道成本投入。
举个我自己的例子：我的文章隔几天就会发一篇，分布在不同渠道：微信、知乎、头条、掘金、简书。那我是单单为了占坑防洗稿就完事了吗？不是的，作为一个数据挖掘工程师，我会分析各个渠道带来的阅读、关注和互动，从而调整渠道策略。
目前我就发现，知乎和头条的信息流产品在分发策略上做的很不错，能保证充分的曝光。微信适合做核心粉丝的沉淀，和粉丝去探讨交流一些问题。而掘金、简书的曝光有限，那我就会在更新是把他们往后放。
那是不是我就应该放弃简书掘金了呢？也不是的。通过分析我发现，掘金在谷歌搜索的排名占比靠前，简书在百度搜索的排名靠前，他们俩实际是很好的 SEO 流量优化渠道。这就是渠道分析的效果。
人力 通过分析，去计算员工对公司利润做出的具体贡献，而不仅仅是关注薪酬成本。以前的自己觉得，买东西或是做事情，先去看成本是多少。工作后发现，领导的视角不是这样的。成本对于老板们来说，只是个数字。他们更关心做事的投入产出比。对于员工问题也是这样。
但现实不是这样的。很少有公司会关注这名员工对利润的贡献，反而更多的去关注他的成本是多少。他今天996了没，没有996对不起我给他开的价钱，而丝毫不关心员工对公司利润所做的贡献。而另一个极端就是，有些老板觉得这类人便宜，从而养了很多闲人。这两种情形虽然短时不会给企业带来多大负面影响，但你的竞争性选手，已经在利用数据，去发现员工的价值贡献，并对人事招聘进行调整了。
库存 在实业中，我们还要追踪现有的库存，预测并分析需求量，减少库存的积压，提高现金流转效率。这里主要是对重资产的企业老板，如果你能在这其中发现机会，一个点的提升，都会带来巨大收益。
数据分析竞争者的特质 那么，集体来讲，分析型数据竞争者具有怎么样的特质呢？如同招聘时给出的工作描述，我们也可以给分析型竞争者做画像。
数据竞争型选手应广泛应用模型和算法以及对应的最优化技术。例如作者之前实习的某普惠金融银行，通过最广泛的数据建模，给中小微个人提供贷款，赚大型银行看不上的钱，同时自己也很滋润。
组织内部全面应用数据分析等相关技术。对各个流程进行数据分析、对各个环节进行建模以优化体验，减少流失。
同时，也应该有自上而下的支持。如果一个企业的领军人物都不相信，那一线员工又何来的信任和执行力呢。企业老板应具备一些基础知识，同时有能够值得信任、不编造数据的专家。
为什么它有效 说了现状说了要求，那为什么套措施有效呢？如果大家都有，那不就是没有差异化了吗？难道我们要搞军备竞赛吗？这不就和贩卖焦虑的自媒体一样的了吗？
其实不是这样的。一个身材羸弱的人和一个经常分析自己身体状态并针对性强化的人，他们外在的表现就会不一样。大部分企业在竞争中，使用的技术很相近，产品差别也不大；唯一能有差异化的，可能就是商业流程了。数据的挖掘分析，帮助企业家从流程中挤出每一滴价值。
尽管很多公司都有数据分析团队，但只有娴熟运用的公司，才能在各行各业取得霸主地位。甚至，对于如头条、亚马逊这样的公司，数据挖掘、算法已经成为了企业的名片和核心竞争力。
核心4条解决方案 合适的焦点、分析不可过于分散，免得失去焦点。
合适的文化、小范围检验，最小可行产品验证。
合适的人才、有分析能力且能深入浅出说明问题；有商业才能能够在商业角度阐述价值；以及沟通的技巧。
合适的技术、数据储备、硬件支持，最终才会立于不败之地。
最后，数据竞争型选手，如何说明他确实有效。很简单，以始为终点，检视最初的目标。</description>
    </item>
    
    <item>
      <title>用先知模型预测股市 Prophet in 000300 </title>
      <link>https://kuhung.me/2019/prophet-in-000300/</link>
      <pubDate>Fri, 08 Mar 2019 22:48:45 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/prophet-in-000300/</guid>
      <description>跑步进场 最近股市大涨，不少人忙着跑步进场。作为保守型“投资者”，主投指数基金：沪深300。在这波行情 中，短短2个月，也有13%的账面收益。虽然知道指数类适合长期持有，但也好奇，这个点是否是高位了。为了解决这个疑虑。我们今天用算法模型套一套，看能否发现些什么。
时序预测的价值 时序问题的预测在生活中很常见。例如：游戏在线人数预测、消费情况预测、 O2O 的到店人数预测、交通流量预测，这些场景的精确预测，为资源的调配起到了重大的参考作用。从个体角度来说，得到的服务和体验也大大提升。
为此，Facebook 开源了一套工具 Prophet，专门用于时间学列预测。在这里，我们将用它，来一探股市究竟。
时序预测的原理 对于时间序列问题，常用的手法是时间序列的分解：这里有些类似于傅里叶变换的意味。将一个函数分解为多个规律函数的和积。时间序列的常见组成成分包括：季节项、趋势项以及噪声。在 Prophet 中，结合实际情况，他们又加入了节假日项目。之前在一次 kaggle 的比赛中，我们也发现节假日的数据波动，其实是类似于周末效应的。即：节假日的前后数据，类似于周六的前后数据。对数据进行修正后，评价指标会好很多。
废话不多说，咱们开干。
Prophet in 沪深300 工具包安装 pip install fbprophet
数据准备与清洗 import pandas as pd import numpy as np from fbprophet import Prophet 数据准备
数据来源为网易财经，沪深三百指数。 data = pd.read_csv(&amp;#39;../data/000300.csv&amp;#39;,encoding=&amp;#39;GB2312&amp;#39;) data.head() 数据清洗
选取需要的数据，并对数据做 log / box-cox 变换，使数据更符合线性、正态分布，减少方差差异。经济系统和生态系统类似，都存在指数级增长现象，也存在饱和现象。我们这里采用 log 变换。 df = data[[u&amp;#39;日期&amp;#39;,u&amp;#39;收盘价&amp;#39;]] df.columns = [&amp;#39;ds&amp;#39;,&amp;#39;y&amp;#39;] df[&amp;#39;y&amp;#39;] = df[&amp;#39;y&amp;#39;].apply(lambda x: np.log(int(x))) 模型拟合与预测 简单定义，然后拟合。
m = Prophet() m.fit(df) 预测未来一年的行情
future = m.</description>
    </item>
    
    <item>
      <title>机器学习落地需攻破的9个难题 The Next Step for Machine Learning</title>
      <link>https://kuhung.me/2019/the-next-step-for-machine-learning/</link>
      <pubDate>Sun, 24 Feb 2019 23:31:58 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/the-next-step-for-machine-learning/</guid>
      <description>机器学习在前两年的时间里，一下子就爆火了起来。很多公司也跟着这个趋势，招募了很多算法工程师、数据挖掘工程师。但是，在实践中，企业发现要落地，实际上还有很多问题需解决。以至于在大部分项目，还是规则主导。算法工程师的日常，也不过是清洗数据，调整规则。所以，机器学习技术，在真实的应用中到底缺少些什么呢？
在国立台湾大学《机器学习》2019春季班，李宏毅老师给出了他的观察。以下的内容，结合李老师的最新讲义、加上我本身工作的理解，给大家梳理机器学习落地急需解决的9个难题。
拒绝回答与可解释性（哲学层面） 1. Anomaly Detection 机器能不能知道“我不知道” 机器能不能知道自己的识别范围，还是说生硬地给出模型内的东西，或者说抛出无法识别。在猫狗分类里，现有的模型已经到达很高的精度，甚至能给出猫狗的品种。
但是正式上线后，用户真的会乖乖给到猫狗的图片吗？如果用户丢一张妹子图，机器能够知道自己不知道吗？目前这个领域的研究叫做 Anomaly Detection。知道自己不知道，对于一些异常的情况，十分重要。
2. Explainable AI 说出为什么“我知道” 神马汉斯的故事：
18世纪德国，一匹名叫汉斯的马成为当地网红。他能够计算简单的算术题，并用蹄子敲出正确回答。这在当时一度引起轰动。后来，有人做了个实验，把汉斯和周围的人完全隔绝，这匹马就完全蒙圈了。时事证明，这匹马的神奇能力不在于他的算数能力，而在于他的观察能力。当给到正确答案时，周围的人会有不一样的反应，汉斯也就随即停止敲马蹄。
机器学习的成果，是否同汉斯一样，通过一些意想不到的渠道，获得的答案。在 GCPR 2017 Tutorial 的研究中，研究者通过注意力机制，研究机器判断的依据。
实验者测试了两个模型，两个模型均为马匹识别。DNN 模型的焦点集中在马匹身上，是一个正常的模型。但 FV 的交点却集中在图片左下角。原来，图片的左下角有图片的出处，所有的包含马匹的图都有这个标记。所以，FV 模型学到的重点在于这些标记。同样的表现，却是不一样的判断依据。显然，FV 模型的判断依据是滑稽和不可靠的。
我们需要一些技术，让 AI 不仅给出结果，同时要给出判断的依据。即：模型的可解释性。
抵御恶意攻击 3. 防止 Adversarial Attack 人有错觉，机器是否也会有错觉。我们来做一个认知实验。以下两个圈圈，哪个的颜色更深？好，记住你的答案。结果将在稍后揭晓。
对于机器，有研究表明，通过改变图像中的个别像素，可以起到迷惑机器的作用。改变一个像素，就可以让模型的判断结果从熊猫到长臂猿。该技术名叫 Adversarial Attack。
这样的技术相当危险。举个例子，当自动驾驶的车辆行驶在路上时，可能路边的人挥舞下旗子，机器的判断就会被干扰，做出不当的举动。
回到开头的例子，正确答案是左边。这其实是一个计中计。你以为这是视觉认知实验，其实这也是某种形式的“心理攻击”。 学习模式 4. Life-long learning 终身学习 终身学习是一个人类行为的概念。活到老学到老，大家都知道只有不断更新自己的知识，才能跟上社会发展的步伐。同时呢，先前学到的东西，对后面的学习仍有帮助。举个例子：学完线性代数之后，对学习和理解机器学习就大有帮助。
但是，机器不一样。今天的我们，一般只让一个模型学习一个任务。但这样会存在一些问题。首先是随着建模的增多，模型数量将无限增长。其次，模型之前学到的技能，对之后的学习没有帮助。就像 Alphastar 它玩星际争霸很棒，但让他同时学下围棋，目前来说是不行的。它和 Alphazero 是两个不同的模型 。
那么，自然而然的，我们就会抛出这样一个疑问，机器能否终身学习呢？这里的相关研究，提个关键词 Catastrophic Forgetting 。
5. Meta-learning / Learn to learn 学习如何学习 现有的机器学习模型设计，都遵循着这样一个范式——在特定领域人工设计一套算法，让机器去学习。我们就想，能不能设计一套算法，让机器自己去设计自己的学习算法呢？
这样的范式，我们称之为 meta-learning 元学习，或者叫 learn to learn，学习如何学习。</description>
    </item>
    
    <item>
      <title>中文语料的 Bert 微调 Bert Chinese Finetune </title>
      <link>https://kuhung.me/2019/bert-chinese-finetune/</link>
      <pubDate>Sun, 17 Feb 2019 11:30:26 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/bert-chinese-finetune/</guid>
      <description>Finetune Bert for Chinese NLP 问题被证明同图像一样，可以通过 finetune 在垂直领域取得效果的提升。Bert 模型本身极其依赖计算资源，从 0 训练对大多数开发者都是难以想象的事。在节省资源避免重头开始训练的同时，为更好的拟合垂直领域的语料，我们有了 finetune 的动机。
Bert 的文档本身对 finetune 进行了较为详细的描述，但对于不熟悉官方标准数据集的工程师来说，有一定的上手难度。随着 Bert as service 代码的开源，使用 Bert 分类或阅读理解的副产物&amp;ndash;词空间，成为一个更具实用价值的方向。
因而，此文档着重以一个例子，梳理 finetune 垂直语料，获得微调后的模型 这一过程。Bert 原理或 Bert as service 还请移步官方文档。
依赖 python==3.6 tensorflow&amp;gt;=1.11.0 预训练模型 下载 BERT-Base, Chinese: Chinese Simplified and Traditional, 12-layer, 768-hidden, 12-heads, 110M parameters 数据准备 train.tsv 训练集 dev.tsv 验证集 数据格式 第一列为 label，第二列为具体内容，tab 分隔。因模型本身在字符级别做处理，因而无需分词。
fashion	衬衫和它一起穿,让你减龄十岁!越活越年轻!太美了!... houseliving	95㎡简约美式小三居,过精美别致、悠然自得的小日子! 屋主的客... game	赛季末用他们两天上一段，7.20最强LOL上分英雄推荐！ 各位小伙... 样例数据位置：data
数据格式取决于业务场景，后面也可根据格式调整代码里的数据导入方式。
操作 git clone https://github.</description>
    </item>
    
    <item>
      <title>What is Data Mining 什么是数据挖掘</title>
      <link>https://kuhung.me/2019/what-is-data-mining/</link>
      <pubDate>Sun, 17 Feb 2019 00:40:20 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/what-is-data-mining/</guid>
      <description> 一、数据挖掘的定义 什么是数据挖掘？ 数据挖掘是一个用数据发现问题、解决问题的学科。 通常通过对数据的探索、处理、分析或建模实现。 数据挖掘学习路线 大学里并没有数据挖掘这么一个专业，现有的数据挖掘工程师大都来自工科或统计学等专业。 目前的数据挖掘工程师大都来自不同背景，计算机科学、数学甚至是机械工程。要想成功胜任，其诀窍是热情、好奇心，不断学习新的工具的能力，以及对数据清洗和分析的耐心。 给新人的建议 最重要的三个品质：好奇心、是非观以及批判性思考。这三个品质，放在其他领域同样适用。 专业领域的三种能力：编程能力、统计基础、商业思维。编程和统计在大学较为容易学到，商业思维需要多实践总结。 二、数据挖掘在做什么 数据挖掘工程师的一天 检查日常报表数据是否异常，寻求数据波动的合理解释。 针对新业务，设计指标，搭建数据模型。 搭建商品推荐系统、价格预测系统、文本分类系统或是聊天机器人。 数据挖掘的算法 使用复杂的机器学习算法并不能保证效果。一般来讲，最好的解决办法，通常很简单。 生产环境使用简单的算法，并不意味着要放弃前沿算法。每一套新的方法，其目的都在解决前面的薄弱之处。 数据挖掘与服务器 本地 PC 由于硬件与系统限制，工程师常在服务器进行大规模数据的运算、脚本部署与接口部署。 三、商业中的数据挖掘 作为公司，该如何开展数据挖掘 评估可能的收益与需要的投入 开始收集数据 招募数据挖掘团队 招聘数据挖掘团队 好奇心应该是数据挖掘从业者的最重要品质。 招聘时，应确保候选人对工作内容感兴趣。 候选人应具备一定的成果意识。商业更重成果，而不是过程。 数据挖掘应用 广告位点击预估 信用卡风控评估 用户流失干预 四、数据挖掘工具 数据挖掘工具与大数据 掌握以下工具：Python、Linux、Pandas 及 Jupyter、关系型和非关系型数据库。 大数据通常指传统数据系统无法处理的数据。体量和增速都相当大。处理工具以 Hadoop 为代表。 五、数据挖掘进阶 神经网络和深度学习 神经网络出现已数十年，但由于条件限制，这一方向搁置了数十年。目前随着新的优化方法的出现和算力的提升，这一方向的工业化逐渐成为可能。 如何更上一层楼 掌握基本的编程知识，更多地去理解背后的原理。 流程化意识，及时复盘总结，规范流程（复用）。 成果导向，将知识转化为行动和成果，给他人带来价值，服务更多人。 </description>
    </item>
    
    <item>
      <title>12306Bypass Server 抢票神器&#43;微信提醒</title>
      <link>https://kuhung.me/2019/12306bypass-server/</link>
      <pubDate>Sat, 26 Jan 2019 15:52:08 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/12306bypass-server/</guid>
      <description>前言 春节假期临近，车票一度紧张。某行、某团开了加速包后，仍然无法第一时间刷到目的地的票。稍微有点儿技术底子的我们岂能坐以待毙，自然是要自己动手，丰衣足食。
网上有各类开源的工具包，这里不做过多点评。之前在好友圈内传得比较靠谱的是 12306Bypass，又叫分流。分流是一个 Windows 应用，工作在 PC 端。其核心功能完全免费，更更重要的是，它的监控刷新在本地可以真实的感知。
以前在学校还好，可以守在电脑面前。但工作后，由于各种原因，无法第一时间获取分流的抢票信息，因而白白错过好几次下单付钱的机会。于是我们就有了这样一个愿望，希望能将分流的信息第一时间转发。
前几日逛某论坛，有人向分流开发者传达了增加 Server 酱的请求。开发者还是很给力，在最近的几次版本迭代中实现了该功能。简单的来说，Server 酱就是一个提醒服务。在这里，我们把它用在抢票软件中。当软件抢到票时，通过该服务，给到微信提醒。通知我们及时付款。
通过这样的形式，即可在微信端第一时间收到下订单的信息。那么如何配置这样的一个服务呢？我们只需要以下步骤。
​
准备工作 最新版本的分流软件 搜索关键词：12306Bypass 这里使用的版本号是1.13.30。 没用过？下载链接 Github 账号 这里用做 Server 酱的登陆认证 不知道？注册链接 实操阶段 Server 酱 用于获取认证的接口
登入：用GitHub账号 登入网站，获取SCKEY（在「发送消息」页面） 绑定：点击「微信推送」，扫码关注同时即完成绑定 记住 SCKEY ，我们接下来会用着。
分流 启动分流，按正常流程配置票务信息。
点选主界面左下角的推送
填入以下信息
通知地址 `https://sc.ftqq.com/[SCKEY].send 通知参数 text=#bypass# 点击测试发送，即可在微信端，收到本文一开始的推送测试提醒啦
实际效果 就在配置完成不久后，分流帮我抢到了回家的车票。同时在微信端，Server 酱强制推送。
总结 通过这样的一番配置，我们终于能够安稳的玩耍手机，而不用担心错过订单付款时间。事实上，分流本身的基础功能，也自带了一些提醒服务。但是他们大多较为繁琐。以 QQ 提醒为例，有被顶掉下线的风险。自带的微信提醒，模拟的微信桌面登陆，理论上需要2个微信号。按照上面的操作，我们只需要简单的配置，即可实现强制推送，错过的几率大大减小。
这样的推送服务，其应用场景不局限于此。这也是我琢磨它的原因之一——应用场景广泛。只要需要推送的地方，都可以嵌入这样一套服务。例如网站新增评论、或是按秒计费的服务器上模型训练结束等等。
Server 酱实现的功能有限，仅针对微信推送。但这也是它针对国内业务的一种优化。类似这样的推送服务很多，国外的 Slack 功能组件也很丰富。在一些涉及敏感信息的领域，构建一套自己的推送服务，也是不错的主意。</description>
    </item>
    
    <item>
      <title>速查表 | Linear Algebra and Calculus 线代与微积分</title>
      <link>https://kuhung.me/2018/algebra-calculus/</link>
      <pubDate>Thu, 18 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kuhung.me/2018/algebra-calculus/</guid>
      <description></description>
    </item>
    
    <item>
      <title>速查表 | Probabilities Statistics 数理统计</title>
      <link>https://kuhung.me/2018/probabilities-statistics/</link>
      <pubDate>Thu, 18 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kuhung.me/2018/probabilities-statistics/</guid>
      <description></description>
    </item>
    
    <item>
      <title>为啥说数据这行不容易 Why is Data Hard </title>
      <link>https://kuhung.me/2018/why-is-data-hard/</link>
      <pubDate>Fri, 30 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kuhung.me/2018/why-is-data-hard/</guid>
      <description>原文链接 Slack 工程师 : why-is-data-hard?
做数据挖掘时，常常需要考虑很多方面。其中一个方面，常常会涉及到跨功能，复杂且琐碎的一些事项。数据准备以及评价指标的制定，就是这些事项之一。
等等，似乎干数据这一行，并不容易？
当大多数的组织谈到数据时，他们想的其实是指标——能反应近期业务、或是能够提供数据驱动的决策、抑或是能够监测企业经营状况的指标。
按上面的说法，我们应该能够招聘到聪明且能干的分析师，做出酷炫的可视化仪表盘，并马上投入使用。
“Every second of every day, our senses bring in way [more] data than we can possibly process in our brains.”&amp;ndash; Peter Diamandis, Founder of the X-Prize
拥有大量的数据并不会立马产生价值。当你是在数据增长快如 Slack 这样的公司处理数据时，不仅怎样驾驭数据和指标极其重要且困难的，更困难的是你像是在 “building the plane as it is flying”。
数据金字塔：评价指标（metrics）最为重要 数据金子塔大致可以分为4个级别。每一个级别都高度依赖下一级。
见解/洞察（Insights） 大部分的老板和公司董事关心的是这一层。见解（Insights）是我们所讲的关于数据的故事，即什么驱动了商业，或者是有什么新的机会能够推动大量的增长。
在理想的世界中，有一个共享的、不断演进的关于业务性能的数据叙述。这种数据叙述在整个组织中传播，以建立对业务的共同理解。
探索以及工具 为了获得见解，我们需要雇佣很多人定期去探索数据。只有当有人在盯着数据的时候，才能有策划和故事!
在快速增长的业务中，最优的数据探索涉及到一些关键事物：
**数据探查的多样性。**要真正建立起，对正在发生的事情和重要的事情的理解和见解，我们需要每个人都拥有，对数据的关注和探索的主人翁意识。现实情况是，如果探索困难，只有管理员(分析师)能够完成这项工作。你要么雇佣更多的分析师来深入挖掘你的见解，或者，你可以找到简化数据访问的方法，让团队能够自行解决问题。Slack 的做法介于两者之间——我们不断寻找，在整个组织中增加自助数据服务的方法；同时也确保，我们有优秀的分析师参与到每一个核心功能来。
**频繁使用。**像所有良好习惯的养成一样，查看数据和指标的一致性，是建立对所期望东西见解的唯一方法，什么样的结果是出乎意料的，什么样的问题是需要分析数据的。分析师可以帮助挖掘趋势，有些趋势值得挖掘，而许多趋势则不然。如果老板经常查看数据，那么你的分析师就更有可能对他们的精力，进行最优配置。
**例子：**本周活跃用户增加了4%。这是好是坏？是预期的增长放缓?还是因为这周，我们推出了新产品，所以实际上我们希望的是，高于平时一周的增长?
分析师能够挖掘并做出各种比较，以帮助老板对数字进行说明。分析人士可以将该数字与往年做比较，深入了解这些新要素的组成，以及他们来自哪里。也许4%符合你的期望。但事实上，它比平时要低，我们没有推出任何新产品，且处于一个缓增长放缓期。这就是您希望董事会和分析人员构建的见解。你不会希望在某些事情上耗费精力，这些事情并不会带来业务的增长，或者改变我们的决策。
**发现能力与数据探索。**数据探索不同于在仪表盘上点来点去，这是我想在这里指出的。仪表盘是用一组具体的需求创建的，通常在特定的粒度级别上报告指标或世界的某些视图。数据探索是一种能力，即通过各种不同的特征结合来调查指标，以确定在固定的仪表盘中不会立即出现的趋势或机会。可以将其考虑为，能够对数据进行转换和筛选，从而向监控之外的数据提出问题的能力。看到活跃用户的激增吗？太棒了！也许我们需要探究这在所有国家都这样，还是仅仅出现在英国。那周我们是否发起了一项针对英国的营销行动？销售团队是不是在那周完成了一个大单子? 企业主离数据越近，他们就越有能力着手进行自助服务的探索，就能发现更快捷、更有效的关键见解。这是因为，他们更有能力将我们在业务中所做的事情，与我们在数据中可能表现的特点结合起来。反之亦然！那些从商业伙伴那里拥有大量业务背景的分析人士，可以更快地找到正确的见解，而不是身陷各种假设之中。对于一个快速成长的组织来说，你可能希望两者都存在于你的组织中，这样每个人都能带着主人翁意识，理解我们最大的机遇和存在的差距。
指标和维度 在探索和工具层面，有很多数据驱动的决策。但我们在 Slack 发现，如果数据不容易理解、不清晰或是不可信，即使工具各种各样，也无法进行更广泛的数据挖掘。这是为什么，一致性、被充分理解的、明确定义的指标和维度是如此重要。
由于各种原因，数据可能不可信；或是不可获得（没有权限）；也可能数据是错误的（数据丢失或是跟踪出了问题）；再或者是不清楚数据代表什么以及如何使用它。在这种情况下，数据本身的完整性就不那么重要了。更需要关心的是，数据使用者在能够进行挖掘之前，需要花多少时间来检查和测试他们的工作。
**例子：**在 Slack 公司，我们有两种不同的地理定位方式。如果你想了解用户数据，了解我们的国际活动和产品发布是如何进行的，或者寻找更多的机会让我们的业绩更上一层楼，那么地理位置是很重要的。
我们的地理定义有两种：一由团队和用户的IP地址（他们使用 Slack 的地址），二是由团队的账单地址（通常是公司总部）来定义的。</description>
    </item>
    
    <item>
      <title>一场 kaggle 比赛总结出的时间序列处理技巧 time series problem summary </title>
      <link>https://kuhung.me/2018/time-series-problem-summary/</link>
      <pubDate>Thu, 08 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kuhung.me/2018/time-series-problem-summary/</guid>
      <description>Source https://www.kaggle.com/c/recruit-restaurant-visitor-forecasting/discussion
总结一：保证数据同分布 验证集的选取，分布上应尽量靠近测试集。
方式一:：对抗验证集的生成。 方式二： 就近选取相同天数。 方式三:：类比属性。如本赛题 &amp;ldquo;golden week&amp;rdquo; 与 &amp;ldquo;new year&amp;rdquo; 类比，选取 &amp;ldquo;new year&amp;rdquo; 段作为验证集。 tips: kfold 用在时间序列上不合适，会有数据泄露风险。正确的方法应是滑窗。
总结二：异常值特殊处理 一些特殊的时间节点（或者说是异常值），应该予以特殊考虑。比如本次比赛中的 &amp;ldquo;golden week&amp;rdquo;.。需要对其进行变换，而不是直接依靠模型的预测结果。
方式一:：等同法 The rules:
Treat holiday as Saturday
If the day before holiday is weekday ,treat the day before holiday as Friday If the day after holiday is weekday ,treat the day after holiday as Monday it work not only golden week but also a lot other holidays.</description>
    </item>
    
    <item>
      <title>Single Shot MultiBox Detector Keras version</title>
      <link>https://kuhung.me/2017/ssd/</link>
      <pubDate>Fri, 08 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kuhung.me/2017/ssd/</guid>
      <description>SSD目标检测Keras版 SSD是一种Object Detection方法。本文是基于论文SSD: Single Shot MultiBox Detector，实现的keras版本。
该文章在既保证速度，又要保证精度的情况下，提出了SSD物体检测模型，与现在流行的检测模型一样，将检测过程整个成一个single deep neural network。便于训练与优化，同时提高检测速度。 SSD将输出一系列离散化（discretization）的bounding boxes，这些bounding boxes是在不同层次（layers）上的feature maps上生成的，并且有着不同的aspect ratio。
模型效果 模型对载具的检测 模型对动物的检测 模型的视频检测 如何使用 项目地址kuhung/SSD_keras
所需依赖 cv2==3.3.0 keras==1.2.2 matplotlib==2.1.0 tensorflow==1.3.0 numpy==1.13.3 如果想跑通视频模块，则需额外pip install scikit-video
具体操作 git clone git@github.com:kuhung/SSD_keras.git cd SSD_keras Download model weight weights_SSD300.hdf5here cp weights_SSD300.hdf5 into SSD_keras 对于图片的检测 参考SSD.ipynb
若要剪切图片为下一步处理做准备 参考SSD_crop.py
检测视频 cd video_utils python videotest_example.py hy.mp4 参考资料
SSD: Single Shot MultiBox Detector
论文阅读：SSD: Single Shot MultiBox Detector
rykov8/ssd_keras</description>
    </item>
    
    <item>
      <title>yysGAN 生成对抗网络，在游戏角色生成中的尝试</title>
      <link>https://kuhung.me/2017/yysgan/</link>
      <pubDate>Tue, 21 Nov 2017 09:02:35 +0800</pubDate>
      
      <guid>https://kuhung.me/2017/yysgan/</guid>
      <description>使用GAN生成新的游戏角色 摘要 Generative Adversarial Networks（简称GAN），中文名叫生成对抗网络。我们将使用它，来生成新的阴阳师角色。 依赖 （pip install） cv2 tensorflow( &amp;gt;=1.0) scipy numpy 使用方法 cd yysGAN python yysGAN.py 5000次迭代训练结果 了解更多GAN的知识 Generative Adversarial Networks.ipynb
参考资料 Siraj Raval moxiegushi/pokeGAN 项目地址 https://github.com/kuhung/yysGAN
定制你的GAN图片生成器 # 拆包即用，修改input下文件，改为对应的jpg素材即可。 </description>
    </item>
    
    <item>
      <title>Cats VS. Dogs 图像分类之猫狗大战</title>
      <link>https://kuhung.me/2016/%E7%8C%AB%E7%8B%97%E5%A4%A7%E6%88%98/</link>
      <pubDate>Wed, 06 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kuhung.me/2016/%E7%8C%AB%E7%8B%97%E5%A4%A7%E6%88%98/</guid>
      <description>我是参加DataCastle猫狗大战的选手，kuhung。在测评中，我提交的数据集最后评分0.98639。以下是我的备战过程及心得体会。（最后有完整代码及较全面的注释）
个人介绍 华中科技大学机械学院的大二（准大三）学生，接触数据挖掘快有一年了。早期在学生团队做过一些D3数据可视化方面的工作，今年上半年开始数据挖掘实践。想把这个爱好发展成事业。做过阿里的天池竞赛，也有在kaggle混迹。算个数据新手，但一直不承认：你是新人，所以成绩不好看没啥关系。
初识比赛 第一次接触数据集，就感觉有些难度。因为以前没做过图片分类的比赛，更没想过要用深度学习的神经网络进行识别。思索一番，还是觉得特征提取后，使用决策树靠谱。自己也下去找过资料，发现并不容易实现。期间，还曾一度想过肉眼识别。但打开文件，看到那1400+图片，就觉得这时间花在肉眼识别上不值。中间一度消停。
初见曙光——yinjh战队分享 后来上论坛逛过几次。一次偶然的机会，让我看到了yinjh团队分享的vgg16模型。乍一看，代码简单、效果不错。更为重要的是，这个模型自己以前从未见过。于是抱着验证学习的态度，我把代码扣了下来，打算自己照着做一遍。
过程艰难 一开始，我就把一屏的代码放进了我的jupyter notebook中，一步一步试水。很明显，我的很多依赖包都没安装，所以也是错误不断。早先是在Windows系统下，使用python2.7，需要什么包，就安装什么包。在安装keras过程中，我发现了Anaconda——很好用的一个科学计算环境，集成了各种数据挖掘包。即使是这样，仍然是满屏的错误，亟待排查。
步步优化 离比赛截止就还只有几天，一边准备期末考试，一边焦急地排查bug。Windows系统下仍有个别难以解决的错误，我索性切换到了做NAO机器人时装的Ubuntu系统下。结合keras给的官方文档，我对原代码进行了函数拆分解耦，又在循环体部分增加了异常检测。综合考虑性能，稍微修改了循环结构。下载好训练的vgg16_weights，在没有错误之后，焦急地等待25分钟后，屏幕开始打印结果。
欣喜万分 第一次提交，随便截取了前面一段，没成绩。折腾了几次，才发现是提交的格式出了问题。后面取p=0.99+部分，提交结果在0.58左右，数据集大概有90个。估计了下，狗狗总数应该在180左右。第二次提交，取了180左右，结果0.97多一点。第三次，也是最后一次提交，取了result前189个，结果0.98639，一举升到第一。
比赛总结 这次比赛，首先还得感谢yinjh团队的yin前辈。如果没有您分享的代码，就不会有我今天的成绩。感谢您分享的代码，感想您在我写这篇分享时提供的代码指导。 我是新手，但我一直不觉得成绩低是理所当。立志从事这一行，就需要快速地学习、快速地成长。新人，也需要做到最好。当然，自己目前还存在很多问题。一些基本的概念只是模糊掌握，需要更多的实践，需要更多的理论积淀，而不是简单地做一个调包侠。
给新手的建议 善用搜索引擎，多读官方文档，不要一开始就依赖Google。 Google Groups、Stack Overflow、GitHub是好东西。 干！就是干！ 完整代码 以下操作均在Ubuntu14.04+Anaconda中进行 导入python标准包 import os # 处理字符串路径 import glob # 用于查找文件 导入相关库 keras
keras是基于Theano的深度学习(Deep Learning)框架
详细信息请见keras官方文档
安装过程 conda update conda
conda update &amp;ndash;all
conda install mingw libpython
pip install git+git://github.com/Theano/Theano.git
pip install git+git://github.com/fchollet/keras.git
cv2
OpenCV库
conda isntall opnecv
numpy
Anaconda自带
from keras.models import Sequential from keras.layers.core import Flatten, Dense, Dropout from keras.</description>
    </item>
    
    <item>
      <title>高效能人士的7个习惯</title>
      <link>https://kuhung.me/2016/%E9%AB%98%E6%95%88%E8%83%BD%E4%BA%BA%E5%A3%AB%E7%9A%847%E4%B8%AA%E4%B9%A0%E6%83%AF/</link>
      <pubDate>Sun, 10 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kuhung.me/2016/%E9%AB%98%E6%95%88%E8%83%BD%E4%BA%BA%E5%A3%AB%E7%9A%847%E4%B8%AA%E4%B9%A0%E6%83%AF/</guid>
      <description>第一部分：认识自我 一切探索的尽头，就是重回起点。——艾略特
以原则为中心的思维 公平的原则 诚实与善良 以原则为中心，以品德为基础 由内而外强调，先追求个人的成功，才能有人际关系的成就;先信守对自己的承诺，才能信守对他人的承诺。 七个习惯&amp;ndash;大纲 习惯一：积极主动（BE PROACTIVE) 习惯二：以终为始(BEGIN WITH THE END IN MIND) 习惯三：要事第一(PUT FIRST THINGS FIRST) 习惯四：双赢思维(THINK WIN) 习惯五：知彼解己(SEEK FIRST TOUNDERSTAND,THEN TOBE UNDERSTOOD) 习惯六：统合综效(SYNERGIZE) 习惯七：不断更新(SHARPEN THE SAW) 第二部分：个人的成功：从依赖到独立 习惯一：积极主动 三种决定论 基因决定论 心理决定论 环境决定论 人类的四种天赋 选择的自由(freedom to choose) 想象力(imagination) 良知(conscience) 独立意志(independent conscience) 积极主动是人类的天性
积极主动与积极思考不同。积极主动不仅承认现实，也肯定人有权选择对现实环境做出积极回应。
人生的三种价值 经验价值 创造价值 态度价值 言语态度对照表 消极被动 我已无能为力 我就是这样一个人 他是我怒不可遏 积极主动 试试看有没有其他可能性 我可以选择不同的作风 我可以控制自己的情绪 关注圈与影响圈 在关注圈中把个人可以控制的圈起来，形成&amp;quot;影响圈&amp;quot;。 习惯二：以终为始 | 自我领导的原则 在做任何事之前，都得认清方向。（该方向由个人最重要的期许或价值观来决定）
自我领导
管理是正确地做事，领导则是做正确的事。
四个方向：安全感、人生方向、智慧、力量
以原则为中心的特征： 这是主动而非被动的决定 这是经过通盘考虑所得的结论，不是一时冲动 习惯三：要事第一 | 自我管理的原则 四代时间管理理论的演进 重视那些重要但不紧急的事</description>
    </item>
    
    <item>
      <title>产品实践之应用沉淀</title>
      <link>https://kuhung.me/1970/web_deploy/</link>
      <pubDate>Thu, 01 Jan 1970 23:44:32 +0800</pubDate>
      
      <guid>https://kuhung.me/1970/web_deploy/</guid>
      <description> 项目地址 简介 相关资料 参考 以图搜图 上传图片，检索图库内容，返回最相似图片 自制以图搜图引擎 matsui528/sis Flask补充系列–将应用部署在Heroku上 spam 文本检测 输入英文文本，检测是否为垃圾营销内容 机器学习建模与部署&amp;ndash;以垃圾消息识别为例 kuhung/flask_vue_MLsingle-page-apps-with-vue-js-and-flask-deployment 机器学习系统设计测试题 高级软件工程师需要掌握系统设计，高级机器学习从业者同样如此 机器学习系统设计原则 10个机器学习系统设计案例chiphuyen/machine-learning-systems-design </description>
    </item>
    
  </channel>
</rss>
