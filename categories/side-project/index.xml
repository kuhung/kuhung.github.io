<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Side Project on 谷粒的博客</title>
    <link>https://kuhung.me/categories/side-project/</link>
    <description>Recent content in Side Project on 谷粒的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 23 Nov 2021 15:56:41 +0800</lastBuildDate><atom:link href="https://kuhung.me/categories/side-project/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>技术领导｜03 techlead 想象、现实与路线抉择</title>
      <link>https://kuhung.me/2021/techlead-vol-3/</link>
      <pubDate>Tue, 23 Nov 2021 15:56:41 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/techlead-vol-3/</guid>
      <description>🌟 合集地址：《The Manager&amp;rsquo;s Path》中文翻译 注：没有特别声明，文中的“我”都指原作者 Camille Fournier
抉择：留在技术路线还是成为经理（管理路线） 成为经理还是留在技术路线是一个艰难的决定。这完全取决于你所处的环境，我不可能告诉你该怎么做。然而，作为一个憧憬并经历过这两条路线的人，我可以透露下我所幻想的、以及真实所见的。需要注意的是，这些只是为了表述方便进行的脸谱化描述，现实不完全相同。
高级技术路线的想象生活 你的每一天都在深度思考中度过，与其他高级开发人员一起，解决那些有趣、新颖的智力难题。这是软件开发，所以你知道会有一些繁琐的小事。你有很大的权力来选择你的工作，进而可以选择最有趣的部分。你喜欢编写代码、修复bug、让代码运行得更快、让计算机做新的事情，并且你可以把大部分时间花在这上面。
由于你的资历，经理会在开发开始之前询问你关于开发的建议。你知道正在发生的一切，但又不需要处理人事问题。你被邀请参加正确的会议，在那里做出重要的决定，而且没有影响到你的正常工作。大部分初级开发人员会尊重你、并相信你的每一句话，接受你的反馈，且没有过多地占用你的思考时间。
你的上升轨迹永远不会放缓，你总是可以解决新的、大的问题来向组织展示你的价值。你工作很努力，很少被要求加班或周末工作。当你工作到很晚时，那是因为你专注于工作，迫不及待想完成手头的功能或修复刚刚发现的错误。
你可以写书、发表演讲并发布开源作品——如果有一些运气和坚持，你会赢得一些行业名声。在你表达时，没有人关心你有点尴尬或害羞，也没人期望你改变自己的沟通方式。你说的话很重要。你所在组织中的每个人都知道你是谁，了解你工作的价值，并尊重你的意见。
简而言之，你在投入的工作、名望和积累的专业知识之间取得了完美的平衡，这使你成为无价的、受人尊敬的、高薪和有影响力的技术大牛。
高级技术路线的真实生活 当你处于正确的项目，以及项目的正确生命周期阶段时，你的生活就很棒。虽然面临挑战，但可以学习新事物。你对日常工作有很大的控制权，而且会议的次数肯定比管理同行要少，但你的日子并不总是在幸福的状态中度过。
每个项目都有一个阶段，你需要将想法推销给其他人，试图说服他们这是正确的方法。可能你已经实现了这个系统，但现在你需要让其他团队开始使用它。你花上好几天时间，向他们展示来龙去脉，解释它为什么有用，试图说服他们、游说他们的经理采用它。
你的上升轨迹并不像你希望的那样快速和容易。事实上，它非常缓慢。那些证明你是一位无价开发者的大项目很难找到。团队不需要新的编程语言、新的数据库或新的 Web 框架。你的经理不擅长给你布置向整个组织展示你才能的重要任务；他希望你告诉他这些机会在哪里。
发现好的项目似乎是运气问题。选择糟糕的项目，尽管你尽了最大努力，但仍会花费数月甚至数年的时间来完成一些可能会被取消的项目。你有点嫉妒你的管理朋友，他们在不断壮大团队的同时，似乎升职迅速。
与其他开发者的关系也是不好不坏。你是个不错的人，所以他们中的一些人钦佩你并听取你的意见，但其他人似乎嫉妒你的影响力。初级开发人员要么想占用你大片时间，要么出于某种原因害怕你。“谁来领导大型的、有趣的项目？”在这个问题上，同辈之间存在竞争。
你的经理也是麻烦的来源。他并不支持你开源系统的愿望，即使你认为这提供了行业需要的新思路，将为行业带来转折和变革。他建议如果你想发表演讲或写书，应该花费个人时间。他会寻求你对技术问题的反馈，但有时会忘记告诉你计划有变，直到你已花费大量心思。
你怀疑你错过了重要信息，因为你没有出席该参加的会议。但每次他邀请你参加这些会议时，你都会想起他们是多么无聊和低效，以及你有多少宝贵的专注时间被浪费。他对你希望摆脱繁琐工作的期望（如回复电子邮件、面试或及时回复代码审查）并不上心。
尽管如此，你大部分时间都可以构建软件。你可以将时间花在技术问题、系统设计和工程问题上，而不必与人打交道或坐在无聊的会议上。你通常可以选择你的项目，如果你想尝试些新的东西，可以较为容易地更换团队。你刚刚发现你的薪水比你的经理高！所以，生活并不全是坏事。
管理路线的想象生活 你有一个团队，你有控制权，你有决定权，你可以让别人按照你的方式做事。你的团队尊重你，并乐于在所有事务上服从于你的权威。你认为他们应该写更多的测试吗？你告诉他们，“写更多的测试”，他们就做到了！你想确保每个人都得到公平对待，无论他们的性别、种族。为了确保实现这个目标，你解雇任何有越界行为，或为团队其他成员创造不健康环境的人。
因为你的出发点是好的，成员知道即使他们不认同你，你做的事情也是为了他们好。他们为你解答疑惑，在你一团糟或希望收到反馈时，以公开的方式为你提供反馈。与人打交道压力重重。他们知道你关心他们，所以这项工作的回报也不少。你处于教练的位置，且很快会看到教练技巧发挥了作用。
当你看到另一位经理做错了事时，你可以自由地向他提出建议，就像与另一位需要系统设计帮助的工程师交谈一样。其他经理总是很乐意听你的想法。他们看到你让团队工作的效率提升，你关心组织健康的关心程度，也关心让每个人都变得更好的因素。
你的经理给了你很多指导，但很少介入告诉你该怎么做。当你准备好接收一个更大的团队时，你的经理愿意给你更多的人并扩大你的团队。他给你的目标很明确，很少改变。即使你有很多责任，你仍然有一些时间写博客文章和演讲。这是值得鼓励的，因为它会帮助你的团队招聘并提高你在科技行业的地位。
简而言之，你可以做出关键决定，你创造文化，你的效率对你周围的人都是有目共睹的。你的晋升之路更快，你的职业生涯令人兴奋和有利可图。
管理路线的真实生活 你有一个团队。你有一定的控制权，但你很快发现让人们做某事比口头说说难多了。你似乎已经放弃了对自己日常生活的所有控制。大多数情况下，你整日都在开会。
当你只有一个小团队时，你能够平衡时间且仍编写代码，但随着团队的发展，你已经几乎不写代码了。你知道该写代码，但你没有时间。专注于编写大型系统代码似乎已经成为记忆。
你可以做出决定——一些决定。实际上，你也许可以缩小将要决定的事情的范围。你可以让你的团队专注于一些事情，比如编写更好的测试，但他们仍然有一个产品路线图要实施。他们对应该优先做哪些任务有自己的想法。你不仅仅是自己做决定，还需要引导团队的决策方向。
你的经理给你目标，但有时会突然改变这些目标，你需要向团队解释这些变化。你为团队设定了文化榜样，这有好有坏。当他们学到了你好的方面是值得开心的，但团队有时也会放大你的缺点。你的团队自然不会只是同意、尊重和喜欢你。权威不仅仅靠一个头衔赋予。
当项目进展不顺利时，你会发现自己得想尽办法激励他们。他们中的一些人不开心的时候是不会告诉你的，直到他们厌倦并且准备离职。
当公司发展顺利，你会收到很多金钱回报，有很多令人兴奋的项目可以开展，生活很棒。但当事情有压力的时候，你就会发现让人们开心的力量是多么的微不足道。
尽管如此，你仍然可以看到你的工作对他们中的一些人很重要。因为你的指导，他们更快乐、更成功。这些小小的确幸支持你度过艰难时期。
其他经理对你的反馈不感兴趣。事实上，当他们认为你在侵占他们的地盘时，他们会抵触你。
上级经理不同意你扩大的团队，并且无法真正解释原因；他的领导技巧还有很多不足之处。也许他只是担心你会超过他？他绝对不希望你把所有时间都花在演讲上。当你离开办公室太多时，他会生气，无论团队可能从中获得什么价值。
在不损害同事或老板的情况下弄清楚如何领导比你预期的要棘手。但是，如果你能组建一个更大的团队，你知道你会得到晋升，所以至少你的道路是清晰的。当你发现为你工作的高级工程师比你赚得多时，你会心里不平衡。你想弄清楚如何快速组建更大的团队。
我最后的建议是：如果需要，你可以切换路线。人们在某个时候尝试管理，意识到不喜欢，然后回到技术路线是很常见的。每个角色都有优点和缺点，你可以自行感受自己最喜欢什么。
好经理、坏经理的区别：流程崇拜 流程崇拜者信奉：一个真正的流程如果正确实施并按设计遵循，将解决团队的所有问题。流程崇拜者可能会沉迷于敏捷、看板、Scrum、精益甚至瀑布方法。他们对 on-call 应该如何工作、如何进行代码审查、发布过程必须如何运作有非常明确的想法。他们往往非常有条理，对细节很满意，他们善于理解规则并准确地遵守它们。
流程崇拜者通常出现在测试、中台或项目管理小组中。他们在咨询机构和其他衡量过程来评判回报的地方也很常见。他们可以成为项目管理团队中非常有价值的成员，因为他们倾向于确保任务不被遗忘，并且一切都按照应有的方式进行。
当流程崇拜者没有意识到大多数人并不像他们那样擅长遵循流程时，他们会陷入矛盾。他们倾向于将所有问题都归咎于未能遵循流程，而不是承认灵活的必要性以及意外的必然性。他们通常专注于易于衡量的事物，例如在办公室工作的时间，而忽略了那些无法衡量的事物。
相信“合适的工具能解决一切问题”的工程师在成为技术主管时可能会变成流程崇拜者。他们寻找合适的工具来解决时间管理和优先级排序等所有问题。他们试图在寻找到好的流程前停止所有工作，或者不断在团队中推出新工具和流程。
与流程崇拜者相对的，不是完全放弃流程的管理者，而是理解流程必须满足团队和工作需要的人。具有讽刺意味的是，虽然“敏捷”通常以僵化的方式实施，但敏捷的原则是对健康的流程领导的一个很好的总结：
• 独立和互动胜过流程和工具 • 工作软件优于复杂文档 • 客户协作而非合同谈判 • 响应变化而非遵循计划
作为一名新的技术主管，要小心依靠流程来解决由于团队沟通或领导力差距而导致的问题。有时流程的改变是有帮助的，但它很少是灵丹妙药，没有两个伟大的团队在流程、工具或工作风格上看起来完全相同。
我的另一条建议是寻找自我调节过程。如果你发现自己扮演着任务主管的角色，与其批评那些违反规则或不遵守流程的人，倒不如看看流程本身是否可以改变得更容易遵循。扮演规则警察是在浪费你的时间。
作为流程崇拜者的经理，你需要帮助他更轻松地应对模棱两可。与许多经理所踩的坑一样，对流程的痴迷可能与对失败的恐惧和控制事物以防止意外发生的愿望有关。
如果你诚实并明确表示失败和不完美是安全的，那通常就足以让你的流程崇拜者放松一点并容忍模棱两可。防止流程崇拜者花大量时间寻找完美的工具或流程，尤其重要的是要确保他们不会因为未能遵循流程而惩罚他们的团队。
如何成为一名出色的技术主管 优秀的技术主管有许多特征，但下面这些是最重要的。
了解架构 如果你担任技术主管，但觉得自己没有完全理解所支持的架构，请花点时间了解它、学习它。了解它如何影响它所支持的产品，这些产品的核心逻辑在哪里。当你不了解你正在改变的架构时，几乎不可能很好地领导项目。
成为一名团队合作者 如果所有的有趣工作都是你在做，请停下来。看看那些棘手、无聊或烦人的领域，你是否可以解决这些问题。处理代码中繁杂的部分可以提供你很多关于流程哪里出错的信息。对于无聊或令人沮丧的项目，有经验的人花时间查看它们通常可以发现并修复一些明显的错误。</description>
    </item>
    
    <item>
      <title>技术领导｜03 techlead 与项目管理</title>
      <link>https://kuhung.me/2021/techlead-vol-2/</link>
      <pubDate>Sat, 13 Nov 2021 15:56:41 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/techlead-vol-2/</guid>
      <description>🌟 合集地址：《The Manager&amp;rsquo;s Path》中文翻译 注：没有特别声明，文中的“我”都指原作者 Camille Fournier
管理项目经历 回到我第一次担任技术负责人的时候，我的团队正在执行一项非常复杂的任务：分布式系统迁移。我们一个现成的系统在单机已经到达了它的理论极限。在倾尽所学优化它之后，我们决定是时候弄清楚如何在多台机器上运行它了。
这还是分布式系统萌芽的初期，当时大多数软件开发人员对构建它们的最佳实践知之甚少。但我们有一支优秀的聪明的团队，我们有信心解决这个问题。
我们确实搞定它了，虽然缓慢但毋庸置疑。我们花了很长时间思考、设计和拆分计算。当跨多台机器计算时，这个过程是非常重要的。然后有一天，我的老板迈克把我拉到他的办公室，告诉我：需要制定一个项目计划。
糟糕的体验 这是有史以来最糟糕的经历之一。
我不得不接受这项极其复杂的任务，并试图找出哪些任务依赖于其他任务。我不得不考虑各种依赖关系。我们如何让它在我们复杂的测试框架中运行，我们将如何部署它，我们什么时候采购硬件来测试它，集成测试需要多长时间？问题不断涌来。
我走进迈克的办公室，坐在他对面的大木桌旁。我们会讨论任务细节、时间节点和意外情况。他会帮我解决部分问题，然后把更多的工作分发给我。
这不是我喜欢做的事情。我必须克服不确定性和对犯错误的恐惧，对遗漏的恐惧，以便制定一个能够通过迈克的计划。接着又得进行一轮繁琐的工作，将其整理成某种容易理解的形式，我们可以呈现给领导团队，以便他们认可。
重要的学习经历 敏捷开发不是摆脱了对项目管理的需求吗？
不。敏捷开发是一种拆解工作的好方法，因为它迫使你专注于将任务分解成更小的块，规划这些更小的块，并以增量方式交付而不是一次性交付。
这并不意味着你无需了解如何进行项目管理。
你会有一些项目，无论出于何种原因都无法在一个迭代中完成，甚至无法在两个小迭代中完成。你需要为你的管理团队估算项目时长，并详细说明为什么你认为事情会花费那么长时间。
有一些项目，例如基础设施、平台或系统等，需要架构或重要的高层次规划。当面对这种包含许多未知数和相对严格的截止日期的项目时，你会发现它不太适合标准的敏捷流程。
随着你的职业发展，你需要了解如何分解复杂的工作。这些工作可能超出了你作为个人的能力范围。一个长期运行的、基于团队的项目的管理并不是那么有趣。
为什么项目管理很难 我想写代码并获得直接反馈，而不是考虑如何分解非常模糊的项目实施细节。
我担心我会被追究责任，并且我可能会在这个过程中错过一些重要的事情，这将使项目失败。
项目管理并不等同于每一项工作都被详细计划，它的作用在某些组织中被过度夸大。
我甚至不喜欢招聘项目经理，因为他们经常阻碍工程师，而非思考他们将要做的工作，并就他们在做什么以及为什么要做提出真正的问题。他们的存在意味着你有更多瀑布式项目而不是敏捷过程。
尽管如此，项目管理仍然必须进行，作为技术负责人，你应该在需要时进行管理，尤其是对于技术性很强的项目。
项目管理价值 归根结底，计划的价值不在于你完美地执行计划、事先抓住每一个细节，准确预测未来；而是在项目动手之前，深度思考项目：稍微看远一些，在你能预测和计划的地方找到参考系。计划本身并没有行动重要，无论结果表明计划是多么准确。
回到我的第一个项目管理。
项目是否按计划完美运行？当然不是。有bug、意料之外的延期以及我们没有注意的事情。然而，我们仍然接近约定的时间交付了该项目，并且没有通宵赶版本。
我们设法将这个复杂系统迁移到分布式系统，40名开发人员一起针对主代码分支进行了自己的分支更改。所有这一切都是可能的，因为我们有一支很棒的团队。我们制定了计划。我们已经考虑过成功是什么样子，并确定了一些可能导致失败的风险。
自从与迈克的那次令人沮丧的会议之后，我举行了一系列项目规划会议。我坐在迈克的位置上，而我对面是卡罗、艾丽西亚或蒂姆。他们每个人都感到了计划缺乏细节的挫败感。他们每个人都有去做一些令自己不舒服的工作，去思考那些不是代码、无法完美预测的事情。
由于这项工作，他们每个人都带领复杂的项目取得了成功，并且现在他们了解分解项目的真正含义，从而更有能力构建更大的系统和领导更大的团队。
花时间澄清 取得博士学位的最后一步是答辩。在这个阶段，作为博士候选人，经过多年的研究，你需要在所处领域的专家小组面前展示你的工作结果。他们将判断你的成果是否值得获得博士学位。
多年前，我有幸获得了美国最负盛名的应用数学方向的数学博士学位。小组中的一位评委是数值分析领域的著名数学家。在我（成功地）答辩之后，他对我说的话在我整个工作生涯中伴随着我。他说：“你的论文是我多年来读过的最清晰、最清晰的论文之一。谢谢！”
我当然很欣慰，但也对他的话感到非常惊讶。我原以为他是世界一流的数学家，他会“无所不知”，只用“观察”就知道我的论文质量如何。事实上，正如他所解释的，他能够做到这一点，只是因为我不厌其烦地解释了问题空间的基本思想以及我想法背后的动机。
我一直没有忘记这个教训。从那时起，在软件和大型组织工作多年后，我更加牢记了澄清的重要性。
软件工程中的澄清 我们认为我们的管理层“理解到了“我们作为技术人员所做的事情。只需“阅读代码，伙计！”。我们每天编写的软件对任何从事技术工作的人来说都应该是显而易见的，对吧？但事实并非如此。技术经理雇用最好的人，寄希望于他们能够解决难题。但经理们并没有完全“理解”这一切。
当我能够以一种不具威胁性和不居高临下的方式向他们解释一些非常基本的现代思想（例如，这些 NoSQL 的内容是什么，我为什么要关心？）时，高级技术经理很是开心。
最近，一位高级业务经理私下问我为什么要将传统部署的客户端架构迁移到托管平台。他承受着很大的内部压力来推动这项工作，但他不知道为什么这是必要的。他也可能太不好意思公开询问了。我花了两个非常有成效的小时来解释。
我现在从不犹豫，借此机会向高级或初级成员解释基本知识和动机。它在不让他们感到渺小的情况下帮助了他们，他们学会相信我的判断和建议，我们带来改变。
花时间解释是非常重要的。
管理项目101 项目管理是：将复杂的最终目标分解成更小的部分，将这些部分大致按最有效的顺序排列，确定哪些部分可以并行完成，哪些必须按顺序完成，并尝试梳理找出可能导致项目放缓或完全失败的项目的未知因素。
你正在解决不确定性，试图找到未知数，并认识到尽管你尽了最大努力，你还是会在此过程中犯错误并错过一些未知的东西。
这里有一些指导方针：
分解工作。拿出电子表格、甘特图或任何对你有用的东西，开始把你的大可交付成果（比如，重写你的计费系统）分解成任务。
从最大的部分开始，然后将大的部分分解成更小的部分，然后再将它们分解成更小的部分。
你实际上不必自己做这一切。如果系统的某些部分你不太了解，请向了解的人寻求帮助。
把大事分解一些，然后把注意力转移到工作的顺序上。
什么可以立即开始？将这些任务交给能够真正将它们转化为简单任务的人。
推进细节和未知数。项目管理的诀窍是当你感到有点卡住或厌倦时不要停下来。
正如我之前所说，这很累很乏味。这可能不是你擅长的事情。因此，继续努力克服那些刺激、无聊和痛苦的点。
一个好的经理会和你坐在一起，告诉你哪里不够好，提出问题来提示你，甚至和你一起解决一些问题。
我们也不喜欢它，但它是教学练习的一部分。解决未知数，直到你真的觉得花时间在它们上面没有任何价值。
运行项目并随时调整计划。一个好的计划过程的价值在于，它可以帮助你大致了解项目已经进行了多远，以及距离完成还有多远。
随着事情的进展（他们总是如此），让每个人都了解状态。但是现在，你不必猜测你必须走多远，而是可以清楚地指出已达到的里程碑并概述预期的剩余工作。
使用在规划过程中获得的洞察来管理需求变更。
在给定原始需求集的情况下，通过分解项目，你学到了很多东西。
如果需求在中途发生变化，请知悉这些变更并将计划进行调整。
如果变更给项目增加了重大风险，需要进行大量新的规划，或者只是需要额外的工作量，请清楚这些成本。
如果截止日期严格，粗略地了解所需的工作将帮助你确定优先级、削减和简化工作，以在功能、质量和交付日期之间取得最佳折中。</description>
    </item>
    
    <item>
      <title>技术领导｜03 techlead 该知道的事情</title>
      <link>https://kuhung.me/2021/techlead-vol-1/</link>
      <pubDate>Sat, 23 Oct 2021 15:56:41 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/techlead-vol-1/</guid>
      <description>🌟 合集地址：《The Manager&amp;rsquo;s Path》中文翻译 注：没有特别声明，文中的“我”都指原作者 Camille Fournier
背景介绍 多年前，我成为技术负责人。在这之前我已经晋升为高级工程师，和其他几位高级工程师在一个小团队中工作。我对被提升为技术负责人有点令人惊讶，因为无论是头衔还是年限，我都不是团队中最资深的人。
回想起来，我有一些优势。首先，我不仅仅是一名优秀的工程师，还是一个很好的沟通者。我可以写出清晰的文档，我可以在思维不短路的情况下进行演示，我可以与不同团队、不同角色的人交谈并解释发生了什么。
我也擅长优先级排序。我渴望推进工作并搞清楚下一步需要做什么。最后，我愿意收拾残局，做能做的事情来取得进展。我认为，这种务实的紧迫性（pragmatic urgency）是决定性因素。毕竟，技术负责人是一个领导职位，即使它不是管理职位。
（译者注：领导（lead）意味着需要做出关键性决策，对团队的业务发展负责。管理（manage）意味着塑造团队，有权决定团队的构成。一般而言，技术负责人是技术管理者与其他成员的桥梁。两者的进一步区别，可以参见本系列 tech lead 的第三部分。）
我见过技术负责人陷入困境。
一个印象深刻案例：他是一位了不起的工程师，能编写出色的代码，但讨厌与人交谈，并且经常被技术细节分心。我看着他一个接一个地陷入困境。与此同时，产品经理利用他的缺位，促使团队的其他成员将注意力集中在交付设计不佳又过于激进的功能。
项目一团糟，技术负责人在做什么？他追求下一次重构，因为他确信问题完全出在代码的结构上。你可能熟悉这个故事，因为它无处不在。
这里存在一种误区：认为技术负责人应当由这样的人担当，他们是最有经验的工程师、能够处理最复杂的功能或编写最好的代码的工程师。即使是有经验的经理也会犯这个错。专注于自己的代码细节不是技术负责人的该做的事。
技术负责人的工作到底是什么？我们对这个人有什么期望？
什么是技术负责人 与软件工程中的许多头衔一样，“技术负责人”缺乏一个统一的定义。我能做的最好的事情就是借鉴我自己的经验和其他人的经验。
作为技术负责人，我的工作是继续编写代码，但要承担额外的责任。即做好团队和管理者的衔接，审查我们的功能交付计划、处理项目管理过程的诸多细节。
尽管我不是最资深的人，但我可以成为技术负责人，因为我愿意并且能够承担这个角色的责任，而团队的其他成员更感兴趣的是专注于他们正在编写的软件。
当我在 Rent the Runway （一家公司）的团队创建我们的工程职业发展路径时，我们有意识地选择将技术负责人的角色定义为：工程师可以在职业生涯中的许多点，而不是特定级别上承担的事务。
我们采取这种策略是因为我们认识到，随着团队的变化和发展，技术负责人的角色可能由许多不同阶段的工程师担任，并且可能会从一个工程师传递到另一个工程师身上，无需任何一个人改变他的职能或工作级别。
技术负责人在公司与公司之间，甚至在公司内部的团队与团队之间可能并不完全相同。我们从标题中知道，它既是技术职位又是领导角色。它通常是临时的职责，而不是一个永久的头衔。
所以，综上所述：什么是技术负责人？这是我们在 Rent the Runway 的口径：
Rent the Runway 关于技术负责人的描述 技术负责人不是职级上的一个点，而是任何工程师在达到高级水平后都可能承担的一系列职责。
这个角色可能包括也可能不包括人员管理，但如果包括，技术负责人应该按照 RTR 原则管理这些团队成员。这些标准包括：
• 定期（每周）1-1 接触 • 关于职业发展、目标进展的定期反馈：需要改进的地方，并根据表现进行表扬 • 在各种信息中确定成员的发展方向，通过特定项目、外部学习或额外指导帮助他们在这些领域成长
如果技术负责人不直接管理，他们仍然需要为团队的其他成员提供指导和帮助。
技术负责人如何成为一名强大的技术项目经理？他们通过有效委派而非微操管理来实现这一目标。
他们关注整个团队的生产力，努力增加团队产出产品的影响力。他们有权为团队做出独立决策，并正在学习如何处理麻烦的管理和领导情景。他们还在学习如何有效地与产品、分析以及其他业务领域的同事合作。
技术负责人还写代码吗 正如 Patrick Kua 在他的书《Talking with Tech Leads》中的描述：负责（软件）开发团队的技术负责人，至少花费 30% 的时间与团队一起编写代码。
技术负责人的位置更像是技术型的项目经理，需要在更大范围内利用他们的专业知识，促使整个团队变得更好。他们可以做出独立的决策，并在团队与其他非技术团队的协调方面发挥重要作用。你会注意到这里没有特定的技术向工作。这是一个高级工程师职位，但将技术负责人等同于团队中最优秀或最有经验的工程师是错误的。
没有其他人的参与，你就无法领导。人际交往能力是我们要求新的技术负责人需要强化的地方，甚至优先于技术专长。与此同时，技术负责人将致力于一项新技术技能学习：项目管理。分解项目的工作与设计系统的工作有很多相似之处，即使对于不想管理他人的工程师来说，学习这项技能也很有价值。
如果你发现自己处于技术负责人的位置，那么恭喜你！有人认为你具备成为团队关键人物的条件。现在是学习一些新技能的时候了！
成为技术负责人 **技术负责人是一种在未授权状态下，练习影响力的机会。**作为技术负责人，我正在领导一个团队，但我们都向同一个技术经理汇报。因此，我不仅要影响我的同事，还要影响我的经理，以确保我们优先聚焦正确的工作。</description>
    </item>
    
    <item>
      <title>技术领导｜02 Mentoring 如何成为一个受人欢迎的mentor</title>
      <link>https://kuhung.me/2021/mentoring-vol-3/</link>
      <pubDate>Wed, 23 Jun 2021 15:56:41 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/mentoring-vol-3/</guid>
      <description>🌟 合集地址：《The Manager&amp;rsquo;s Path》中文翻译 技术路线还是管理路线 本文只少量涉及这个话题，因为导师制的指导通常与管理没有直接关系。
话虽如此，在职业生涯的某个时刻，我们大多数人都会从事某种程度的技术指导、职业指导或两者混合。
我们中的许多人也将获得指导。那么，如何使这种类型的指导富有成效？
互利的技术指导 当高级工程师指导团队中的初级工程师时，他们一起解决问题，这往往能提高后者的生产效率。
当然，高级工程师也从中获益。受指导者编写的代码质量更好，需要修改的就越少，整体开发速度也就更快。
初级工程师从指导中直接获益，并通过更资深人的视角，获得了对工作内容更充分的理解。
这种关系通常不是正式委任的，且极大可能是高级工程师的日常工作内容，它为团队带来了巨大的价值。
当你是导师 告诉你的指导对象你对他的期望。如果你希望他在会面前拟定议题以及准备好问题，明确告诉他。
明确说明你的时间投入，并诚实回应他的问题。如果相对于指导对象的 leader 或者同事，你没有明显的专业知识上的不同，那就没必要提供指导。
拒绝指导也是OK的。有时候你会觉得，有必要回应每个向你寻求帮助的人，但这没那么必要，你的时间也很宝贵。除非你认为这样做对自己和指导对象都有帮助，否则就不要这样做。
当你的 leader 要求你指导某人，但你没有时间这样做时，你可能需要给leader一些原因：例如你当前的排期紧张，近期计划休假或其他无法进行指导的原因。
无论做什么，都不要说“是”，然后实际上却无法达成。
当你是被指导者 想清楚想从这段指导关系中得到什么，并做好自己那部分的准备。
如果你没有时间准备或觉得没有必要做准备，问自己是否真的需要辅导关系。有时，我们之所以被安排导师，是因为有人认为我们应该有。
每个人的精力都是有限的，你不必为了有个导师而获得一个导师；也许你需要一个朋友或一个教练。
低估导师的时间很容易，因为你通常不花钱。所以请保持尊重，并考虑找一位有偿的专业人员来帮助你。
技术达人将是糟糕的经理 在某些场合下，无论是处于指导关系中还是处于指导关系外，你都会遇到技术达人（alpha geek）。
什么是技术达人 技术达人被认为是团队中最牛逼的工程师，他始终拥有正确的答案，并成为解决所有难题的人。
技术达人非常重视智力和技术技能，并认为这些属性决定了谁来做决策。
技术达人通常无法应付异议，并且当众人的焦点转移到别人身上，或别人的方案可能好过自己，会觉得自身的立足之本受到威胁。
他认为自己是最好的，并且只回应支持该观点的信息。
技术达人领导下的文化 技术达人试图创造卓越的文化，但最终却创造出恐惧的文化（译者表示认同）。
技术达人通常是一名出色而有效的工程师，他们进入管理的方式大致有两种：一种是熬资历进入管理层，因为他资历最长，最后成为组长、leader；一种是自认为自己是团队中最聪明的人，自己应该是经理，从而争取转向管理路线。
他倾向于打压手下人的自信心，要么通过夸大下属的错误，要么毫无预兆地重做他们的工作。有时，技术达人会为团队所做的所有工作表示赞赏，但不是以承认团队成员实力的方式。
技术达人的优点 好在，技术达人对于年轻的开发人员可能是鼓舞人心的，即使他们脾气古怪。他有所有问题的答案。
他可能在10年前就使用了某系统的最初版本，且和作者往来密切。如果你需要弄清楚发生了什么，他可以完美地解答你的疑惑。
他完全知道为什么你的某些操作不起作用，而如果不成功，他还会提醒你：他告诉过你怎么做的，只要你听他的，并按他说的做，事情就会奏效。
如果愿意，技术达人可以教给你很多知识，他们可以设计出色的系统，并且这个过程很有趣。
总的来说，技术达人非常聪明。他们有很多知识，这些知识值得团队成员去学习。许多工程师都非常尊重技术大佬，他们身上的优点一定程度上掩盖了其缺点。
技术达人的缺点 在某些糟糕的情况下，在技术达人领导的团队中，只要项目不是技术达人牵头的，他不会让任何人获得奖赏与夸赞。他们会认为自己的主意一定是最好的，而其他人的方案都是糟糕的。
技术达人认为，每个开发人员都应该知道得和他一样多。如果你不了解某些内容，他会很高兴地指出你的无知。
技术达人对于应该如何做事情非常僵化，并拒绝自己没有接触过的新想法。当人们抱怨他们构建的系统或批评他们过去的技术决策时，技术达人会感觉受到了极大威胁与侮辱。
当不得不接受自己看不上人的指导时，他们会表现得非常厌恶，且日常贬低非技术角色。
技术达人普遍存在 当工程师首次成为导师时，技术达人的习性常常开始显现。
问问自己：尽管自己拥有很强的技术能力，为什么人们似乎都没有向你寻求帮助。好好想想，你是否正在表现出上文提到的种种迹象。
你是否认为正因为自己是工程师，所以不需要言辞修饰，任何场合都可以直言不讳地表达？
你是否在急切地找茬，寻找别人的错误，不愿承认别人有一个好主意或编写了高质量的代码？
你是否认为绝对的正确比其他任何事物都重要得多，且始终值得为之奋斗？
摆脱技术达人 如果你怀疑自己是个技术达人（贬义方面），那么指导他人可能是摆脱这种习惯的好机会。
如果你将指导对象看做是一个需要接受教学和指导的人，而你的目标是以最适合他的方式帮助他，那么你就可以看到你的“进取”风格使他更难以学习。
练习指导的艺术可以帮助我们学习如何培养和教练（coach）一个人，如何更好的组织语言以便他人乐意倾听。用更好的方法，取代大声吼叫或是言语霸凌（打压控制、PUA之流）。
另一方面，如果你不愿意改变自己的风格来帮助受指导者成功，请不要主动成为一名导师！
技术达人的位置 技术达人造就了绝对糟糕的经理，除非他们能够学会放弃自己在会议室中最聪明的人和团队中技术最牛的人的身份。
具有较高技术经验的管理人员对于小型高级工程师团队是个不错的配置，但是技术达人通常最好不在管理序列，而应让他们更多地关注技术策略和系统设计。
在倾向于技术的初创公司中，你往往会看到技术达人扮演CTO的角色，他们在以执行为重点的工程作业中，都将重点放在设计和开发上。
如果你有晋升提拔的权力，请非常小心地为技术达人提供管理职位，如果这样做了，请密切关注他们对该职位的影响。 技术达人的负面文化可能对合作非常有害，并且会给处于弱势的团队其他人员长久的负面影响。
认为自己的价值来自于比其他人了解更多信息的技术达人，可能会隐藏信息以保持优势（玩信息差），而这会使团队中的每个人都失去效率。</description>
    </item>
    
    <item>
      <title>技术领导｜02 Mentoring 如何指导新人</title>
      <link>https://kuhung.me/2021/mentoring-vol-2/</link>
      <pubDate>Sun, 23 May 2021 15:56:41 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/mentoring-vol-2/</guid>
      <description>🌟 合集地址：《The Manager&amp;rsquo;s Path》中文翻译 指导新员工 个人经历 糟糕体验 我（原文作者）大学毕业后的第一份工作，是在太阳微系统公司（Sun Microsystems），开发一个已经开发数年的项目。
经理带我到办公室，让我自己弄清楚需要做什么。我不知道该如何寻求帮助，而且我担心：自己这样做会被视为傻瓜。
所以不出意外的，我感到灰心丧气。而在灰心之余，最好的办法就是去读研究生。所以我做了。
这次大不相同 研究生毕业后的第一份工作，和之前大不相同。我没有被带到办公桌旁呆着，而是给我安排了一位导师。
他鼓励我问问题。我们进行了一些结对编程，以便我可以熟悉代码以及该项目的测试流程。
在几天之内我熟悉了工作流程，并且在工作的最初几个月时间，学到了比在上段工作多多了的知识。
这几乎得归功于刚开始时得到的指导。
指导至关重要 指导新员工至关重要。
指导新人的工作包括入职，帮助此人有效地适应公司的生活，并建立你和他在公司中的人际网。
这是你一个机会，以崭新的视角看待公司和团队。还记得第一个项目是如何完成的吗，有哪些流程和规则让你感觉意外？
提供观察隐晦规则的机会 例如，新人手册中休假政策，但这可能只是表象。有些写得很明白：重大节庆的当周不能休假，因为你从事电子商务，这对企业来说是重要的一周。
而有些没写下来的东西，可能也很重要。例如：在寻求他人帮助之前，自己大约需要探索多长时间。
许多流程，文化和专业术语太过自然，以至于你可能不会意识新人很难理解它们。注意这些事项使你有机会进行澄清。
没摆在明面的规则不仅会使新人难以融入，还会使你的指导工作更难做。因此，请充分利用这次机会，审视组织和团队。
好的入职文档 高效的团队向新员工提供好的新手文档。
对于新员工来说，如何快速上手而又不会遭遇很强的挫败感，对他们至关重要。这些文件应不断修改以适应工作内容本身的变化。
通过帮助新人熟悉文档，并让他修改文档中的过时内容，这会向他传达一种信息：他有能力和义务去学习，并为团队分享他所学到的东西。
创造连结 指导的另一个积极意义在于：帮助新人融入周围。
公司内到处都是可以快速传播知识和讯息的网络。将新人带入某些网络将有助于他加快适应。
长时间待在同一家公司（尤其是大公司）的人们，很大程度上通过非正式网络找到内部合作的机会。
你的指导对象可能在你感兴趣的社团中，或者你可能想将他拉到另一个群聊中。
重视社交网络 即使你对管理完全不感兴趣，也应该重视人际与社交。
在大公司内，横跨多个团队，如果没有值得信任的社交圈来共享信息和想法，想推动一件事将会十分困难。
办公室是在人及其互动的基础上建立的，这些互动（社交）构成了任何职业的基础，无论是做管理还是做技术。
你可能是一个内向的人，或者一个不擅长社交的人，但是去结识新朋友并帮助他们成功，这种有意的选择，终将带来积极的回馈。
你对此的态度将决定成功或失败。不妨这样想：构建良好的人际关系网，是一项值得投入时间和精力的投资行为。
给导师的leader的建议 测量什么，才可以改善什么。作为leader，你可以通过制定清晰、有针对性、可衡量的目标来帮助你的团队取得成功。
找出衡量目标 很多时候，这种智慧很难被运用到导师分配过程中，但是却不得不常这样做。
当你需要为新员工或实习生分配一名指导者时，请找出通过建立关系所希望实现的目标。
然后，找到可以帮助实现这些目标的人。
为什么要建立指导关系 首先，首先弄清楚为什么要建立这种指导关系。在之前讨论的两个案例中，导师关系的存在是为了一个非常特定的目的：帮助团队中的新人，无论是全职新员工还是只待几个月的实习生，帮助他们跟上步伐，富有成效。
当然，这些并不是公司内所有的指导关系。有时，人们会设立培训课程，帮助初级人员与外部的高级人员建立关系，以促进职业或技能的发展。这件事的出发点很好，但除了将人们拉在一起之外，通常不会给导师和受指导者带来任何收获。
如果导师因太忙而无法在此项目上花费任何时间，那么这位导师很可能就不是合适的导师。如果受指导者不知道如何寻求帮助或如何处理指导关系，这会让他感觉自己被强迫参与了这么一个项目，是在浪费双方的时间。
因此，如果你的公司要在新员工和实习生之外建立指导关系，在推进该方案之前，请确保该计划具有一定的指导效果和流程规范。
指导者承担了额外责任 其次要认识到这是导师的本职工作外的事情。如果导师做得好，在指导期间他的生产效率可能会降低。如果你的工程师参与了对时间敏感的项目，那么你可能不希望要求他同时进行指导。寻找一个你认为可以胜任此职位，想要在编码之外做些其他事情的人。
常见的指导上的误区包括：将指导视为意义不大的“情感劳动”。假设指定的导师一定“喜欢”这份指导工作，从而错过了观察团队中潜力人员的机会。
就像之前说过的那样，为之做好计划，并为导师预留充分的时间。
指导的宏观价值 你已在建立这种导师关系上进行了投资，无论是花费数千美元、大量时间在招聘上，还是在协调导师计划上精力的开销。
指导是一项耗时的工作，值得继续进行投资直至取得成果。并且还可通过改善员工关系，缩短新人上手时间和提高实习生留任率等形式获得可观的回报。
导师的匹配度 导师不必为了指导而指导，你不应指望女性仅指导女性，男人仅指导男性，以此类推。
指导计划中涉及很多内容。在考虑建立导师关系时，除非导师计划的目标就是多元化，否则请为人们提供适合其情况的最佳导师。
培训未来领导者 最后，利用这个机会来培训团队中的未来领导者。如你所知，领导力要求人与人之间存在良性的互动。在指导过程中，培养他们的耐心和同理心。
精明，内向的开发人员可能永远都不想做管理，但是鼓励他们参与指导有助于他们建立更强的外部视野，更不用说这也在拓展他们的社交圈。
对话 CTO Q：
我所在的公司曾多次询问我们是否雇用实习生。我们过去没有，但现在想开始这样做以扩大我们的招聘人数。怎么看这个问题？
A：</description>
    </item>
    
    <item>
      <title>技术领导｜02 Mentoring 如何指导实习生</title>
      <link>https://kuhung.me/2021/mentoring-vol-1/</link>
      <pubDate>Fri, 23 Apr 2021 15:56:41 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/mentoring-vol-1/</guid>
      <description>🌟 合集地址：《The Manager&amp;rsquo;s Path》中文翻译 许多人的第一次管理，往往不是正式委任的，而是指导性的工作。
导师制度的价值 导师制度 导师通常被分配给团队中的初级成员，例如应届生或实习生。许多组织，在新员工的入职过程中也使用导师。
导师是谁 有时，导师是团队中的另一位初级同学。可能他自己也只参加工作一两年，可以轻易地与新人建立联系。
导师有时是高级工程师。除了可以帮助新员工加快熟悉工作流程外，还可以充当技术导师。
导师制度作用 在一个健康的组织中，入职指导被看作是双方相互审视的机会。指导者有机会了解对另一个人负责的感觉；而受指导者，则得到一个专注于他的导师指导。
我的第一位导师 我（英文原文作者）很幸运有一位出色的导师，他的名字叫凯文（Kevin）。当时我是太阳微系统公司的一名实习生，所在团队负责 JVM 工具。这是我第一次，构建一个真正的软件项目。
尽管他是我们的高级技术主管，但还是为我分配了大量时间。他没有留下我独自凌乱，而是花时间与我讨论项目。一起在白板写代码，一起做 code review。这让我知道了，我应该做的事情。当我陷入困境时，我可以向他寻求帮助。
那年夏天的实习，对我的软件职业生涯至关重要。在他的指导下，我发现我可以胜任这份工作，而且有能力成为一名高效的员工。
与凯文（Kevin）的合作，是我职业生涯的第一个重要里程碑。
这种经历教会了我导师制度的价值。
导师做得不好会怎么样 如果你发现自己正在负责指导他人，那么祝贺你！这并不是所有人都能获得的经验。这是一个机会，以相当安全的方式，学习管理工作以及对他人负责。
你不太可能，因做指导做得不好而被解雇（当然，除非你举止不当，触碰原则底线）。
最坏情况 对于许多导师而言，可能发生的最坏情况有：
受指导者浪费了大把时间，他们的产出减少。
他们做得非常差，以至于团队不想雇用该人。
受指导者的经历很糟糕，并且没有融入组织。选择了更早地离开组织。
遗憾的是，后面的可能性要比前面大得多。
糟糕的导师 有时，糟糕的导师会浪费大量的才干。
这些导师做的很少，无视受指导者的需求，在琐碎的项目细节上浪费时间。更最糟糕还有，威胁和贬低受指导者的能力。
但是读到这里的朋友，肯定不想这样做。你想成为一名伟大的导师。
也许你已经是一位经理，希望团队在导师关系方面发挥积极作用。
那么，如何建立良好、有效的指导关系，而又不减慢开发速度呢？
如何指导实习生 这里介绍的第一类指导关系，是实习生。
对于大多数高科技公司来说，这通常指的是暑期实习生。许多公司将这种模式，视为应届生招聘的重要渠道。
提供良好实习体验 因此，在指导这些学生时会发现，他们是缺乏实际经验的。
如何确保给他一个良好的的实习体验？
即使公司不需要他，你也要给他留下好的印象。因为，他回去会告诉他所有的朋友：他在贵公司工作的实习体验。
这会影响你在该圈子，招聘应届生的形象。
但是不用担心，让实习生开心，并不是造火箭。
准备项目 你需要做的第一件事，是为该实习生准备项目。
如果你作为导师，没有拘泥项目的形式和内容，那将非常棒。
为什么要准备项目 没有项目，实习生很可能会在整个实习期抓不着重点，且感觉无聊。
对于有经验的员工，弄清楚该做什么都是困难的，更何况是实习生。
如果你确实大脑一片空白，可以看看自己当前项目的一些小功能。这些功能可能需要几天的时间才能完成，就从这里开始。
最初几天多接触 实习生刚来的前几天，与任何新员工的经历都是相似的。入职，适应办公室，认识同事，熟悉系统。
在最初的几天里，尽量与他多接触。让他安装 IDE 并阅读代码。
每天几次与之接触，以确保他不会因大量新信息，而感到迷茫与不知所措。
同时，为他的项目做准备。
项目分解与里程碑设定 有了项目后，就可以将对项目管理的新知识，应用到手头的任务上。
这个项目是否分解了里程碑？如果不是这样，请在实习期间的前几天花点时间进行分解任务。
与你的实习生一起进行详细的分析。这对他有意义吗？向他提问，并倾听他的问题并。
请记住，你正在练习将来成为领导时需要的技能。
这些技能包括：倾听，清晰传达期望以及根据回应调整。
管理的基本技能 倾听 倾听是管理人的第一项，也是最基本的技能。</description>
    </item>
    
    <item>
      <title>从一款小游戏收获的三点思考</title>
      <link>https://kuhung.me/2021/what-i-learned-from-little-game-xiao/</link>
      <pubDate>Sat, 13 Feb 2021 17:13:44 +0800</pubDate>
      
      <guid>https://kuhung.me/2021/what-i-learned-from-little-game-xiao/</guid>
      <description>2月初，我上线了一款小游戏，整活小游戏——合成魈大人（移动端访问）。
这一过程，收到了很多反馈。
同时，也有如下三点思考：
善用营销 早交付 学会写标题 至于为什么是这三点，下面将按时间顺序，一一阐述。
前景提要 品牌与商业化观察 很久以前，小力就有一个想法：将自己的技术能力变现，至少是能变成流量。
在这个过程中，交付客户喜欢的东西，形成自己的名片📇。
这样做的目的：一方面是督促自己不断学习；另一方面也是在构建自己的品牌，争取更高的议价权。
为了实现这一目标，小力学习了很多经管类的资料。同时也在工作中，做一个善于观察的人。观察不同组织，做得好和不好的地方，以及背后的原因。在这个过程中，有一点让小力印象深刻，那就是：微创新的组合。
很多商业上的成功，不是来自于翻天覆地的改变，而是来自于已有项目之间的交叉组合。在利基市场，进一步细分客户群，获得利润；或是发掘完全崭新的市场，占得先机。——Nicolas Gu
几次尝试反响平平 在写代码上，最容易的微创新，那一定是前端跑不了了。其次，则是算法模型。但是后者有一个较大缺点：离普罗大众太远，且消耗计算资源。
基于此，小力一个非专业前端，也写了不少前端小项目。虽然这些都是魔改的，但确实能够交付用户面前。
这其中就包括：
毒鸡汤 点击🔗访问
原神放置小游戏 点击🔗访问
图像搜索（算法类项目，较为吃计算资源，上线一段时间后撤下）
但以上的结果，都反响平平，单个项目的 PV 不超过500。
吃瓜吃到手边 在某个天朗气清的一天，互联网上还在吃郑爽的大瓜，而后又冒出另一个生孩子的事情。吃瓜的事情，以小力的习惯，向来是不会过多关注的（当然，该谴责还是要谴责）。
没过几天，微博热搜由吃瓜变成了合成大西瓜。小力也理所当然，不为所动。直到整活小游戏——合成华中大，出现在朋友圈。
这游戏点进去一看，没啥难度啊，活脱脱一个2048翻版。几天不到，就出现如此多版本，互联网上一定有源码。
一个念头出现在小力脑海中：合成，合成点儿别的东西？顺着组合创新的思维，在垂直细分领域，为何不能合成《原神》游戏中的角色——魈？答案是肯定的。
开发构建 资源整合 说干就干，先去GitHub搜索源码，很容易的，排名靠前的好几个。定睛一看，整体就是一个前端静态页面，服务器资源消耗也不大。
唯一的难点，就在于素材的全面替换。这个不太容易，需要解决两个问题：
有哪些素材，素材的引用路径是怎么样的。 小力不会美术，不会画图，替换的素材从哪里来。 第一个问题，通过前端调试，很快解决。有图片、交互UI、音频以及引流的变现链接。
第二个问题，素材可以直接互联网抠图。最直接的，米游社原神板块和淘宝旗舰店。
大概周六一下午的时间，以上内容基本缕清。又花了一晚上的时间，最重要的素材通过截屏、powerpoint 工具、画图工具，剪裁完毕。
第二天一早，项目借鉴之前个人网站的方式，通过 GitHub 静态部署完毕。部署过程，加入了百度和谷歌的数据埋点，用来监控PV、UV以及访问来源等信息。
潜在风险迭代 周日的中午，项目已经和最终版基本无差，在交付种子用户体验后，收集到了正向的反馈。但是，小力觉得还应该做得更好。于是替换掉了项目中的引流链接，删除了循环玩法流程。
在调试过程中，小力发现，资源加载缓慢，平均首次加载耗时超过2分钟，部分时间甚至出现卡顿。根据亚马逊的实验报告，网站每多加载100ms，将损失巨量的成交。小游戏也是，根据微信的报告，小游戏的加载过程，将会影响至少一半的潜在玩家。总而言之，加载的延迟问题很大。
要解决这个问题，有多种方法。其一，压缩素材。其二，换自建服务器。这些，都是技术人员正常的想法。不过，这里忽略了一个最重要的事情，就是客户：客户关心这个问题吗？后续的结果证明，延迟的负面影响没有预想的大。
又是一个下午的时间，小力尝试压缩图片质量，通过 tinypng 缩小了图片资源到原来的1/4。而加载问题，始终有概率在98%处卡住。这个现象，有两个原因：一个是资源所处位置 GitHub 本身的不稳定性；第二个是，前端代码里对进度条进行了调整，98%时，实际加载的资源只有50%🐶。
交付与反馈收集 当天晚上，小力在米游社发帖，开始曝光自己的游戏。当晚的浏览量在200上下，第一次收到玩家的反馈。其中，正向的居多。而反应加载不出来的，十条大概只有一条。给这个比例加上“沉默螺旋”加成，也就是那些受阻的玩家会直接关闭而不是反馈，估计约有2成玩家受阻。这一数量，在可接受范围。
第二天，周一的中午，小力在NGA发帖，曝光自己的游戏。
随即，浏览量“暴增”，顶峰半小时 UV 在800以上。
后面几天，流量趋于平稳。累计的PV在13000以上，UV在7000+。这个数据单独看没什么概念，但要知道，小力个人网站2020年的 UV 是2890，PV 是3690。而小游戏，不到一天就超过了这个数。
随后，小利在外网 Reddit 社区，也发出了帖子，进行游戏曝光，同样收到正面反馈。
两天后，小力计划采用视频曝光方式。计划延期未交付。
再两天，小力观察到米游社有一个首页推荐贴，合成史莱姆。获得了合成魈的十倍曝光。观察下来有如下特点：
标题符合社区文化，吸引人去点击 素材更改并不多，甚至有些粗糙，交互逻辑沿用的第一版 但是，它获得了更好的流量。</description>
    </item>
    
    <item>
      <title>技术领导｜01 技术管理入门 （下）</title>
      <link>https://kuhung.me/2020/management-101-vol-2/</link>
      <pubDate>Wed, 30 Dec 2020 00:04:13 +0800</pubDate>
      
      <guid>https://kuhung.me/2020/management-101-vol-2/</guid>
      <description>🌟 合集地址：《The Manager&amp;rsquo;s Path》中文翻译 在上半部分，我们描述了一个好的管理者画像。以及我们所期待的，从管理者身上获得的东西。
下半部分，我们集中注意力在自身，即：如何被管理，做一个称职的下属（打工人）。
被管理者视角 弄清楚如何被管理，也是管理者需掌握的东西。这和向上管理不太一样，虽然它们有相关性。
它的核心在于三点：
在工作中，发展主人翁意识
培养对所做工作内容的权威感
不去依仗上级设定关系的基调
这对于掌握职业生涯，提升工作幸福度，十分重要。
花些时间想想，你到底想要什么 认识自身，责任在己 你的上级，可能会指出增长的机会。他能给你提供项目，能给你的学习、成长提供反馈。
但是他并不会读心术；他也不能告诉你，什么会让你快乐。
无论你是个职场新手，还是一个有二十年阅历的职场老鸟，这一切的责任都在你自己身上：你想要做什么，你想学什么；以及什么会让你幸福快乐。
职业生涯充满不确定性 你很可能正在经历，职业生涯的不确定期。很多人，在他们刚出社会的头2-5年，都会感觉非常焦虑。
当我刚离开学校的时候，也是这样的感觉。我迫切想逃离这颇有难度的工作，想回到熟悉的大学学术研究。
在我成为公司的技术负责人之后，不确定的感觉再次来袭。而且我能确定，每5-10年，便会经历一次不确定感。
当你经历过职业生涯的不同阶段，你将会意识到：这个世界充满了不确定。
快乐会消失，理想很现实 但其中，也有一条不变的真理：一旦获得了想要的工作，工作的光环便开始褪色。快乐开始减弱，你又开始追寻新的东西。
你想去一个很酷的创业公司，入职后却发现内部一团糟。你希望成为一位经理，到头来却发现这个工作非常困难，并且它的回报并不如你所愿。
在以上的所有情况中，你能依赖的，只有你自己。你的领导并不能取代你的地位。
因为，借助你的领导，你可以发现能到的地方；但只有理解了你自己，才能弄清楚想去的地方是哪里。
为自己承担责任 认识你自己是第一步。第二步，是知道你想要什么。
主动争取 当你想做某个项目，就去争取它，推荐自己。
当你的领导并不那么管用时，从其他地方获得支持。
寻求反馈，包括负面的、需要改善的地方。当收到反馈时，好好重视，即使你并不认同它。
当你长期都不开心时，说出来。
当你遇到障碍时，寻求帮助。
当你需要支持时，提出来。
当你想要被提拔时，弄清楚怎样才能获得晋升。
付出更多 如果你想要回家，找找什么方法能让你完成工作，然后回家。
有些时候，你不得不对抗整个组织文化，以此来设定自己的边际。这种感觉并不舒服。
另一面，如果你想承担更大的责任，你可能需要更多时间来肩负它。
不是每件事都能如愿 你并不能获得想要的每件事情。去争取也不是一件有趣、舒服的事情。但它却是最快的方式。
如果你的领导足够坦诚，他会感谢你的直爽。但他也可能不太敏感，或者他想你少说多做。那你就需要考虑清楚自己的处境。
我无法保证，这对你百分之百有用。但一旦你设定了自己的目标，你就有责任去做点事情，让它成为现实。
理解上级，换位思考 这只是份工作。
上级的工作职责 你的上级，可能因为其他事情而焦头烂额。
他不是完美的。他也会说很多消极的话，或者是做一些让你感觉不公平、有伤害你的事情。
他可能会分配，你并不想做的工作，并且无视你对于这件事的抱怨。
他的责任，是对整个公司、整个团队，做整体最优的事情；而不是一些让你时刻开心的事。
同上级的人际关系 你同你上级的关系，和其他人际关系没有两样。
你能改变的只有你自己。
你有责任提供足够多的反馈给到上级。
但也需要认识到，他可能并不想听，或者听了也不想做出改变。
什么时候该换工作 如果你发现开始对上级积累怨恨，很可能，你需要去新的团队或者找新的工作。
如果遇到的每一个上级都不爽，那就要想想：问题是出在他们身上，还是自己身上。
也许你在一个没有上下级的工作环境，会更开心。
寻求建议，而不是完全依赖 特别当你变得越来越资深，要记住：上级希望你带来解决方案，而不是问题。
不要让每场谈话都变成你需要什么，以及某些事是多么的糟糕。
当你遇到困难，找你的上级解决掉它之前，试着寻求建议，学习他处理问题的思路和方法。
寻求建议，永远是表达尊重和真诚的最好方式。
选择你的理想上级 你的上级会对你的职业生涯产生巨大的影响。</description>
    </item>
    
    <item>
      <title>技术领导｜01 技术管理入门 （上）</title>
      <link>https://kuhung.me/2020/management-101-vol-1/</link>
      <pubDate>Sat, 19 Dec 2020 15:32:37 +0800</pubDate>
      
      <guid>https://kuhung.me/2020/management-101-vol-1/</guid>
      <description>🌟 合集地址：《The Manager&amp;rsquo;s Path》中文翻译 管理的秘诀就在于：让那些讨厌你的人，远离那些还没有形成主见的人。 ——卡西·史丹格尔
你阅读这篇文章，是因为你想成为一个好的管理者。但在这之前，你其实并不知道，一个好的管理者是什么样子。
你之前有遇到过一位好的经理吗？如果一个人让你告诉他，你想从一位好经理身上获得什么，你能够回答这个问题吗？
从管理者那里，期望获得什么 每个人在管理之路的第一站，总是在桌子的另一边，即：被管理者。这些被管理的经历，成了你构建自己管理哲学的基础。
不幸的是，我已经看到很多人，在他们的职业生涯中，并从未遇见过一位好的领导。
好的管理特质 散养（benign neglect）——这是我的朋友谈论他们遇到的，最好的管理者的特质时，常常会提到一个词。
工程师知道他们该做什么，领导则完全放权给他们做。在一个极端的案例里，一个人在六个月的项目时间里，仅仅同他的领导会面了两次。其中一次还是因为获得提拔。
良性的忽视（散养）并没有那么糟糕，特别是当你看到它的反面的时候。
散养的反面之一 这里有另外一种领导，当你需要帮助的时候，他会无视你：不顾你的疑惑，同时避免与你会谈。
更甚至，他们从来不给你反馈。只有当绩效回顾到来时，他才会告诉突然地告诉你：你并不胜任这份工作，或者是并不值得被提拔。
散养的反面二 而另一方面，又会有另外一种：极端的、事无巨细的管理方式。
他总是过问每件事的细节，并拒绝让你做任何的决策。他们会无视你的建议。只有当他们想找人背锅时，才会找上门来。
散养没那么糟糕 遗憾的是：以上反面类型的管理者，总是存在于各大公司的角落，影响着团队的精神健康。
所以，当你看见了以上的案例，你会意识到：散养，也没那么糟糕。
理想的管理者 与此同时，也有其他的类型的管理者：他们把你当成一个真正的人，并乐意帮助你成长。
他们会教你一些重要的技能技巧，给你有价值的反馈。
会帮你分析目前的困境，在困难中给你指引。帮助你弄清楚，哪些东西需要学习。
会想着某一天，你能胜任他们的工作。
总结起来一句话：他们帮助你明白，什么是需要重点关注的；同时，让你具备关注的能力。
但话说回来，为了你和你的团队走上正轨，管理者的关注点在方方面面。所以，指望他们事无巨细皆满足，也是不现实的。
在谈论想获得什么时，也应该问问自己：你想要的是什么。
一对一谈话 同你的直属领导，进行一对一的谈话是非常重要的。这有助于构造一个好的工作氛围。
然而，很多管理者忽视了这些会谈，或者他感觉是在浪费你的时间。
一对一谈话是为了两个目的。
一对一谈话目的之一 其一，它创造了你同你领导的联结。
这并不意味着：你花大把的时间，去谈论你的兴趣爱好、或者是周末的活动。而是让你的管理者进入你的生活。
这非常重要的。因为当有压力的事情发生时，比如：家人的去世，新生命的诞生或者是房屋修缮，会更容易请假。
你需要更多的帮助时，也会更加容易。
好的领导者，会注意到你的精神面貌的变化，并且希望能够真诚地帮助到你。
虽然我们可能是很内向，或者我们根本不想在工作中交朋友。你可能会认为，我是一个很喜欢交朋友的人，所以我不能理解你的感受。但是我向你保证，我能理解你坐在桌子的另一端的感受。
内向并不是借口，也不是无礼待人的托词。
强大团队的基础，是人与人间的联结。只有充分的联结，才能够引起足够的信任。
所以好的领导会希望：你在工作之外能有生活，同时也乐于交流你们的业余生活。
一对一谈话目的之二 一对一谈话的另一个目的，是提供了一个私密谈话的机会。尤其是，有一些必须谈的话题。
你应当把你的一对一谈话，安排的到日程表里。以便这个会面能被排期。掌控谈话节奏的职责，并不完全在领导侧。如果在谈话前，能有议事的章程，将会是非常好的。
如果你的领导并不经常和你会谈，或者是经常取消或者改变谈话时间，这将有点难办。
你可能并不需要高频的一对一谈话，那也没问题。当你需要它们的时候，就请告知管理者。
一对一谈话的更多作用 对于大多数人来说，好的一对一谈话，并不等同于进度同步会议。
如果你是一个管理者，汇报给更高的管理者。你可能会用一对一谈话，来澄清项目状态；亦或者是，讨论那些还没立项的项目。
如果你是个独立的开发者，一对一谈话可能是重复或者是无聊的。如果是这样，尝试用邮件或者是企业聊天工具去做这个事情。并且记住，尽量在会谈中明确你的中心主题。
我鼓励你去承担责任，承担营造更好会谈的责任。
起草一个议事的章程；为会谈做好时间准备。如果他取消，或者是重新排了日程，推动他去找一个固定的时间。如果这个时间不现实，那就找一个感兴趣的话题切入，让他知道你想进行一个会谈。
反馈和工作指引 反馈，应当是值得期待的第二件事情。
这里说的反馈，并不是指绩效回顾。虽然绩效回顾是其中的一部分，但它的频次并不高。
一般而言，你极有可能在项目初期，搞砸了某事。如果你的管理者称职，你会很快接收到反馈。
这可能会让你感觉不舒服，尤其是对于还没有适应工作压力的人。
接收其他人的反馈，可能会让你感觉迷失方向。
但是要记住，比接收反馈更糟糕的是：没有反馈；或者是到绩效评估时，才得到反馈。
持续追踪、记录反馈 从领导那里获得早期的、持续的反馈，非常重要。
发现越早，坏习惯就越容易修正。
这对于表扬也是同样的道理。一个好的管理者，会注意到你日常生活的点点滴滴，并从中认识你。</description>
    </item>
    
    <item>
      <title>为度过原神长草期，我写了个原神放置类单机小游戏</title>
      <link>https://kuhung.me/2020/yuanshen-idle-feedback/</link>
      <pubDate>Mon, 16 Nov 2020 00:37:39 +0800</pubDate>
      
      <guid>https://kuhung.me/2020/yuanshen-idle-feedback/</guid>
      <description>游戏地址：https://kuhung.me/yuanshen-idle/
很高兴能和大家分享这款小游戏。如果恰好你也喜欢原神这款游戏，想在长草期放松放松，那么这款放置类游戏一定不要错过。
游戏模板来源于 Couy69 的 vue-idle-game，副本填充内容来自原神米游社等公开社区。所有内容均来自公开互联网，业余时间打造，非内鬼，不py。
对这款放置挂类游戏的任何建议，欢迎通过以下三种方式联系。
拥有 GitHub 账号，可直接下方留言。
关注我的微信公众号【谷粒说数】，留言反馈。
发送电子邮件至 kuhung#foxmail.com(@替换#)，进行反馈。
请选择你最方便的形式。
为答谢各位的支持，将于12月1号，送出三份原神周边。抽取三位提出宝贵建议的同学，快递上门。
另寻前端高手，优化移动端布局，以及迭代整体交互逻辑。
目前的更新计划：
项目 预计耗时 预期上线时间 实际上线时间 备注 最后一次修改时间 原神放置类小游戏 7x10h 已上线 2020.11 项目整体概况 2020.12.10 完成全部副本的文字描述替换 4h 2020.12.13 1116 完成蒙德区副本文字描述 2020.11.16 增加新手引导 1h 已上线 2020.11 增加文字描述引导 2020.11.19 调整增益道具UI 增加道具洗练，将摩拉进行消耗 调整暴击逻辑，增加随机性 游戏 Tip：
点击保存，保存的游戏进度在本地，离开再回来，仍能继续。 ◀返回游戏</description>
    </item>
    
    <item>
      <title>自制以图搜图引擎，居家学习必备</title>
      <link>https://kuhung.me/2020/simple-image-search/</link>
      <pubDate>Mon, 13 Apr 2020 21:17:08 +0800</pubDate>
      
      <guid>https://kuhung.me/2020/simple-image-search/</guid>
      <description>最近宅在家，消遣时间之际，总会遇到一个让我困扰的事情。比如随手刷到的一个GIF，总想找到它的原片。
各位绅士可别想歪，我说的是动漫。
这个问题本质是一个相似度的检索问题。
说到视频找视频，其实可以分解为以图搜图。以图搜图这项技术，已经十分成熟，且已产品化。尤其在主流搜索引擎，很难找到一个不能搜图的引擎。连淘宝都有自己的时尚搜图功能。
但是当你满怀期待上传一张图时，你会发现，他返回的结果要么是同风格作品，要么是图片的描述。摔，我不是让你做抽象阅读理解哇。
这样的现象，实际是个性化需求与规模化需求的矛盾。对于公司，能规模化的，成本越低；定制带来存储成本，远高于能带来的回报。
这样的问题难不倒我们广大的人民群众，如果没有现成的，那我们就造一个。
以图搜图，可以理解为图像的检索，图像和其它信息一样，是可以被索引，被检索的。
于是乎，可以将整个工程抽象为3个部分。
图像预处理 图像特征表征 图像检索 图像预处理，一般是尺寸、色调的调整、以及去除明显的噪声。
索引建立有很多种方法，其核心是构造图像的特征表征。
这里先用简单的，构建一个 MVP（最小可行性产品），就采用谷歌的 MobileNet 啦。
该模型尺寸仅数十M，放在服务器或是部署到手机移动端，完全绰绰有余。（实不相瞒，其实一开始上的VGG16，但是模型太大了，服务器放不下。）
最后，图像检索，当一张新图来到时，对其进行特征提取，然后去索引库中查询，返回特征表征最近的 TopN，一个简单的以图搜图就完成了。
迫不及待想尝试了，但是发现一个大问题，咱们的索引图从哪儿来？总不能凭空捏造噻。
嗯，这也不是什么大问题，之前浏览某P开头，哦不对是G开头的学习网站，发现了知乎问题的爬虫。
这可是个好东西，恰好知乎时间线上，总有一个问题干扰学习——#什么样的腿才叫好看的腿#
就拿这个问题为例，将图片在离线创建索引，随后通过服务端部署。（服务端部署也可以讲一集，但不在这里，别挡住我看腿。）
当当当，随着周末两天的操作，舍弃了俺在的 pubg mobile 战友，谷粒粒的第一个搜图app上线咯。喜大普奔。
让我们赶紧试试，
嗯，还不错
再来一张，
原图秒匹配好吗，还给配上了类似风格的照片。
到这里，咱们的以图搜图小应用，就算开发上线完毕啦。
学习效率上升N个档次有没有⬆
链接地址：以图搜图之#什么样的腿才叫好看的腿# http://img-search.kuhung.cn/
相关文章：
谷粒：机器学习模型部署&amp;ndash;打通前后端任督二脉
谷粒：机器学习落地需攻破的9个难题
声明：该应用仅供学习，禁止用于其它用途。</description>
    </item>
    
    <item>
      <title>机器学习系统设计 Machine learning system design</title>
      <link>https://kuhung.me/2019/machine_learning_system_design/</link>
      <pubDate>Sun, 01 Dec 2019 18:26:43 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/machine_learning_system_design/</guid>
      <description>导读 Web app：https://kuhung.me/machine-learning-systems-design/
机器学习系统设计 系统设计题，顾名思义，就是考察一个人设计系统的能力。它是一种国外很喜欢的题型，特别是中高级职位，在算法手撕结束后，一般就是系统设计题。
国外的算法工程师，被称之为 Machine Learning Engineer。国内的名头比较多，算法工程师、数据挖掘工程师、机器学习工程师、深度学习工程师都指的这个。
这一岗位同开发岗位，SDE 一样，也需要足够的系统设计经验。
国外的大佬 github.com/chiphuyen 总结了一份机器学习设计的资料，我在这里做本地化整理，同时增加一些自己的从业体会。
内容分为3个部分，分别是：
机器学习的系统设计部分，这里做了核心概念的摘录；
系统设计的案例，由于众所周知的原因，很多文章看不了，我这里将其整理放入了 github，同时笔记标注版的放在了公众号：谷粒说数。
练习部分，作者列了27道系统设计题。我这里将其布置在了网页上，方便自查，后续会上评论进行答案收集。
系统设计应关注的点 系统设计题，如果没有完整的方案也没关系，主要看表现的思想，着重从以下三个方面考察：
项目有哪些约束条件，哪些能做，哪些不能做。
方案的利弊，选择方案时，思考方案利弊的过程。
主要的功能，最后达成什么样的效果。
系统设计往往很难，这是因为两方面的原因。1. 缺乏有效的评估手段。2. 问题往往模棱两可。面试中的理想候选人应该是这样子的：1. 能够有效的拆解问题，将复杂问题简单化。2. 能够区分该场景是否需要机器学习方案。第二点很重要，因为在当下，受媒体大环境影响，很多人会选择无脑上机器学习，殊不知某些场景简单的方法更有效。
Machine learning methods change every year, solving problems stays the same.
生产环境不同于学术环境 学术研究的一般有以下两个特点：
想法设法比上一代模型效果更好，而不用思考怎么落地使用它。 由于效果是第一要务，所以算力没有限制，加钱堆机器即可。 而生产环境不同，它的特点如下：
效果并非越好才好 算力资源常常有限 作为开发者，要始终牢记生产环境是我们的目标。
需着重关注的4类问题 如何采集数据、如何处理数据。
怎么选择的模型、为什么。
如何评估你的模型。
如果再来一次，哪些地方会做得不一样。
设计机器学习系统 系统设计方面，作者将其分为了4个层次，我这里也按她的逻辑进行。 项目准备 项目准备阶段，一般从三个角度思考。如同写程序一样，首先思考需要达成什么样的目标；其次是有哪些限制条件；最后是特殊例子的考虑。
展开来讲，需要达成什么样的目标：即最后用户怎么使用你的系统，你的系统吞吐多块、响应多快。
项目的限制条件包括：项目周期多长，有多少算力，需要何种能力，有哪些可用资源。
特殊例子即：是否需要结合用户做特殊化处理，例如千人千面。
最后，如同老师设计考试一样，需要考虑如何评估你的系统性能。
数据流 Machine learning is driven more by data than by algorithms</description>
    </item>
    
    <item>
      <title>机器学习建模与部署--以垃圾消息识别为例</title>
      <link>https://kuhung.me/2019/flask_vue_ml/</link>
      <pubDate>Sat, 20 Apr 2019 14:31:26 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/flask_vue_ml/</guid>
      <description>前言 学历与定位 近日在某论坛，有网友提问道：搞机器学习是不是要博士或是硕士学历，是不是要求很高，顶会论文？本科生或者更低学历的，是不是就没有机会了？从最近公司的招聘来看，算法工程师的 bar 确实有在提高。但在某些事业部，仍需要很大的人力来做落地场景。每个人都要找准自己的定位，公司也有它的部门定位。
如果是发论文、要在学术界站稳脚跟，给投资人“我们很重视最新技术”的信心，那博士确实很重要。另一个角度，从实用角度来说，研究生和本科生可能性价比更高。当然，作为一个本科就业的人，如果没有较为丰富的实战经验；有机会的话，还是拿到硕士及更高学历比较好。这里的实战经验就比如：搭建一个完整的、涉及算法模型、后端及前端的系统。
模型算法的实用主义 机器学习的实用主义，不是在论文多少，而是用正确的方法去解决正确的问题。而作为背后的工程师，除了调参、除了写 sql，做调包侠、做 sql boy、报表 boy 以外，在之前的文章也提到过，要学会做正确的展示，做全套的工程化实施。毕竟，等排期很难受；有些情况前后端资源不够，或者优先级很低，那就需要自己动手了。以下以上面的垃圾邮件分类为例子，说明该如何搭建一个前后端完整的机器学习系统。
这里将本次的任务拆解，分为三个部分来讲。后端 flask、前端 Vue、ML 模型采用 flair，项目地址 kuhung/flask_vue_ML
后端 flask 相关依赖的安装 pip install -r requirements.txt
核心函数 导入函数包 from flask import Flask, jsonify, request from flask_cors import CORS # 做跨域的准备 from flask import session # 追踪客户端会话 from flair.models import TextClassifier # 模型导入，采用前不久开源的 flair 做文本分类 from flair.data import Sentence 准备工作 app = Flask(__name__) # 声明准备 app.secret_key = &amp;#34;super_secret_key&amp;#34; CORS(app) classifier = TextClassifier.</description>
    </item>
    
    <item>
      <title>GPT2 模型生成假正经文稿 Slack gpt2 Bot </title>
      <link>https://kuhung.me/2019/slack-gpt2-bot/</link>
      <pubDate>Mon, 25 Mar 2019 22:36:06 +0800</pubDate>
      
      <guid>https://kuhung.me/2019/slack-gpt2-bot/</guid>
      <description>slack app：slack workspace
记得在校的时候，冰岩作坊做过一个app，讲接龙故事的。类似于我写一段，另一个人写接下来的一段，最后凑成一个完整的故事。当时，可产生了不少有意思的段子。最近，GPT2 模型的发布，让人不禁想到，有没有可能让机器来完成这个任务呢？机器写十四行诗、机器写莎士比亚风格的文章，机器写对联，这些都已经成为了现实。人工智能虽然没有带来突飞猛进的质变，但着实催生了很多有意思的小玩意儿。对于GPT2，一个字概括来说就是：壕——数据量大，算力能够 cover 住。这套算法模型网罗了几乎现有的所有文本数据，成功“过拟合“地屠榜，刷新多个 NLP 任务榜单排行。作者为了预防滥用模型、同时让别的研究者能够有个初步地认识，开源了一个小一些地模型。该模型的能力之一，就是我们今天的主题：接着别人地话写故事。今天我们要通过算法来实现。
虽然作者有在尽力简化复现难度，但对于很多不是这行的人，让他去敲命令行来走完整个流程，还是困难重重。能够将深奥的原理讲给普通人听，并且简单易懂，是一项科学传播的必备能力。做为技术向的工程师，在产品处于雏形阶段时，能够通过一个 MVP 最小价值产品，实现核心功能，也是一项大大的加分项。对于今天的任务，我们选取容易上手，接口丰富的 slack 作为我们的前端交互窗口。
如何构建一个 MVP 产品；或者具体的来讲，在我们的这个任务中，如何将数据挖掘工程师的模型成果，转化为可落地、可感知的产品或服务呢。操起斧子直接开干，依葫芦画瓢撸个前后端出来吗？这，其实是很多技术人员的一个误区——认为什么都可以从技术层面解决，”少废话别bb，bb is cheap，show me the code“。但从一个商业产品或服务商的角度来看，客户与渠道是前台，我们的客户是谁、如何触达客户以及选用何种渠道维系客户，是一个一开始就要考虑的事情。
以这个 GPT2 bot 为例，我希望的客户是对 GPT感兴趣，但又没基础去折腾的学生或是其他领域的人士，抑或是没时间去跑 demo 的专业同行。如何触达客户：你看的这篇文章的平台，就是我的触达媒介。我最后选择用 slack 交付我的服务，而不是 qq 或 微信，是因为他成本更低，虽然阻挡了部分潜在客户，但权衡后是可以接受的。最后的工作才是依葫芦画瓢，照撸一个出来。本文参照了EdwardHuCS,并在其基础上做了部分改动。
虽然这波 AI 热潮，让很多像我这样的非科班得以上车。但在实际生产环境中，我们还是暴露了诸多问题。其中之一，便是工程能力薄弱。会写 SQL 、会手推算法、会调包，但是就是不会写能跑的整个小系统。在业务变化快的公司中，这可能不是一个好事情。你的模型也许还在细调参数，但突然整个业务就没了。如果你能拿出一个能跑的马儿，兴许能影响这个业务。这就是前面提到的加分项。
言归正传，我们回到在slack上面。我们的核心就以下代码：
核心代码解读 导入一些基础配置
import os import time import re from slackclient import SlackClient import sys from gpt2.src import generate_unconditional_samples # instantiate Slackk client slack_client = SlackClient(&amp;#39;&amp;#39;) # 认证口令 # starterbot&amp;#39;s user ID in Slack: value is ssigned after the bot starts up starterbot_id = None 延迟配置以及样例和匹配模式</description>
    </item>
    
  </channel>
</rss>
